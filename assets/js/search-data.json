{
  
    
        "post0": {
            "title": "Last reflection for CSP of Night at the Museum",
            "content": "IMPORTANT: I was originally going to put my reflection of N@TM on linkedin as a post, but my team convinced me to do it normally, so I’ll do it right . My Night At the Museum experience at DNHS! . On May 31st I had the pleasure of experiencing Night at the Museum at Del Norte High school. I got to see a lot of cool arts and crafts made by the many talented art students of DNHS. Its very inspiring to see what amazing arts ordinary students are able to complete with hard work and patience. . this Night at the Museum, I saw a lot more art since I got there a lot earlier than last 2 times. I also played in a band performance at the start, so I had to stay for a while to be there for the CSP performance later. I got to see a lot of really cool art from the art classes that I missed last time. some of the art there is really high quality and could honestly be sold for some good money. I also saw a lot of music performances, but I already play music so it wasn’t anything new for me. . As for the actual CSP part, our team got a pretty good video cause we knew a lot of people who would be willing to help out. I can see why lots of connections would be helpful, as it would be hard to get good footage for the video if you didn’t know anyone who would want to help you film. We also didn’t run into any major problems on the day of N@TM that would have broke our project, and everything was ready on the day. . compared to the 1st N@TM, I was a lot more prepared for things, and wasn’t as panicked about the whole thing as the 1st 2 times. I have learned a lot about preparation and creating contingency plans for the worst possible scenarios, in preparation for N@TM. I’m definently a lot better at preparing and presenting Comp Sci work, and will be more than ready for whatever CSA holds in store for me. . our video was also pretty good and showcased everything. I might watch it sometime in the future if I ever want to remember how things were in CSP. . . .",
            "url": "https://jyustin.github.io/test-fastpages/2023/06/05/nightreflectlast.html",
            "relUrl": "/2023/06/05/nightreflectlast.html",
            "date": " • Jun 5, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "hacks for tri 3 review ticket 5 (parallel computing, Hashmaps)",
            "content": "Parallel computing hacks (start here!) . Hacks . AP Classroom. Provide answers and thoughts on theoritical question form college board Video in section 4.3. They start at about the 9 minute mark. . Example 1 | Example 2 | . Data Structures. Build a List Comprehension example . list = [calc(item) for item in items] | . HACCCS response . notes from video . Sequential computing is a computational model in which operations are performed in order one at a time . Parallel computing is a computational model where the program is broken into multiple smaller sequential computing operations,, some of which are performed simultaneously. . Computers handle a lot of tasks at once . running tasks can be done sequentially, in parallel. . tasks are done one at a time in sequential programming (like conveyor belt) . IN PARALLEL COMPUTING:parallel computing schedules tasks to be executed at same tme parallel computing overall processes data faster and it scales more effectively. . simple Example . Core 1: task A takes 45 ms . Core 2: task B takes 50 ms . Core 3: Task C takes 25 ms; task D takes 30 ms . Core 4: Task E takes 40 ms . Total time: 55 ms (core 3 runs task C and D in sequence) . Basically, 5 tasks are spread out between 4 cores, and all complete tasks at once, finally being done when all cores finish their individual task. . Obviously, if we run all tasks in sequential on 1 core, the time becomes much longer. . Distributive computing: we now distribute our tasks among dfferent computers, not just among 1 physical computer. This needs network connection. Can take longer if network is bad. . Example 1 . A particular computer has 2 identical processors which can run in parallel. Each process must be executed on 1 processor and each processor can only run 1 process at a time. . whats the minimum amount of time (approx) to execute all 3 processes when 2 processor run in paallel? . process X: 50 sec . process Y: 10 sec . process Z: 30 sec . I think this would take 50 seconds, as we can run process X on one processor while the other runs Y and Z. . I WAS RIGHT! . This is a pretty good example for why parallel is good, but how can we develop programs for parallel processing if we don&#39;t have multiple processors to test on? . Example 2 . What is the difference in execution time between runniing the 2 processes in parallel in place of running on single processor? . sequential: 70 seconds . Parallel: 45 seconds . 70 - 45 = 25 seconds . My ans: difference of 25 seconds . I was right . difference of 25 seconds is pretty large and seems unrealistic, but I think it demonstrates why we need to optimize for parallel computing. . list comprehension example . Data Structures. Build a List Comprehension example . list = [calc(item) for item in items] | . items = [&quot;cinnamon&quot;, &quot;cupcake batter&quot;, &quot;fig&quot;] numbers = [1,2,20,40] newlist = [x if x != &quot;fig&quot; else &quot;date&quot; for x in items] # remove fig from items numlist = [x for x in numbers] sum = 0 for y in numbers: sum = sum + y print(sum) print(newlist) . 1 3 23 63 [&#39;cinnamon&#39;, &#39;cupcake batter&#39;, &#39;date&#39;] . END OF PARALLEL HACKS . START OF HASHMAP HACKS . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . working on hacks . creating own album with python . my_album = { # initialize the album need to run each time &quot;title&quot;: &quot;I know how to use dictionaries&quot;, &quot;artist&quot;: &quot;artist&quot;, &quot;year&quot;: 1984, &quot;genre&quot;: [], &quot;tracks&quot;: { 1: &quot;U.N Owen Was her?&quot;, } } . def search_personal(): x = 1 while x == 1: # use while loop so we can continue searching search = input(&quot;What would you like to know about the album? (type quit to leave)&quot;) if search == &quot;quit&quot;: print(&quot;you have quit lol&quot;) x = 0 elif my_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(my_album.get(search.lower())) #search_personal() my_tracks = my_album[&quot;tracks&quot;] def addtracks(): x = 1 while x == 1: # use while loop so we can continue searching newTrack = input(&quot;add a new track (type tracks), change artist (type artist), show album (type search), add genre (type genre) or type quit&quot;) if newTrack == &quot;quit&quot;: x = 0 elif newTrack == &quot;artist&quot;: artists = input(&quot;type in artist name&quot;) my_album[&quot;artist&quot;] = artists elif newTrack == &quot;tracks&quot;: newTrackz = input(&quot;type in new track name&quot;) newTrack2 = input(&quot;add position of new track:&quot;) my_tracks[newTrack2] = newTrackz elif newTrack == &quot;search&quot;: search_personal() elif newTrack == &quot;genre&quot;: genres = input(&quot;add a genre to the program&quot;) my_album[&quot;genre&quot;].append(genres) newGenre = [] [newGenre.append(x) for x in my_album[&quot;genre&quot;] if x not in newGenre] # use list comprehension to remove duplicates (wow im so good at coding) my_album[&quot;genre&quot;] = newGenre # add genre print(my_album[&quot;genre&quot;]) else: print(&quot;unrecognized command!&quot;) addtracks() #search_personal() print(my_album[&quot;tracks&quot;]) . {1: &#39;U.N Owen Was her?&#39;, &#39;2&#39;: &#39;discord&#39;, &#39;3&#39;: &#39;maybe&#39;} Invalid Search unknown unknown {1: &#39;U.N Owen Was her?&#39;, &#39;2&#39;: &#39;discord&#39;, &#39;3&#39;: &#39;maybe&#39;} you have quit lol [&#39;touhou&#39;] [&#39;touhou&#39;] {1: &#39;U.N Owen Was her?&#39;, &#39;2&#39;: &#39;discord&#39;, &#39;3&#39;: &#39;maybe&#39;, &#39;4&#39;: &#39;tomboyish girl in love&#39;} you have quit lol {1: &#39;U.N Owen Was her?&#39;, &#39;2&#39;: &#39;discord&#39;, &#39;3&#39;: &#39;maybe&#39;, &#39;4&#39;: &#39;tomboyish girl in love&#39;} . answering questions . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # THE output of the function is {1,2,3}. # There are no duplicate values # probably b/c we can&#39;t have duplciates in hashes. # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # Sets are a good example of how collisions in hashing works and why we shouldn&#39;t have duplicate # Sets are a tool we can use for hashing if we don&#39;t want to use dictionaries. # Creating a dictionary with information about the album &quot;Lover&quot; lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # Lists # all of this is compiled into a dictionary # Printing the dictionary print(lover_album) # Retrieve value from dictionary with key print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) # adding a value with a new key lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? # Just remove the duplicate manually lol # or use sets (that worked) settest = set(lover_album[&quot;producer&quot;]) # Printing the dictionary print(lover_album[&quot;producer&quot;]) print(settest) # Adding a an key-value pair to an existing key lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # lover_album[&quot;genre&quot;] =[&quot;Pop&quot;, &quot;Synth-pop&quot;, &quot;electropop&quot;] # will work, but maybe there is another way # lover_album[&quot;genre&quot;].append(&quot;new genre&quot;) #this method uses list methods but we now have duplicates if we run multiple times # Printing the dictionary print(lover_album[&quot;genre&quot;]) # Print lover_album in more readable format for k,v in lover_album.items(): # iterate using a for loop for key and value #print(str(k) + &quot;: &quot; + str(v)) dont need this.... pass # Write your own code to print tracks in readable format # # exe = 0 trackS = lover_album[&quot;tracks&quot;] num = 0 for k,v in trackS.items(): # iterate using a for loop for key and value exe = exe + 1 num = num + 1 print(&quot;song&quot;, exe, &quot;:&quot;, trackS[num]) # Using conditionals to retrieve a random song def search(): x = 1 while x == 1: # use while loop so we can continue searching search = input(&quot;What would you like to know about the album? (type quit to exit)&quot;) if search == &quot;quit&quot;: x = 0 elif lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # use while loop so that we can continue searching # .",
            "url": "https://jyustin.github.io/test-fastpages/2023/06/04/tri3reviewticket5hacks.html",
            "relUrl": "/2023/06/04/tri3reviewticket5hacks.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "coding hacks for 2.3",
            "content": "HACKS that are completed . Score for quiz: . . pt 1: Notes . Using the Pandas python library is neccessary for complex interactions with a premade database or one generated using a dictionary. the pandas library can select and sort through the data for us, like printing out a country with the highest covid deaths at the top of a list of all of the data. Although this library is very useful, I am not sure how I could integrate this with my project, as my project does not use python for anything but has markdown as it&#39;s frontend. . Kaggle is a good source of premade databases for practicing working with databases. the databases also look legit. . database information . the databases I used are crowd-sourced databases from kaggle, meaning that there is likely no biases in the database. This is because there is simply no reason for the developers to try and manipulate the data, as there is no potential gain they could earn from it. However, the database is most likely not up-to-date as steam is a constantly updating marketplace, and prices are constantly being updated and new games are constantly being added. If I wanted to give users information about steam I would use an API, not a database that cannot update itself. . import pandas as pd steamdata = pd.read_csv(&#39;files/games.csv&#39;).sort_values(by=[&#39;user_reviews&#39;], ascending=False) print(&quot;--the top 10 most popular steam games (by user reviews)&quot;) print(steamdata.head(10)) x = steamdata.head(10) y = steamdata z = steamdata.head(100) avg = x[&#39;positive_ratio&#39;].mean() avg2 = y[&#39;price_final&#39;].mean() avg3 = z[&#39;price_final&#39;].mean() print(&quot;the average positive ratio of the top 10 most popular steam games is &quot;,avg, &quot;%&quot;) print(&quot;&quot;) print(&quot;the average cost of a steam game is &quot;, avg2, &quot;usd&quot;) print(&quot;&quot;) print(&quot;the average cost of the top 100 most popular steam games is &quot;, avg3, &quot;usd&quot;) steamdata[&#39;date_release&#39;] = pd.to_datetime(steamdata[&#39;date_release&#39;]) def datasortfunc() : #sort by release date datasort = steamdata.sort_values(by=[&#39;date_release&#39;], ascending=True) print(datasort.head(10)) data2 = datasort[[&#39;title&#39;]].head(10).to_string(index=False) print(&quot;&lt;the 10 earliest games on steam &gt;&quot;) print(data2) datasortfunc() print(&quot;just the title of the top 10 games&quot;) print(steamdata[[&#39;title&#39;]].head(10).to_string(index=False)) . --the top 10 most popular steam games (by user reviews) app_id title date_release win mac 19041 730 Counter-Strike: Global Offensive 2012-08-21 True True 19489 578080 PUBG: BATTLEGROUNDS 2017-12-21 True False 8746 570 Dota 2 2013-07-09 True True 5347 271590 Grand Theft Auto V 2015-04-13 True False 19473 359550 Tom Clancy&#39;s Rainbow Six® Siege 2015-12-01 True False 9811 440 Team Fortress 2 2007-10-10 True True 7342 105600 Terraria 2011-05-16 True True 2335 4000 Garry&#39;s Mod 2006-11-29 True True 3764 252490 Rust 2018-02-08 True True 7155 292030 The Witcher® 3: Wild Hunt 2015-05-18 True False linux rating positive_ratio user_reviews 19041 True Very Positive 88 6941137 19489 False Mixed 57 2142372 8746 True Very Positive 82 1930493 5347 False Very Positive 85 1367837 19473 False Very Positive 87 939992 9811 True Very Positive 93 935635 7342 True Overwhelmingly Positive 97 867226 2335 True Overwhelmingly Positive 96 795170 3764 False Very Positive 87 722973 7155 False Overwhelmingly Positive 96 640996 price_final price_original discount steam_deck 19041 14.99 0.00 0.0 True 19489 0.00 0.00 0.0 True 8746 0.00 0.00 0.0 True 5347 0.00 0.00 0.0 True 19473 19.99 19.99 0.0 True 9811 0.00 0.00 0.0 True 7342 9.99 9.99 0.0 True 2335 9.99 9.99 0.0 True 3764 39.99 39.99 0.0 True 7155 39.99 39.99 0.0 True the average positive ratio of the top 10 most popular steam games is 86.8 % the average cost of a steam game is 8.750796431357113 usd the average cost of the top 100 most popular steam games is 20.706500000000002 usd app_id title date_release win mac linux 16051 282010 Carmageddon Max Pack 1997-06-30 True False False 32559 232770 POSTAL 1997-11-14 True True True 10014 70 Half-Life 1998-11-08 True True True 9364 20 Team Fortress Classic 1999-04-01 True True True 35817 224920 Legacy of Kain: Soul Reaver 1999-09-08 True False False 11214 50 Half-Life: Opposing Force 1999-11-01 True True True 11441 10 Counter-Strike 2000-11-01 True True True 17624 60 Ricochet 2000-11-01 True True True 12938 130 Half-Life: Blue Shift 2001-06-01 True True True 9365 40 Deathmatch Classic 2001-06-01 True True True rating positive_ratio user_reviews price_final 16051 Very Positive 85 428 9.99 32559 Very Positive 85 2329 0.00 10014 Overwhelmingly Positive 96 68327 9.99 9364 Very Positive 85 5146 4.99 35817 Mostly Positive 73 1467 0.00 11214 Overwhelmingly Positive 95 14057 4.99 11441 Overwhelmingly Positive 97 132250 9.99 17624 Very Positive 80 3395 4.99 12938 Very Positive 91 10522 4.99 9365 Mostly Positive 79 1757 4.99 price_original discount steam_deck 16051 9.99 0.0 True 32559 0.00 0.0 True 10014 9.99 0.0 True 9364 4.99 0.0 True 35817 0.00 0.0 True 11214 4.99 0.0 True 11441 9.99 0.0 True 17624 4.99 0.0 True 12938 4.99 0.0 True 9365 4.99 0.0 True &lt;the 10 earliest games on steam &gt; title Carmageddon Max Pack POSTAL Half-Life Team Fortress Classic Legacy of Kain: Soul Reaver Half-Life: Opposing Force Counter-Strike Ricochet Half-Life: Blue Shift Deathmatch Classic just the title of the top 10 games title Counter-Strike: Global Offensive PUBG: BATTLEGROUNDS Dota 2 Grand Theft Auto V Tom Clancy&#39;s Rainbow Six® Siege Team Fortress 2 Terraria Garry&#39;s Mod Rust The Witcher® 3: Wild Hunt . complete output --the top 10 most popular steam games (by user reviews) app_id title date_release win mac 19041 730 Counter-Strike: Global Offensive 2012-08-21 True True 19489 578080 PUBG: BATTLEGROUNDS 2017-12-21 True False 8746 570 Dota 2 2013-07-09 True True 5347 271590 Grand Theft Auto V 2015-04-13 True False 19473 359550 Tom Clancy&#39;s Rainbow Six® Siege 2015-12-01 True False 9811 440 Team Fortress 2 2007-10-10 True True 7342 105600 Terraria 2011-05-16 True True 2335 4000 Garry&#39;s Mod 2006-11-29 True True 3764 252490 Rust 2018-02-08 True True 7155 292030 The Witcher® 3: Wild Hunt 2015-05-18 True False linux rating positive_ratio user_reviews 19041 True Very Positive 88 6941137 19489 False Mixed 57 2142372 8746 True Very Positive 82 1930493 5347 False Very Positive 85 1367837 19473 False Very Positive 87 939992 9811 True Very Positive 93 935635 7342 True Overwhelmingly Positive 97 867226 2335 True Overwhelmingly Positive 96 795170 3764 False Very Positive 87 722973 7155 False Overwhelmingly Positive 96 640996 price_final price_original discount steam_deck 19041 14.99 0.00 0.0 True 19489 0.00 0.00 0.0 True 8746 0.00 0.00 0.0 True 5347 0.00 0.00 0.0 True 19473 19.99 19.99 0.0 True 9811 0.00 0.00 0.0 True 7342 9.99 9.99 0.0 True 2335 9.99 9.99 0.0 True 3764 39.99 39.99 0.0 True 7155 39.99 39.99 0.0 True the average positive ratio of the top 10 most popular steam games is 86.8 % the average cost of a steam game is 8.750796431357113 usd the average cost of the top 100 most popular steam games is 20.706500000000002 usd --the top 10 oldest steam games (by date of release) app_id title date_release win mac linux 16051 282010 Carmageddon Max Pack 1997-06-30 True False False 32559 232770 POSTAL 1997-11-14 True True True 10014 70 Half-Life 1998-11-08 True True True 9364 20 Team Fortress Classic 1999-04-01 True True True 35817 224920 Legacy of Kain: Soul Reaver 1999-09-08 True False False 11214 50 Half-Life: Opposing Force 1999-11-01 True True True 11441 10 Counter-Strike 2000-11-01 True True True 17624 60 Ricochet 2000-11-01 True True True 12938 130 Half-Life: Blue Shift 2001-06-01 True True True 9365 40 Deathmatch Classic 2001-06-01 True True True rating positive_ratio user_reviews price_final 16051 Very Positive 85 428 9.99 32559 Very Positive 85 2329 0.00 10014 Overwhelmingly Positive 96 68327 9.99 9364 Very Positive 85 5146 4.99 35817 Mostly Positive 73 1467 0.00 11214 Overwhelmingly Positive 95 14057 4.99 11441 Overwhelmingly Positive 97 132250 9.99 17624 Very Positive 80 3395 4.99 12938 Very Positive 91 10522 4.99 9365 Mostly Positive 79 1757 4.99 price_original discount steam_deck 16051 9.99 0.0 True 32559 0.00 0.0 True 10014 9.99 0.0 True 9364 4.99 0.0 True 35817 0.00 0.0 True 11214 4.99 0.0 True 11441 9.99 0.0 True 17624 4.99 0.0 True 12938 4.99 0.0 True 9365 4.99 0.0 True &lt;the 10 earliest games on steam &gt; title Carmageddon Max Pack POSTAL Half-Life Team Fortress Classic Legacy of Kain: Soul Reaver Half-Life: Opposing Force Counter-Strike Ricochet Half-Life: Blue Shift Deathmatch Classic just the title of the top 10 games title Counter-Strike: Global Offensive PUBG: BATTLEGROUNDS Dota 2 Grand Theft Auto V Tom Clancy&#39;s Rainbow Six® Siege Team Fortress 2 Terraria Garry&#39;s Mod Rust The Witcher® 3: Wild Hunt .",
            "url": "https://jyustin.github.io/test-fastpages/performancetask/2023/06/04/testingwytf.html",
            "relUrl": "/performancetask/2023/06/04/testingwytf.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Jupyter note books test blog",
            "content": "print(&quot;hello real world&quot;) . hello world .",
            "url": "https://jyustin.github.io/test-fastpages/python%20codes/week%200/2023/06/04/testbook.html",
            "relUrl": "/python%20codes/week%200/2023/06/04/testbook.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "PLEASE FOR THE LOVE of GOD WORK",
            "content": "print(&quot;hello real world&quot;) . hello world .",
            "url": "https://jyustin.github.io/test-fastpages/python%20codes/week%200/2023/06/04/testbook-copy.html",
            "relUrl": "/python%20codes/week%200/2023/06/04/testbook-copy.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "new sqlite table",
            "content": "import sqlite3 database = &#39;instance/users.db&#39; # this is location of database # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection def create_table(conn, create_table_sql): &quot;&quot;&quot; create a table from the create_table_sql statement :param conn: Connection object :param create_table_sql: a CREATE TABLE statement :return: &quot;&quot;&quot; c = conn.cursor() c.execute(create_table_sql) sql_create_comments_table = &quot;&quot;&quot; CREATE TABLE IF NOT EXISTS comments ( _uid integer PRIMARY KEY, _name text NOT NULL, _text NOT NULL, _image BLOB NOT NULL ); &quot;&quot;&quot; create_table(conn, sql_create_comments_table) #read() . def convertToBinaryData(filename): # Convert digital data to binary format (needed for storing images) with open(filename, &#39;rb&#39;) as file: blobData = file.read() return blobData def writeTofile(data, filename): # Convert binary data to proper format and write it on Hard Disk with open(filename, &#39;wb&#39;) as file: file.write(data) print(&quot;Stored blob data into: &quot;, filename, &quot; n&quot;) def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id: (must be a number!)&quot;) text = input(&quot;Enter your comment&quot;) image = convertToBinaryData(&#39;images/smileyforpts.png&#39;) # add img # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO comments (_name, _uid, _text, _image) VALUES (?, ?, ?, ?)&quot;, (name, uid, text, image)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, &quot;uid likely not a number&quot;) # Close the cursor and connection objects cursor.close() conn.close() #create() def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM comments&#39;).fetchall() for row in results: photo = row[3] print(&quot;Storing img in downloads&quot;) photoPath = &quot;/home/dragoon/vscode/test-fastpages/_notebooks/files&quot; + &quot;.png&quot; writeTofile(photo, photoPath) # download img # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() #read() def update(): message = &quot;updated&quot; uid = input(&quot;Enter user id to update&quot;) text = input(&quot;Enter updated comment&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE comments SET _text = ? WHERE _uid = ?&quot;, (text, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the text has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM comments WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . A new user record 1 has been created Storing img in downloads Stored blob data into: /home/dragoon/vscode/test-fastpages/_notebooks/files.png (1, &#39;derpy&#39;, &#39;test&#39;, b&#39; x89PNG r n x1a n x00 x00 x00 rIHDR x00 x00 x01h x00 x00 x01h x04 x03 x00 x00 x00 x88 xcb| xe6 x00 x00 x00!PLTE xee xee xee x00 x00 x00 xff xff xff xf6 xf6 xf6JJJ&amp;&amp;&amp; x92 x92 x92 xdb xdb xdbnnn xac xac xac xc6 xc6 xc6 x1f xc7M x81 x00 x00 x14~IDATx xda xec x9d xcdw xe3 xb6 x11 xc0e xaa xbb xaf/ &#39; xd3 x96 xfcu xa2II x94t x92 xe9 xa6_ xa7 xa5 xd3$ xcd xad xdal xb3} xb9II xb3mN x95 x9at xdb x9c*w xd3&amp;= xd5zm^7 xa7 xca xafI x9a xfd+k[ x020 x03 x02 x04H x82$ xb6 x15 x0f xfb x96 x06?~ x02 x07 xc0`03h xf8 xeb xc3k xac x8f x97 xe2 xb4 xb1 x85 xdeBo xa1 xb7 xd0[ xe8- xf4 x16z x0b xbd x85 xfe_ x84 xde x1c xce xe6 xef/ xd3 xe9 x16z x0b xbd x85 xdeB xdb x03}w x04 xe7 xf6C7 xa3; xd2 xa7 xdf&gt; xff xe0 xe6 xf8 xf5 xf3o~ x13 xf9vC xdf x12 xff xe0 xdbg xaf x8f]p xb4 x1f xfd xf9K xc7bh xff x95_ xbd xee n x8fG x9f xcfo xea xdfB xe8 xe0k t1 xe1v xee xb0m x82 x0e xdf x1f xbb x8a xa3 xfd xc6 xfc x06 xdb x1e xe8 xf0}W xeb xb8 xc1 xf6 xad x80n xfa xfe? xc7 xae xe6 xd1~ xcbHM x17Ws xef xc7n x86 xa3 xf5d xdd&#34;k x9d x04x xbft3 x1e xef xcc xfd x9a xa1 xbf?v3 x1f xed &#39; xfe xa8N xe8 xbf xbb xb9 x8e xb7 xa2 xa0. xe8( xb89 x8f xa3yM xd0 xfe vs x1f xade- xd0 xfe} xb7 xd0 xf1^ xf5 xd0M xff xf7r x9e x9f xff xe4 xb3 x1b x1d xef xf9 x17 x1f| xf6,eh xffc xd5 xd0M xff xdf x92 x9e xe1 xa7 x1f&gt;E n xb5 xff xca x17 xcf$= xcc x9b xd5BK x98 xdbo xfc xeb xb6 xf8 xbc t/ xbe xd5 xa5 xfe xd6L xde xac x14Z xc8 xfc xe8 x89 xec xde xf3 x9b x7f xbf xfeTH] x1d xb4 xffQ xf2 xfd xbf xf8 x9b x9fv xef x8d xc8 xfc xf8S x11ue xd0 xdfI xf6 xbb7 xc8# xe5 xbd?Jb xff xc5 xaf x08 xba x9f x90 xe5 x0f xfd` xa4u xef xef x12 xb2 xfd xa7 xa0 x12 xe8 x81@K x1e xe9&gt;* xa9_M xb3+} x99 xf5ig8N xa8? x19t xe2 xc8 xbf xcf xdf?/} x12 xd0 xf4 x16 t-&#34; xeb4 x87 x7fB xe9 xd0 xfe x15 xa7 xaf xe5 x99 xf6q x1d xe6q xc9 xd0 xd1G| xe3 x1f xe5 x992} x17? xe5A xa9 xd0N x0f x8b xe3{~ xcey xde x00 x0b xf6 xb2L xe80 xc6 xeae~ xfb x0bn xce xadhT x1e4 x12 xe8 xd6uP`F= x8c xb1X x97 x06 xddA xcc xf3Bf x80 x08S xbf x16 x94 x04 x8d&gt;i xeb xba xa0 xed x02S xb7 xafG xe5@O xd0K n[ x89&#34; xd4 x1a x0f xfcR xa0; xb8 xbd x177mE xa8/z xe0 x95 x00 x1d xc2z xb94b x8f x8b~ xc8 x0b x88i xe8+&lt; x1a x181&#34;&#34; xc5 xfcV@ x0cC xf7 xb9q xd7 x8c xe5 x13U xc5 xa5g x1a x1a4 xf5 xa3 xc8 x18t xd3 x07 xdaS xcb1k5 x8d&gt; x86 xc2g xd0 xb1 x00 xf5 xa3?3: t x08 x86 xa8 x11 x9a xf4 x86 x88 xa0 xdc] x9b x84 x86 xa2 xf7 xaea x17 x0e xff+ xd0X x02 x83 xd0= xac xb2 x9b xf5; t x80XOG xe6 xa0 x17xT1 x0b xed x0c` x95 x18 x83 xee xc3 xb6b xde xc3 x07 xb6 xf2K xcf x14t x8c xe7s xc6 xdd x92 xc0 x97l xf9 x86 xa0; x9c xcaa x1c x1a n xc8 x85g x06 x9aU xf4 xe3 x92 x1c xc0 xa2 xaf xb8 xaa. x0c xdd x01 x0f, t xba xe9 xc5 xb8 xaa x0bC xc7 x9cnW x86 xab x9d xd3 xc7U] x14 xba x03 xd4 xb0 x12 xdd x05 &#39; xa8 xaa x8bB xb3 x8a^ x8eJ x84 x1e xa0 xaa. x08 xcd xbe xdbIP xaac xe6 x8cI xe1 xa8( xf4 x82 x19 nG xa5B{T xdd; n x8aYM x9bL xebx xbbd x070 x87 x8d x8b xd3b x93 x80 x88 xaaw xed xd2 xbd xd6XU x1f x17 x83fz xf4E xe9 xd0 xce xabL xaf. x04= xc3 xe3J xb9 xfe x81 x01 xed xa8v xbd&#34; xd0cT xd1%C; xdf xa3 xb2 xe8 x14 x80 xee x89. xdd x133 x18c xb5) x1f4 xed xef x1eV x02 xcd xa4 xfa( xc8 r= xe0* xbat x9fW xd6 x81LsC xcf` x1f] x054 xeb xabO xbc xbc xd0 xf4w xcf+ x82nz xb8) xe6 x80 xa6 xcd xf0 xc4 xaf x08 xba xe1 xd0 x8f{1 xca x07M xb5 xc5eT x194mF x07A. xe8 x90 xdd xefT x06 xcdj xea: x17t x97 xa9 x8a x15BSU xf8m/ x0ft xcc x94 xf2 n xa1 xd9k x83 x1cV xd3 x01 x18XJQ xa0 xc5 xa7 xce=` xae xc8: t` xedx^)t x83* x96 xfb xd9 xa1 xa3 x18 x98 xfd xab x84 xa6*|+;t x0f xda r xaa x84n xf6 x99|d x84 xa6 xd2 xd1 xf6+ x86n xd0 x81x7+4 x95 x8e xdd xca xa1i} xb5 xb2B x0f x90 xc9 xb1Rh xd6o- xb3A xfb; xa5 xdav xd3O# xa2 xc6 xefe x84^ xed xbfZh: x178 n2A xd3 xce xf2 xba x06h xd6U xcf3Aw x91tT r xed xd0 xef&lt; xca x02} x85 xe7 x86UC x93:; xf0 xb2@c xe9 xa8 x1a x9a xc9G x94 x01 xba x8f xa5 xa3rh* x1f x97 x19 xa0w x98 xceR x0f xf4 xe9 x06 xe0 xd0 xd3 xb6 x9a xd2 xe1pY x85 x02-: x1d xe0O xad3 t x08 xf1 xa2^ r xd0 xb4 xda xe6 xba xd0 xcd x0e xd5; xea x82 xa6 xfa xc7 x85. xb4 xb3 xa2Zi] xd0 r xd2 x15 x1c xeaB xd3oScdx xa0abF xe7C6g xa9 r xda x99@ xa1VCS x91~X#t xb3 xab^ x81@ xcb x08+6 x1c xd6 x06M x95 xeaCM xe8 x98 x89S} xd0 x11 xa0 xd0 x80 x0e x81 xd9 xb1&gt;h xfa xbd x1d- xe8&gt; x90 xa6 xfa xa0i xcb xba xd4 x81vv@ xbb xad x0f x9a xf6a xfbZ xd0 x13 xa50UrJ x84 xfa@ x07: x82 x96 xf4 x1a xa1 xa9P xeb@ x0f*[ xa2M? xa5= xf5R xc3j xda x81jiM xfat x03N xae/F xeaI xc0F xbfj xeb xc7 x81 x05Y xb0 x02_; xad xc0 x98N x04 x94 xd0 x0b8 xa7T? xda xfb xe4 xa9 xbf x0e x92 xd3 xac xcbO^ xfc xd6 xf7 xb4. xde xcc xae x8f4 xa0IO3 xd2 xf2, xb9 xcd x91 xd1 xfe xab~h xdf x7f xc6w xd9 x10&lt; x9d x8b xc9 x9c xeb t=@SJ xc5 xa3I x84 xd1; xbe&amp; xf4?H x8c x8c xa7qq x9f xb6. x15t x07 x19w x14 x8f xa6k xe7 xef x06Z xd0 x1f xbb xdc4? x15 x9a xac x84^( xa1 xcf6u xa1 xe1 xa8 xca x96G xd6&gt; xc4J x0e xe0 xd1 xfcXG x96b xd2 x12U xd0 x9b xf1 xf0X x03: x84 x91 x90 x81 x064 x8c xee x99k@ xafH x9f xa0 x82 xde xf43{ xea x0e x81-%m xaaZ x05 x8dbq xf65 xa0OI xef xab x80 xf6RM; xd8 xab x15E xe7 x1d xab; x84 x15 x8ae xd4 x80 xees xfe x042 xe8 x1e6 xb2 xa6qp x91 xd8 x8e x12 x9a x8bbVC x87 xe8R)4 x19 xf0 xdb x81 xda xf4= xc3 x10 x97*h xeeG xeej x8cDcd xbb x95A x13eZbcE xd0 J x92CU xd7{&amp; x08bV@O xa0 xf1C x0e=A x86 xbf4 xe8 x11 x9fY@ x05= xe1n x88 xd4 xd0; xd8 x9dX x06 x1d x93 xfe t xdd xe3s x0b xa8r xe7 xf0 x19 x054 xd6 xcd xba xd8 x85Jf5 xe5D_ xc7 xef x86 xb5 xc4T x159 xe4 xaf xbfP xab xd7= xfch xc9$` xa0 xef xb4t xcaC, xf5 xac xb7 xf4 xd8S; xfcx xf8 xd1 x12 xe8&gt; xfe x1ei xd0g&lt; xc4e:t&#34;W xc5 xae x1a x9a x0c x05 x17 xa9 xd0 xa7 x9c#} n xc7,#tB x9c xee xbc xd8 x14 xb3 xaf tZ xe5 x92@ xcf xf4 xdd xc3fB x195 x0c=C x9d x99 x04z xf3 xcb xf6&#34;K xa0 xbbh xd8 x90@oz xbcK xc7 x12 xe8&gt;R x94% xd0 xa4 xb5 xda x02M xba x9c x05 x9a xf4 xa5 x8e- xd0 x01 xd2 xdf xc4 xd0=2 xb8 xd9 x02M x86 xd1i nt x87 xa8 x11 xd6@/ xe0 xb3 xc5 xd0] xa2 xd0[ x03 xbd x82 x1d xb5 x18 xfa x8c xc4 x11X x03} x06;j14 xfd] xd6@w xe1&lt;[ x0c=! xaf xb7 x06 xba x0fG x17 xa1 xd5 x94h xd3S x1dG xb4U x02:] x9fN@ x1f xea x18Q{p rT8 t J xd5 xdc x1e xe8!T; x85 xd0#j{ xb7 x06 x9a! xc9 xa0 xd9 xcf xb2 x06 x9a}| x19tO xe5N[=4ifK)t x9fN x01 xec x81 x9e x80 x98d!t x87N x01 xec x81 xbe x02 x0f x17A x13 xf3 xd2 xaeM xd03`d x12Bo xc6 xcc= x8b xa0 x01 x93 x18 x1a xfc*{ xa0 xbb x027n x11 xc7 x85E xd0 xa0 x9dI xa0 xafhK xb5 x07 xba x0f xb2( t xa1 x17 xd4&amp;f x0ft x0fXb x84 xd01u x03 xb2 x07z x00 x0c xc3i xd0s x9b xa0 x87@ xcd x13ZM xc7t xeak x8d&gt;M x16 x13 xdb x9el x12 xb0 x81n xda x04 xed x83 xf5 x14!4 xb3 x8cX x07 xed x9e xa7C xdf~ t x8b xa0 xd9 xe7 x17B x07VB xc7 xcc xc6$ x82 x0e x99 xb5 xef xff x06: xabQ xfdP x0fz! r xb9 xbd; x1fRO x16 x1d xe8 xc2 xcb x17 x87 xa3, xd0K t xf4 x13t x15 x0bE xfa xd0 x07z xd0U, xc99 xcc x80d x06: xb1 xf8 xa9 x8aM xe0 x17? xa7 x99 xa0 xa7 x12 xe8^&amp; xe8 x80c8P xc5&amp;,D_ xa6bh x7f xc1{ x15h x06T xb8p x1dE xfd xa2+ xa3 xd0 xbc xeb x84n@ x85 x9bb xbd xcd r} xac t xcdA( xddG=Q x0f x99 x0f x1a( xb2 xbdl x81 xe2~ xe9 xee@ xb7 xa7 xc4Z3 x95L x022B x17s xbc xda xad x07: xbb x8b xdb&#34; xa3 x8b[ x06 xe8 x03] xe8 xd2 x9d t xcb x80. xe2 xb6 x19e x85^J xa0 x07 x99 xa1s; xc8^{ x86 xa1 xb3$ xb6] xbb&#34; x7f^ x8e+ xf2 x1aza x1c xfa xe6 xff/ xbe x8929} xbf xf8R xd7 xe9 x1bA_K xa0 x879S x08 x97 xe5^ xbf x86 x8e xd3 xa1Cf x17 xa9%r! x15z xfeRA x8f x99 xeb xa1 x08z xc4 x06X{ xa0 x89 x1a. xb3 xe5 x9d xb35; x8b xa0 xddth xf0 xa3 xec x81 x1e t xb2 xd0 C xe8 x98F x00 xda x03 x1d x8a xa0 xa1&#34; x1bS x13 x83 x8e&gt;] xcd)0 xc6 x88myl xb6n x0f xf4P x05 xcd xe6 x90 xf6@ x839 xa0 x18 xfa x8aN x84 xec x81 xee xab xa0W xd4 x8ab x0ftGn xad x9f xefP xd7,{ xa0 xbbrk%2 xcf xed xdb x04} n x82 xf6 x84 xd0 xecW xd9 x03 xbd x03 x1c xf3 x84 xd0 x1dj r xb0 x07z% xb7V xae xcfYK xb5 x07z x02L;B xe8 x01 xed xc8 xed x81 x8e xe5&amp; xd6 xf5yHW x8a xec x81 x1e x834 xdab x0fH x97, x7f xd9 x03 xed xb2 x159 t4 xfdY xd6@ x870 x00N x0cM x05 xc8 x1a xe8 x9e xd0 x98 x8d|M x17el x9dT xe8 xb4 x03 x03o x84.n xc4 xb5 xe6 xa15 xd0 xc4 x85 xe9$ x05z x87 xc4 xbf&amp; x9f xd5 xf4 xcfk x80fDRh xf6 xbb x92&gt; x9f xde x0b xa7 xdc xbd/ x82 xa7&#34; xe8+QVG|3 tdH xde xdc x1b xbb xed xa9W&#34; xf4 xed x0b x96 xc9 xf7. xa0 xd7 x8e x18 x9a x84 x8c$n xbe xdbg xb0=/ r xba xb9~ x81 xc3 x97 x12 x03 xc14 x05 x9a xd8 xf6# xee xe6 xcdJ xd6ai xd0 x9b xa5 x90] xbe xd4C xeb x06b xe8H x92 x05u3 xea xb4K x83 xde xd4h x9b xb7e x0e xa0 xcf xb7 x04 x9aX xfb. xb9G xf7p x14 xaby xe8 x1e xe7 x14@J xfbhG &#39; t4 tZ xe4 x1eM xd2 xc7 xec x95 x04M xd3(= xe4 xec xc28 xa8S x02 x8d x83 x16i xe9i xc9iN xe9 xba xf9 xfe x08 x8b xe5 n x05 x8e x8b xa1 x9b xa78 xd6 x9d x8b xdf xe6 x1b x841 xe8 x10 xaf=3 xe8 x890 xbd* xf7 xac x8e+l x10; xd8 xcb xd144M xc9 x95 x80 x1e# xe7J t xf4 x80s8 xe1 xc4c xb3E xa9ih xe7 nE8 xb3 xd2 x10ma &#39; x83 xf6 xd0&amp; x1f x89 x86 xc8 xc5 x9b x98 x82 xf6 x12 x1eg xaf xc5 xdd xdb xe0 x14Y. xcfC x03 x7f x00 xad-) xb2 x9f xf6 xb9] x01ii x07 x85 xd8J&amp; x01T xf2 xf7q1s xe59 xf6J x80^ xf1 xfb xc6 xf8h x9c xa4 xfd x82 x0cz x86 xa3 xddI xe9 n9 xf1 x98 x86N xec xeaK xa0 &#39; xa9 xfb, xd1 xf3 xaex xab x9c x0e x92 x0f xc3 xd0 xe0 xe1 x11*% x1f x98 xa4 xa1 x96A xf7 xb0g x03)eME xd7Y( xc3) xdbov x8eKC xae[ x90A x87x+DZ xca 5 xe6 xa6 xa1= x90 xd7 x04 x97 xf6 xd3= xfe x98O xd7 x18i x19 xb4 x94 xf9;&gt;4m xcaa xfd xe9&gt; x86&amp; xe3s[ x95 xe4 x8f xc8 xfe t xf7 xe8! xf4 xa11 x0b xbd x00 x8e x9f xa8 x94 x8c9 x07J xe8 x19R x06 x136 xb5; &#39; x9a2, x1b xeb x1d 0tL xfa_ x054 r x92p xb87 x9d x01 xbfg xa3 xd0 xac7 xdd xe5 x04/ xa4 n x8f nz xd9p x1e8 xe5 xceMB{ xc8 xf9 x14 x95 xd2 xd4sJ xe8s xa4 xef &#39;= xc6 xc1 xd6aF xa0 xbbP:P xa9s xa6pSd xe7D x1f? xe6 xdft x96 xd8 xce xd6 x044 xa8 x8b]n x04 } xc2 x91 x06 xf4 x0c x8e x89IGe x18;T x1c x1a xec_ x9b xf0 x90&amp; xe3 xe1 xa1 x1a x9a xa6 x13 xbd xe6 xdf xb4p xf9 xbc x82 xc5 xa1 xa3 x05rGD xa5 xc1* x7foB xcd x1d xc0} &#39; xa0 x8f xc2 xab. xdc xb4 xd5 x8c&gt; r* xfa!_ n x12 xac xfa xa9 x93 x80 x06 xd3 xb9 xee xd6Hai x88 x9d4 x8d@ x83|c x0e_ xbab x01Nj xe8 tk xcc x92I x11 xa9 xea xc2 xd0 xc0 x8f39 x91 x8b x99 x86 xa6 x86&gt; x03 x9b xb9 xa1 xe9g x9f xdf6 xbe0 xf4 xc2 xe56 xab x06 xa5! xe8T xd4 xd0} xa09c xa3Y xccm x1b_ x14 x1a xd4B+Q xda x01 xce xe1jh x0f x0856 xa9 xdcs xb3l xb0 xad&gt; x8d xb9f x88JW 1 x90 x1a x9a&lt; xab x1d xa49L xbf xe6 x15 x86 x86 x912N xa24 x06 x93Z r xe8 x99 xac xaf x81! xaa xc5 xf7 x97 xf6 x80{ xfeI xa2t( xeb xc4$ x8f xee xb0 x9e x9a3} xc3P xa6 xc2;y xaf xf8, x85 xa8 xb4 x0bm x16 x1a xd0! x9b x0e xf2 xa50 x8fc xc1 xd5 x0c x18!p x90L xc5x x05 xb7i xd6 x80 xa6 r$JM xf3 xa9 x95$X~ n x03 x04. x93{ xc6 x03 xd5O x0fz&amp;OU n_ xf5 xb8 x00tt x0fGA xc8jg xbd x9f xad x0etG x9e xaa xb4 xef&amp;%1 x8fA x1a x85 x8f &amp; xe5p x07 x8a xb4 x164 xdd xeeG x90 xf5 x13Vu+ xb7m xd7 x8b]&lt; xbc xf2 x17 xc7ii xb0 xc5 x8f^H x1b5 xae xea x93 x9c xd0 xc0&gt; xb3Qd xb8 x8b x07nZ x1a xec x86H xcd xa5 xb1B{I# x1a x0e x8e{ xa0 xde&#34;7 xddLJ x1a4w xf1 x19N xf8 xac x9a x04 xa0)% xd96 x0f x946q x9c xd92 x8f x95l x90L x8f xcc] xbc x90 x18 xba xd2 xa0 x03 xb8m/W x8as xee xb6 xe6 xd9 rNa x8c x83/ x93 x17 x0f]lM xd7 x82 xa6; x04m xd6 xe6`i x13 xd7 xd3 x91 x93 xd9v xb3H xa6 xec xe5. xeer xa6_-h:Q x14 xed xb0 x1e xe1$ x19 x07Q x94 r x1agG&gt; x11] x8c xb7 x94 xd4 xdd xe68 xc4 xf2 xc1Y` xc7n xf2 xfbjB7I$ x14 xd1 xbb x9c xff xb6w6Om x1ba x18 x17 x12LKO xd5 x8c xe4qo x9aW x93 x18s xf2 xc8M&amp; xc7: r xc1 xc9 xa9 x9e x98 x90 xe6 x04 xc9` x92 x1c xdd x04 xa79 x15B x1b xe8 r x17H xe1 x94q &#39;d xd2 xbf xb2 xb2 x01 xed xb7 xb4 xbbZ x99LG: xa1 xf1 xae xf7 x87 xbc x92 xde} xdegw9 x85 xa9-%e xa1 x93Q xf2 x83 x80 xd3yf xc99 x9c xdf xc9C xdb xb0 xc1_ xc9 x84(| x8d x0e x14 xe4 xa0 x93m xf3&lt; x9eM x8b x9e x13 x91 x85 xb6 x83u xder xdf x98r xfc xad&#34;t x9d x98w/ xfc4 xb9 x1b xa5 xa0 xa3 x1a= r x9b xbb xfd:j xdbV x83N xde xa3 xfce x16 xe6 xa8 xc6 xbdQ6 xb4 x03uj x19vw x95 xbb x80 xeaL xf2+ xabB xcf xe0 x13 xef xb3 x1e[ xf1 xf1.s xf7@xM xd7 xa9 xf2w2 xef$ xd7K x15 xba x8eG x06lef9 x06 xf7 xa1}1 xc3O xd0Rm x83 xa92 xe4 xbe x98 x16 x90 xf4 xab n x9d xf4 x0f xc14 xf2 xef x19 x04 xff xcf xf3 xddh xf8- xbd xee0 x15~ x08S x93]^ xa8 x0e= x83= xaay x95 x0f x18 x08 xd7 xdb x04hr x0b xcf xb7 xd8 xd2 x15~ xc7 xc3m x14 xca xd0I x07 xf8 x89_9 xe4p xb8 xde x8b xcb xa2 x89. x1a xffu xc6-j7 xd2 x93])s x84 x84Qo xa2 &#39; t x96 x84 xb4 xeb. xef xf0 xdb xa7 x88{ xfc xbf xfd xba xdb xe1 x96 x1b xf1 xdb x05 xacYQh x9e2{q x0e xc9l xdc xca xd1-Wpt xdb xbd x93 x7f? r x06 x9f x8f xf7 x96Dev x04 xe6 xd2 x05 sR x86F xdb xf6V x04 x95a xd6 xd5&gt; x96 x05 xedF xebx xdc xa1 x0e x8d xea x0fE# xa8 x8f xba xcc x8f x05 xf2CX &#39;B x03uh xd6Y xc4 x16&gt; xd2c xfe x19 x1a xfcv x91 xect[ x0f xdaBb x9b-, xacE xfd x10D:` x8d xb4 xabh@# xbdq5 x10 x16&gt; xd2c x16 xb4{ x83XLO x07 xda xb9 x8eBuq xe1# x8d xbeael x95s9 x08 xd3 x80 xc6 x12f x0f x02q xe1 x97j xcc xf7S x16N xb8 xe6JY-S xa1 xd1 xad xe8G) x85o xa90o xa6- x9c xd0 xa2 x064: xd0 xd8 xad xf8c . xcc xc6 xc9 xc2# x8e xbb%4 xc4, xcfs x86 x17; x89 x9a xbc( xa5p4Y1C xe2 xb8 x97. x9a xb5 xc8 xdbP x13 x1a xbd x15 xcf{ xb5 xa8 xb0 r[ x12 x17 xdb{ x9a xae xf4!C xc2( x174 n@ &#39; x0f x10aa x07 x82 xc3, xe6 xfd,y x129 x16 xc3| xd0HG^MOg xd9PK xed#w xfbY x9a xea r xccp x94 x01 x9d1 x1aEO xbd xb1 xac x92^8 xc6 xee xf0 x89 xfd xfd&gt; x84 x19 xc3^$ x01U% xc5* xf1w- xe0+ xbef xfd x87 x10 x9c xb1 xd1 xb3 xdf~/!0`b xdbN^h xdc xfa2 x94 xd817 x0e xd4 xde x1c xef xae VYi xff xf1AJ x7f xc2dM xe9 xdd xb7 xc5 x1fc6 xd3 x8a xd4w5 xcfcL xcb x1a x0c xac x08 x1b xc2dt xaduB) xcb t x8d_ xea x9d@ xc5; x13 x0fr x9b xd2n xda x052 x91 x93 x17 x1a xbb xd4 x9em xc8{ xcc x9e xb6HI2/ xb4 x85 r xbb x1f x87 x05A xbf xa22f xb9 xa1 xb1K}1 xf02 x0e xcd8 xd1rC xe3 xbd xfa xdcQc x1cz x9bNM xe6 x87 xc6 xcds xaba x01 xd0s x8c xb2 x90 x1f x1aw xcf xe9 xe5 xe0 xa43tJ x8e xbf x0c x9f&#34; x96 xc9 xaeF r xd3 xd0 xdbTN xd1 x0c xb4 x15 x1d xe0 x92 x85a xe8 x8f xaeh xf6E&gt;h{ x11 x17 xb4B xa3 xd0x x06x x14 x99 x84 xc6 xef x15 x7fd xd2 x8a xbc xd8 xc9 xcaf xa8 xa8 xa6 xe4) xeeu xa8B xc3 xd8 xdc xadp x9bpb xc8 xd5 x95m t x7f xec xc5] xcf x18 xf4 x01) xa4 x9a x85&amp; xf3 xf8 xcb` x08z x96 xca xa1 x1a x86v xf0 xce xe7 xbe r x8d@ xe3? xdfdV xbaah* xb9 xfc$4 x00]g x12 xce xa6 xa1 xc9 x0e xe2 x0f xc3 xdc xd0 xc4oW x81B xa0 xc9 x0e xe2 x8d xf2: x17[t xe7( x00 xda x8afI x85+ xcc x05M xfaknCA xd0 x94 xc9 xcb x1b xe51 x13 x12 xd79y x7f x17 x00M xda xe9 x92W xa3 x06tDj x96^ xbf8h x8bJ x89 xfbC]_ xdeMR x1dQ xf4 xda xaa xde=T x16 xee7 x1dh x87 xf6#,+ xde xd3 xcaO x80 x03Z xd7W x86 x8e xe0 x90 xb6 x13Y x05C xd3N x8fj_ x11 x1ah{M xd5n x14 x0eMy xc5 x7f xedR[ x94 xfa* xd8 xa2 xeb x8f x94 &#39;r xc8 xc6 xd3 xe84 xba xce xa8 xb8 xb6l] x87 xa3 x07 x0f xb5cq x95 xd2l&#34; xdf xdf x94 xaa xeb x00 x9c1 x9a xea x13 x98 n xb4 xc5 x9a x91 xdc xea_ xd9 xba( xc0 xfc6 xeb xae x81)A[ xbc xd4 xe1 xa3 x7f xdd xc3 x04 xf3 xbf x8b xcd x08S x80 xb6 xb9 t xcfGcWMSTwk x89 x9b x08 xb5 xa7 x08 xcdO xd3 xfaw xdfG x94 xedL xe4 xeao xf8y x8d xfb xd0 x98* xb4( xb9 xec xb7 x9f x7f x00 xc2 x0e48 xdb xed x88 x13 xce xd3 x85 x86 xaf xc5 x99 xacn{ xaf xf7 xfc xa4 xd7{ xb6wgE xea x1d4 xaciC xc3M7 xd7 xb1 x96[ x80 xd5 xaa xef xe8#{C xb0 xae x04 x9a x89&#34; xe4 x8fj? xb4 xae x08: n x0f xf5 x98 xef x19 x91 xd44+;L xf8#s xf8O xe1* xa1 xc7 x11 xd0 x86 xb2 x85 xc9 x86 xab x85 x1e{I xd5. xb6 xb7f@q5 &#34; x06 xf2= xdb xdf x07 xa5}TL r x028q} x86k x82 xf0O x04 x06 xda5 xb3&gt;X$vM xe0 x91I?wC&amp; xa1 xc7]; xf8{) r xb9 xfb&#34;2 xd2 x90I xe8 x89 xbb xbb&amp; xe2 xee&amp; x06 x8a/ x0c xfab xcb xa2 xcf xcf x96 x88 x8e xe2w xf7N x7f x89 x83 xbd xc6 x17 x0c= x89F xbfzsr xdc x8b x8f x93 xd3O x93&gt; x116 xcc6T xc4 xf2 xbbM xdc x9bb xf4 x9b x0b x84. xfc xb4 x84. xa1K xe8 x12Z x13 xda xa0Mm xda xa7%t t]B x97 xd0%t t]B x97 xd0% xf4 xff n xfa?6 xf5 xcc xbfo xe1 x7f xcc x00 x00 x00 x00IEND xaeB` x82&#39;) .",
            "url": "https://jyustin.github.io/test-fastpages/2023/06/04/sqlitenewtable.html",
            "relUrl": "/2023/06/04/sqlitenewtable.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "quizz project",
            "content": "week 2 this is my online quiz coded in python. Although it does not work on a jupyter notebook blog page, I can explain how it works. You simply just type in an input and the code will compare it to the preset correct value. If they match, the answer is considered correct. . UPDATE 9/1/2022: Used lists to tell user which problems they got wrong at the end of the quiz, as well as problems right. problems are also stored in a dictionary. . correct = 0 #this part used to keep track of correct answers and show how many correct and percentage at end of quiz int(correct) dict = { &quot;1&quot;: &quot;question 1: Name the Python output command mentioned in this lesson&quot;, &quot;2&quot;: &quot;question 2: If you see many lines of code in order, what would College Board call it?&quot;, &quot;3&quot;: &quot;question 3: Describe a keyword used in Python to define a function?&quot;, &quot;4&quot;: &quot;question 4: What command is used to include other functions that were previously developed?&quot;, } list = [] crlist = [] print(dict.get(&quot;1&quot;)) ans = input() if ans == &quot;print&quot;: #used to determine if answer was right or not print(ans, &quot;is correct!&quot;) correct = correct + 1 #keep track of correct answers crlist.append(&quot;1&quot;) else: print(ans, &quot;is wrong!&quot;) list.append(&quot;1&quot;) print(dict.get(&quot;2&quot;)) #basically code from top part, I don&#39;t rly know how to make it so I dont have to ans = input() if ans == &quot;sequence&quot;: print(ans,&quot;is correct!&quot;) correct = correct + 1 crlist.append(&quot;2&quot;) else: print(ans, &quot;is wrong!&quot;) list.append(&quot;2&quot;) print(dict.get(&quot;3&quot;)) ans = input() if ans == &quot;def&quot;: print(ans, &quot;is correct!&quot;) correct = correct + 1 crlist.append(&quot;3&quot;) else: print(ans, &quot;is wrong!&quot;) list.append(&quot;3&quot;) print(dict.get(&quot;4&quot;)) ans = input() if ans == &quot;import&quot;: print(ans, &quot;is correct!&quot;) correct = correct + 1 crlist.append(&quot;4&quot;) else: print(ans, &quot;is wrong!&quot;) list.append(&quot;4&quot;) (percentage) = (correct/4)*100 #use to calculate percentage of correct int(percentage) print(&quot;you got&quot;, correct, &quot;correct!&quot;) print(percentage, &quot;%&quot;) wrongs = &quot;, &quot;.join(list) rights = &quot;, &quot;.join(crlist) print(&quot;these questions are wrong:&quot;, wrongs) print(&quot;these questions are right:&quot;, rights) . question 1: Name the Python output command mentioned in this lesson print is correct! question 2: If you see many lines of code in order, what would College Board call it? def is wrong! question 3: Describe a keyword used in Python to define a function? def is correct! question 4: What command is used to include other functions that were previously developed? d is wrong! you got 2 correct! 50.0 % these questions are wrong: 2, 4 these questions are right: 1, 3 .",
            "url": "https://jyustin.github.io/test-fastpages/python%20codes/week%202/2023/06/04/quizz.html",
            "relUrl": "/python%20codes/week%202/2023/06/04/quizz.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Poem(post In Docx)",
            "content": "Either you will . go through this door . or you will not go through. . If you go through . there is always the risk . of remembering your name. . Things look at you doubly . and you must look back . and let them happen. . If you do not go through . it is possible . to live worthily . to maintain your attitudes . to hold your position . to die bravely . but much will blind you, . much will evade you, . at what cost who knows? . The door itself makes no promises. . It is only a door. .",
            "url": "https://jyustin.github.io/test-fastpages/2023/06/04/poem(post-in-docx).html",
            "relUrl": "/2023/06/04/poem(post-in-docx).html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "performance task example scoring",
            "content": "program 1 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 0 | the video does demonstrate program input and program output. the purpose of the program does align with what is demonstrated in the video. I can tell what the purpose of this program is from the response and the video. | . data abstraction | 1 | 1 | 2 program code segments exist. these code segments do help show how lists and data is being stored and used for this program. lastly, the list is more than 1 element and the list is needed for this program. | . Managing complexity | 0 | 0 | although code segments are available, there is no explanation for why a list is needed for this program to exist and therefore no point shall be awarded. | . procedural abstraction | 1 | 1 | the procedure is student developed and the parameters are explicitly listed, and there is an explanation for how this procedure relates to the program, all requirements are met. | . algorithm implementation | 0 | 1 | the algorithm is thoroughly explained and I could recreate it from the description, but I don&#39;t feel like how the algorithm is implemented in the whole program as a whole is not thoroughly described. | . testing | 1 | 1 | the program is testred with different parameters and the outputs are different and look correct. | . program 2 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | the program purpose is described and the video does align with the program. | . data abstraction | 1 | 1 | a list is used in the program and an explanation for said list is given. | . Managing complexity | 1 | 1 | the named list not only manages complexity but how its managment of complexity is required for the program to run is provided. | . procedural abstraction | 1 | 1 | the procedure is explained thoroughly and is student developed. additionally, the parameters for the procedure are designated and named. | . algorithm implementation | 1 | 1 | iteration, sequencing, and selection are all explained and used in this algorithm described. the description of the algorithm is thorough and I could easily recreate what has been described in my own code. | . testing | 1 | 1 | testing is done with different parameters and how the procedures from earlier relate to the testing is explained in this part. | .",
            "url": "https://jyustin.github.io/test-fastpages/performance_task/2023/06/04/performance_scoring.html",
            "relUrl": "/performance_task/2023/06/04/performance_scoring.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "notes for ap csp",
            "content": "week 1 note in a jupyter notebook .",
            "url": "https://jyustin.github.io/test-fastpages/jupyter/2023/06/04/notes.html",
            "relUrl": "/jupyter/2023/06/04/notes.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Data Structures thing hacks",
            "content": "Why do you think a programmer should care about space and time complexity? . ANS . time and space complexity are important when developing programs, as you don&#39;t want your programs to consume too much memory, or take too long to complete. Basically, managing complexity and time of programs is essential when developing programs for user usage. You don&#39;t want your programs to consume too much of a users memory or take too long basically. . Do you think this is a time complexity or space complexity or both problem? . ANS . when comparing time of the algorithm when basewidth is 5000, the algorithm takes 1.4 seconds to complete. . With a basewidth of 40000, the Kernel crashes after 30 seconds or so of the algorithm running. . With a basewidth of 10000, the algorithm takes 5.6 seconds to complete. . basewidth of 625, time is only 0.3 seconds to complete. . This is time problem, as we can see the time of the algorithm becomes longer as the basewidth increases, so reducing steps in the problem to reduce time of the algorithm is something that could potentially be a problem to fix. . This could also be a space complexity, as we can see that the algorithm cannot finish when the basewidth is too large. Reducing complexity or reducing steps in the algorithm would need to be done to solve the problem, as it seems like the program does not have the capabilty to process higher base widths. . Linear time because the program must perform another step when the base width increases, thus linearily increasing timeoftfhefucntion. . Written Hacks . research on types of sorting algorithms and complexity . Constant:O(1). this is very good, as our time is guarunteed to stay low. Linear time: O(n). not as good as Constant, but better than other methods, as we are only increasing in steps by a set amount. . Logarithmic time: O( log n) not very good as O(1) and O(n), but can be useful. time grows logaritmicly. . Quadratic time: O(n^2). time is now increasing exponentially, which isn&#39;t good at all, but its not as bad as O(2^n) . Exponential time: O(2^n). very bad, steps become out of control at some values . Q: Why is time and space complexity important when choosing an algorithm? . Time and space complexity are important because programs should almost always be optimized to reduce time/space complexity. We don&#39;t want programs to be unusable because they take up too much time or use up too much of a user&#39;s cpu/memory. . Q: Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? . Constant time algorithms shouldn&#39;t always be used, as sometimes we need to use an exponential time algorithm for our programs. However, you should strive to have constant time algorithms or the shortest possible time algorithm, so that a user&#39;s experience isn&#39;t bogged down by long downtime as the program runs. The biggest problem with exponential is that the programs quickly fall apart when the inputs become too big. Otherwise, if the inputs are not that large or we have limits on our inputs, an exponential time algorithm would be fine. Sometimes, it might be too hard to optimize our programs, in which case springing for an exponential time algorithm would be neccessary, but reducing time should be something to keep in mind when developing programs. . Q: What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? . NOTICE:When your calculation is not dependent on the input size, it is a constant time complexity . NOTICE:When you have a single loop within your algorithm, it is linear time complexity . NOTICE: When the input size is reduced by half, maybe when iterating, handling recursion, or whatsoever, it is a logarithmic time complexity . NOTICE: When you have nested loops within your algorithm, meaning a loop in a loop, it is quadratic time complexity . NOTICE: When the growth rate doubles with each addition to the input, it is exponential time complexity .",
            "url": "https://jyustin.github.io/test-fastpages/2023/06/04/newnotebook4hacks.html",
            "relUrl": "/2023/06/04/newnotebook4hacks.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unitdatabaseimplement",
            "content": "&quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///database.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) # this code is supposed to grab your database and open it. # the flask object creates all of the classes and stores them # the SQLAlchemy db object essentially serves as a point of interaction for our project, storing all of our variables and information. . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL # class User builds the users in the database class User(db.Model): # by inheiriting db.Model, we can inheirit the variables and data associated with it, and thus the program can run __tablename__ = &#39;facts&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _uid = db.Column(db.String(255), unique=True, nullable=False) _score = db.Column(db.String(255), unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, uid, score): # this just runs the getters and setters and initializes the database classes/objects self._score = score # variables with self prefix become part of the object, self._uid = uid # a name getter method, extracts name from object # the getters are the read part of CRUD @property # this is used to give special functions like setters, getters, and CRUD functions when defining class properties def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object SETTERS are the read part of crud @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation # the setters are the create part of CRUD @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # score property is returned as string, a string represents date outside object @property def score(self): return self._score # score setter, verifies date type before it is set or default to today @score.setter def score(self, score): self._score = score # age is calculated field, age is returned according to date of birth # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;uid&quot;: self.uid, &quot;score&quot;: self.score, } # CRUD update: updates user name, password, phone # returns self def update(self, score=&quot;&quot;, uid=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(score) &gt; 0: self.score = score if len(uid) &gt; 0: self.uid = uid db.session.add(self) # performs update when id exists n&quot;, db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def inits(): # this function is where you would add your users/objects in the data table, and is used to fill table with data. with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(score=&#39;test&#39;, uid=&#39;49&#39; ) users = [u1] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: # this creates the user objects try: # try and except used to prevent duplicates/errors from spilling into the database &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) inits() . Records exist uid 49, or error. . def read(): with app.app_context(): table = User.query.all() # User.query.all() is used to query or gather all of the user objects in the database table and query them for interaction/read function json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list # list comprehension creates a list using existing lists return json_ready read() . [{&#39;id&#39;: 1, &#39;uid&#39;: &#39;user1&#39;, &#39;score&#39;: &#39;scores&#39;}, {&#39;id&#39;: 2, &#39;uid&#39;: &#39;user2&#39;, &#39;score&#39;: &#39;It is physically impossible for pigs to look up into the sky.&#39;}, {&#39;id&#39;: 3, &#39;uid&#39;: &#39;user3&#39;, &#39;score&#39;: &#39;Wearing headphones for just an hour could increase the bacteria in your ear by 700 times.&#39;}, {&#39;id&#39;: 4, &#39;uid&#39;: &#39;49&#39;, &#39;score&#39;: &#39;test&#39;}] . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() # User.query.filter_by is used to find and single out a object in our database for interaction or password verification in this instance return user # returns user object # update functionality def update(): uid = input(&quot;Enter your user id for update:&quot;) user = find_by_uid(uid) # if uid exists, it prints out that user&#39;s id exists. shows you which user is deleted print(&quot;Found n&quot;, user.read()) name = input(&quot;Enter your name:&quot;) with app.app_context(): user._score = name db.session.add(user) db.session.commit() print(&quot;success!&quot;) # delete functionality def userDelete(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id for deletion:&quot;) user = find_by_uid(uid) # if uid exists, it prints out that user&#39;s id exists. shows you which user is deleted print(&quot;Found n&quot;, user.read()) with app.app_context(): (&quot;deletion successful&quot;) db.session.delete(user) db.session.commit() #userDelete() update() . Found {&#39;id&#39;: 3, &#39;uid&#39;: &#39;user3&#39;, &#39;score&#39;: &#39;Wearing headphones for just an hour could increase the bacteria in your ear by 700 times.&#39;} success! .",
            "url": "https://jyustin.github.io/test-fastpages/2023/06/04/nddb.html",
            "relUrl": "/2023/06/04/nddb.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "lists and dictionaries",
            "content": "InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Justin&quot;, &quot;LastName&quot;: &quot;Nguyen&quot;, &quot;DOB&quot;: &quot;July 28 2006&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;supercatsd@gmail.com&quot;, &quot;favorite_fruit&quot;: &quot;apple&quot;, &quot;Owns_Cars&quot;: [&quot;none&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;bob&quot;, &quot;LastName&quot;: &quot;the&quot;, &quot;DOB&quot;: &quot;none&quot;, &quot;Residence&quot;: &quot;homeless&quot;, &quot;Email&quot;: &quot;no computer&quot;, &quot;favorite_fruit&quot;: &quot;banana&quot;, &quot;Owns_Cars&quot;: [&quot;expensive car&quot;] }) # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Email: &quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;favorite fruit: &quot;, d_rec[&quot;favorite_fruit&quot;]) # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Justin Nguyen Residence: San Diego Birth Day: July 28 2006 Cars: none Email: supercatsd@gmail.com favorite fruit: apple bob the Residence: homeless Birth Day: none Cars: expensive car Email: no computer favorite fruit: banana . fruits = {} for i in range(5): fruit = input(&quot;Enter fruit: &quot;) color = input(&quot;Enter color: &quot;) fruits[fruit] = color print(&quot;the fruits you typed were: &quot;) for key in fruits: print(key) print(&quot;and the colors of those fruits were: &quot;) for key in fruits: print(key,&quot;:&quot;, fruits[key]) . the fruits you typed were: apple banana and the colors of those fruits were: apple : red banana : yello .",
            "url": "https://jyustin.github.io/test-fastpages/python%20codes/2023/06/04/lists-and-dictionaries.html",
            "relUrl": "/python%20codes/2023/06/04/lists-and-dictionaries.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "lab quiz blog post",
            "content": "Outline . This is our blog for code.org 3 question quiz. fruit quiz 4 different choices, 1 correct answer, for each question. getting a correct answer will play a nice sound if a question is wrong you will be brought to a screen that tells you that your wrong, and can move on to the next question. At the end of the quiz will be 2 buttons. one writes the player&#39;s score, and the other allows the player to retake the quiz. fruit image at the start image corresponding with each choice display score at the end question 1: what color is an apple? answer: red wrong: orange wrong: blue wrong: purple question 2: when were bananas discovered? answer: 327 BC wrong: 1999 wrong: 1782 wrong: 2020 BC question 3: which one is not a fruit? answer: mushroom wrong: tomato wrong: melon wrong: strawberry struggles: adding the ability to see score at the end of the quiz was challenging, as we hadn&#39;t worked with javascript before and were confused by what to do, but eventually got it with a variable that adds onto itself each time the correct answer is selected. Working with code.org sometimes felt frustrating, as it was sometimes slower to use blocks than to type out code, but it is useful for learning javascript, as it gives us everything we need to start with. no need to look up things. . what . onEvent(&quot;button1&quot;, &quot;click&quot;, function() { setScreen(&quot;screen2&quot;); }); var x = 0; onEvent(&quot;button3&quot;, &quot;click&quot;, function( ) { x = x+1; setScreen(&quot;screen4&quot;); playSound(&quot;sound://category_achievements/lighthearted_bonus_objective_1.mp3&quot;); }); onEvent(&quot;button4&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); }); onEvent(&quot;button2&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); }); onEvent(&quot;button5&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen3&quot;); }); onEvent(&quot;button13&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen6&quot;); playSound(&quot;sound://category_achievements/peaceful_win_8.mp3&quot;); x = x+1; }); onEvent(&quot;button7&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen5&quot;); playSound(&quot;sound://category_achievements/lighthearted_bonus_objective_1.mp3&quot;); x = x+1; }); onEvent(&quot;button6&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen4&quot;); }); onEvent(&quot;button15&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen5&quot;); }); onEvent(&quot;button10&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen7&quot;); }); onEvent(&quot;button16&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen5&quot;); }); onEvent(&quot;button12&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen8&quot;); }); onEvent(&quot;button14&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen8&quot;); }); onEvent(&quot;button11&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen8&quot;); }); onEvent(&quot;button16&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen6&quot;); playSound(&quot;sound://category_achievements/peaceful_win_2.mp3&quot;); }); onEvent(&quot;button17&quot;, &quot;click&quot;, function( ) { write(&quot;you got &quot; + (x + &quot; right&quot;)); }); onEvent(&quot;button9&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen7&quot;); }); onEvent(&quot;button8&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen7&quot;); }); onEvent(&quot;retake&quot;, &quot;click&quot;, function( ) { setScreen(&quot;screen1&quot;); }); .",
            "url": "https://jyustin.github.io/test-fastpages/python%20codes/2023/06/04/labquizz.html",
            "relUrl": "/python%20codes/2023/06/04/labquizz.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "js week 5",
            "content": "console.log(&quot;welcome to the apple counter&quot;); var apples = (20) if (apples &gt; 50) { console.log(&quot;we have too many apples&quot;); } else if (apples &lt; 10) { console.log(&quot;not enough apples&quot;); } else if (15 &lt; apples &lt; 25) { console.log(&quot;we have a good amount of apples&quot;); } else { console.log(&quot;we have a weird amount of apples&quot;); } . welcome to the apple counter we have a good amount of apples .",
            "url": "https://jyustin.github.io/test-fastpages/js%20codes/2023/06/04/jsweek5.html",
            "relUrl": "/js%20codes/2023/06/04/jsweek5.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "js/html table",
            "content": "var msg = &quot;Hello, Worldo!&quot;; function logIt(output) { console.log(output); } function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role var students = [ new Person(&quot;Justin&quot;, &quot;Jyustin&quot;, 2024), new Person(&quot;111&quot;, &quot;101&quot;, 1111), new Person(&quot;2222&quot;, &quot;220&quot;, 2222), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid red;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em blue;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;u&gt;&quot; + &quot;Name&quot; + &quot;&lt;/u&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;u&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/u&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;u&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/u&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;u&gt;&quot; + &quot;Role&quot; + &quot;&lt;/u&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Justin | Jyustin | 2024 | Student | 111 | 101 | 1111 | Student | 2222 | 220 | 2222 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://jyustin.github.io/test-fastpages/js%20codes/2023/06/04/js.html",
            "relUrl": "/js%20codes/2023/06/04/js.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "frontend coding hacks 1/15",
            "content": "hacks below . letter 1: . store . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; .",
            "url": "https://jyustin.github.io/test-fastpages/performancetask/2023/06/04/fronty.html",
            "relUrl": "/performancetask/2023/06/04/fronty.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "data hacks",
            "content": "data analysis hacks . How can Numpy and Pandas be used to preprocess data for predictive analysis? . ANS: By using pandas, we can organize our data in neat data structures for sorting and processing, then we can use numpy for its specific math functions to be used for the actual predictive data analysis. . What machine learning algorithms can be used for predictive analysis, and how do they differ? . ANS: I looked up some and found 2 examples: linear regression and k-means clustering. linear regression differs in that it simply just finds the line of best fit, so it would be good for information like age or simple numbers. k-means clustering finds this average by using clusters of data, not by determining a line of best fit. . Can you discuss some real-world applications of predictive analysis in different industries? . ANS: An example of this would be using predictive analysis to predict how many covid cases a certain country will gain per day, to determine the best course of action to take. Another example would be predicting weather patterns or climate change patterns to make well informed decisions in the matter. . Can you explain the role of feature engineering in predictive analysis, and how it can improve model accuracy? . ANS: Feature enginnering is used in predictive analysis to improve upon it&#39;s design and help it make better decisions. with Feature engineering, we can design specific features or tools like APIS or deployments to run these in real time to improve upon their designs. . How can machine learning models be deployed in real-time applications for predictive analysis? . ANS: We can use AWS or other methods of deployment to set up our models, or we can set it up in a shell and run it with a standard language like python and such. . Can you discuss some limitations of Numpy and Pandas, and when it might be necessary to use other data analysis tools? . ANS: Pandas and Numpy are both limited by their language, meaning we couldn&#39;t benefit from other languages and their potential gains in data analysis. Still, these tools are pretty simple to use and are good for basic machine learning algorithms. . How can predictive analysis be used to improve decision-making and optimize business processes? . ANS: with predictive analysis, we can predict things like what items to stock in a store, what are the trending items, or what items were least purchased. We basically use this to make decisions based on previous data, that would be hard to deduce without algorithms. . pandas hacks . Questions . What are the two primary data structures in pandas and how do they differ? | ANS: the 2 primary data structures in pandas are CSV files and databases. For example, you can use pandas to sort through a csv file with a bunch of data, or you can even sort through an Sqlite database and sort out the data there. . How do you read a CSV file into a pandas DataFrame? | ANS: you will first need to use pd.read_csv() which will allow you to read a csv file and do things like print it out or organize it in a graph. . How do you select a single column from a pandas DataFrame? | ANS: just print the csv file, but make sure to use a bracket after it with the specific column you wanted to print out. . How do you filter rows in a pandas DataFrame based on a condition? | ANS: just take the csv and print it out, however make sure that you specify after the csv what condition you are using. for example, using groupby after your csv would allow you to group by a certain value or something, just make sure to specify what. . How do you group rows in a pandas DataFrame by a particular column? | ANS: you can use groupby() to group rows by a particular column, like grouping the users in a csv file by their age. . How do you aggregate data in a pandas DataFrame using functions like sum and mean? | ANS: after using groupby() to get a specific set of data, you can then use functions like sum to find the sum of your group. for example, you can use df.agg[&#39;sum&#39;] to find the sum of rows in our dataset. . How do you handle missing values in a pandas DataFrame? | ANS: there are a couple of things you could do. You could try using .isnull() to tell you which values dont exist, then you can go in and deal with them with a number of ways. You can then go to that specific index of the CSV and set it to NaN, which will render it as a value that is no longer taken into account. (basically null) . How do you merge two pandas DataFrames together? | we can use .concat() to merge 2 panda dataframes or csvs together. If the columns are not matching, the new columns will be added in the new database. if we are combining a column a and a column b, the 2 will be next 2 each other in the final dataframe. . How do you export a pandas DataFrame to a CSV file? | ANS: the easiest way is by using .to_csv(), which will easily convert it to a csv file. . What is the difference between a Series and a DataFrame in Pandas? | ANS: a series is a 1 dimensional data structure, capable of storing any data. However, it will be unorganized since it is just 1 dimensional. A dataframe would be basically a framework for the series, putting them into neat columns for easier viewing and overall a better way to store data. It is also 2 dimensional compared to the 1 dimensional series. . PANDAS CODE HACKS . import pandas as pd import matplotlib.pyplot as plt import numpy as np # read the CSV file df = pd.read_csv(&#39;files/games.csv&#39;).sort_values(by=[&#39;user_reviews&#39;], ascending=False) da = pd.read_csv(&#39;files/dataforapcsp.csv&#39;) y = df.head(75) price = y price.plot(kind=&#39;scatter&#39;, x = &#39;positive_ratio&#39;, y = &#39;price_final&#39;) # set the title and axis labels plt.title(&quot;positive ratio of steam game reviews and prices&quot;) # show the chart plt.show() print(y[&#39;title&#39;]) print(da) # tried making my own dataset, wasn&#39;t that successful . 19041 Counter-Strike: Global Offensive 19489 PUBG: BATTLEGROUNDS 8746 Dota 2 5347 Grand Theft Auto V 19473 Tom Clancy&#39;s Rainbow Six® Siege ... 28943 SCP: Secret Laboratory 2505 Risk of Rain 2 17538 Deep Rock Galactic 3003 BeamNG.drive 3596 DOOM Eternal Name: title, Length: 75, dtype: object number1 number2 Unnamed: 2 0 1 2 NaN .",
            "url": "https://jyustin.github.io/test-fastpages/student/2023/06/04/datahacs.html",
            "relUrl": "/student/2023/06/04/datahacs.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "final for APCSP",
            "content": "hack 1: basic table . %%html &lt;head&gt; &lt;!-- load jQuery and DataTables syle and scripts --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;table id=&quot;flaskTable&quot; class=&quot;table&quot; style=&quot;width:100%&quot;&gt; &lt;thead id=&quot;flaskHead&quot;&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;DOB&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;flaskBody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;script&gt; $(document).ready(function() { fetch(&#39;https://flask.nighthawkcodingsociety.com/api/users/&#39;, { mode: &#39;cors&#39; }) .then(response =&gt; { if (!response.ok) { throw new Error(&#39;API response failed&#39;); } return response.json(); }) .then(data =&gt; { for (const row of data) { // BUG warning/resolution - DataTable requires row to be single append $(&#39;#flaskBody&#39;).append(&#39;&lt;tr&gt;&lt;td&gt;&#39; + row.id + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.dob + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.age + &#39;&lt;/td&gt;&lt;/tr&gt;&#39;); } // BUG warning - Jupyter does not show Datatable controls, works on deployed GitHub pages $(&quot;#flaskTable&quot;).DataTable(); }) .catch(error =&gt; { console.error(&#39;Error:&#39;, error); }); }); &lt;/script&gt; . . ID Name DOB Age . bonus hack: utilizing sqlite databases to store images (cool) . this hack is stored in a different file (open vscode) .",
            "url": "https://jyustin.github.io/test-fastpages/based/2023/06/04/checkoff.html",
            "relUrl": "/based/2023/06/04/checkoff.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "hacks for big idea 1",
            "content": "ok wtf .",
            "url": "https://jyustin.github.io/test-fastpages/student/2023/06/04/bigideahacksreal.html",
            "relUrl": "/student/2023/06/04/bigideahacksreal.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "bash hacks",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/thisisabashtest # change vscode to different name to test git clone export project=$project_dir/sympy # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/sympy/sympy.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/id/thisisabashtest exists. Directory /home/id/thisisabashtest/sympy does not exists... cloning https://github.com/sympy/sympy.git Cloning into &#39;sympy&#39;... remote: Enumerating objects: 363105, done. remote: Counting objects: 100% (39/39), done. remote: Compressing objects: 100% (33/33), done. remote: Total 363105 (delta 17), reused 12 (delta 6), pack-reused 363066 Receiving objects: 100% (363105/363105), 161.52 MiB | 8.65 MiB/s, done. Resolving deltas: 100% (291308/291308), done. Directory /home/id/thisisabashtest/sympy exists. . Output exceeds the size limit. Open the full output data in a text editor Navigate to project, then navigate to area wwhere files were cloned /home/id/thisisabashtest/sympy . list top level or root of files with project pulled from github AUTHORS asv.conf.travis.json github_deploy_key.enc CODEOWNERS banner.svg isympy.py CODE_OF_CONDUCT.md bin pytest.ini CONTRIBUTING.md codecov.yml release LICENSE conftest.py setup.cfg MANIFEST.in coveragerc_travis setup.py PULL_REQUEST_TEMPLATE.md data setupegg.py README.md doc sympy asv.conf.actions.json examples . list again with hidden files pulled from github . .travis.yml asv.conf.travis.json isympy.py .. AUTHORS banner.svg pytest.ini .ci CODEOWNERS bin release .circleci CODE_OF_CONDUCT.md codecov.yml setup.cfg .editorconfig CONTRIBUTING.md conftest.py setup.py .git LICENSE coveragerc_travis setupegg.py .gitattributes MANIFEST.in data sympy .github PULL_REQUEST_TEMPLATE.md doc .gitignore README.md examples .mailmap asv.conf.actions.json github_deploy_key.enc ... -rw-r--r-- 1 id id 2088 Aug 25 16:50 setup.cfg -rwxr-xr-x 1 id id 15142 Aug 25 16:50 setup.py -rw-r--r-- 1 id id 49 Aug 25 16:50 setupegg.py drwxr-xr-x 42 id id 4096 Aug 25 16:50 sympy . Output exceeds the size limit. Open the full output data in a text editor Look for posts bash: cd: /home/id/thisisabashtest/sympy/_posts: No such file or directory /home/id/thisisabashtest/sympy total 268 -rw-r--r-- 1 id id 46763 Aug 25 16:50 AUTHORS -rw-r--r-- 1 id id 590 Aug 25 16:50 CODEOWNERS -rw-r--r-- 1 id id 3267 Aug 25 16:50 CODE_OF_CONDUCT.md -rw-r--r-- 1 id id 625 Aug 25 16:50 CONTRIBUTING.md -rw-r--r-- 1 id id 7885 Aug 25 16:50 LICENSE -rw-r--r-- 1 id id 496 Aug 25 16:50 MANIFEST.in -rw-r--r-- 1 id id 1168 Aug 25 16:50 PULL_REQUEST_TEMPLATE.md -rw-r--r-- 1 id id 11587 Aug 25 16:50 README.md -rw-r--r-- 1 id id 3141 Aug 25 16:50 asv.conf.actions.json -rw-r--r-- 1 id id 2774 Aug 25 16:50 asv.conf.travis.json -rw-r--r-- 1 id id 87868 Aug 25 16:50 banner.svg drwxr-xr-x 2 id id 4096 Aug 25 16:50 bin -rw-r--r-- 1 id id 196 Aug 25 16:50 codecov.yml -rw-r--r-- 1 id id 2944 Aug 25 16:50 conftest.py -rw-r--r-- 1 id id 316 Aug 25 16:50 coveragerc_travis drwxr-xr-x 3 id id 4096 Aug 25 16:50 data drwxr-xr-x 7 id id 4096 Aug 25 16:50 doc drwxr-xr-x 6 id id 4096 Aug 25 16:50 examples -rw-r--r-- 1 id id 4408 Aug 25 16:50 github_deploy_key.enc -rw-r--r-- 1 id id 11199 Aug 25 16:50 isympy.py -rw-r--r-- 1 id id 424 Aug 25 16:50 pytest.ini ... -rw-r--r-- 1 id id 2088 Aug 25 16:50 setup.cfg -rwxr-xr-x 1 id id 15142 Aug 25 16:50 setup.py -rw-r--r-- 1 id id 49 Aug 25 16:50 setupegg.py drwxr-xr-x 42 id id 4096 Aug 25 16:50 sympy . Output exceeds the size limit. Open the full output data in a text editor Look for notebooks bash: cd: /home/id/thisisabashtest/sympy/_notebooks: No such file or directory /home/id/thisisabashtest/sympy total 268 -rw-r--r-- 1 id id 46763 Aug 25 16:50 AUTHORS -rw-r--r-- 1 id id 590 Aug 25 16:50 CODEOWNERS -rw-r--r-- 1 id id 3267 Aug 25 16:50 CODE_OF_CONDUCT.md -rw-r--r-- 1 id id 625 Aug 25 16:50 CONTRIBUTING.md -rw-r--r-- 1 id id 7885 Aug 25 16:50 LICENSE -rw-r--r-- 1 id id 496 Aug 25 16:50 MANIFEST.in -rw-r--r-- 1 id id 1168 Aug 25 16:50 PULL_REQUEST_TEMPLATE.md -rw-r--r-- 1 id id 11587 Aug 25 16:50 README.md -rw-r--r-- 1 id id 3141 Aug 25 16:50 asv.conf.actions.json -rw-r--r-- 1 id id 2774 Aug 25 16:50 asv.conf.travis.json -rw-r--r-- 1 id id 87868 Aug 25 16:50 banner.svg drwxr-xr-x 2 id id 4096 Aug 25 16:50 bin -rw-r--r-- 1 id id 196 Aug 25 16:50 codecov.yml -rw-r--r-- 1 id id 2944 Aug 25 16:50 conftest.py -rw-r--r-- 1 id id 316 Aug 25 16:50 coveragerc_travis drwxr-xr-x 3 id id 4096 Aug 25 16:50 data drwxr-xr-x 7 id id 4096 Aug 25 16:50 doc drwxr-xr-x 6 id id 4096 Aug 25 16:50 examples -rw-r--r-- 1 id id 4408 Aug 25 16:50 github_deploy_key.enc -rw-r--r-- 1 id id 11199 Aug 25 16:50 isympy.py -rw-r--r-- 1 id id 424 Aug 25 16:50 pytest.ini ... -rw-r--r-- 1 id id 2088 Aug 25 16:50 setup.cfg -rwxr-xr-x 1 id id 15142 Aug 25 16:50 setup.py -rw-r--r-- 1 id id 49 Aug 25 16:50 setupegg.py drwxr-xr-x 42 id id 4096 Aug 25 16:50 sympy . Output exceeds the size limit. Open the full output data in a text editor Look for images in notebooks, print working directory, list files bash: cd: /home/id/thisisabashtest/sympy/_notebooks/images: No such file or directory /home/id/thisisabashtest/sympy total 268 -rw-r--r-- 1 id id 46763 Aug 25 16:50 AUTHORS -rw-r--r-- 1 id id 590 Aug 25 16:50 CODEOWNERS -rw-r--r-- 1 id id 3267 Aug 25 16:50 CODE_OF_CONDUCT.md -rw-r--r-- 1 id id 625 Aug 25 16:50 CONTRIBUTING.md -rw-r--r-- 1 id id 7885 Aug 25 16:50 LICENSE -rw-r--r-- 1 id id 496 Aug 25 16:50 MANIFEST.in -rw-r--r-- 1 id id 1168 Aug 25 16:50 PULL_REQUEST_TEMPLATE.md -rw-r--r-- 1 id id 11587 Aug 25 16:50 README.md -rw-r--r-- 1 id id 3141 Aug 25 16:50 asv.conf.actions.json -rw-r--r-- 1 id id 2774 Aug 25 16:50 asv.conf.travis.json -rw-r--r-- 1 id id 87868 Aug 25 16:50 banner.svg drwxr-xr-x 2 id id 4096 Aug 25 16:50 bin -rw-r--r-- 1 id id 196 Aug 25 16:50 codecov.yml -rw-r--r-- 1 id id 2944 Aug 25 16:50 conftest.py -rw-r--r-- 1 id id 316 Aug 25 16:50 coveragerc_travis drwxr-xr-x 3 id id 4096 Aug 25 16:50 data drwxr-xr-x 7 id id 4096 Aug 25 16:50 doc drwxr-xr-x 6 id id 4096 Aug 25 16:50 examples -rw-r--r-- 1 id id 4408 Aug 25 16:50 github_deploy_key.enc -rw-r--r-- 1 id id 11199 Aug 25 16:50 isympy.py -rw-r--r-- 1 id id 424 Aug 25 16:50 pytest.ini ... -rw-r--r-- 1 id id 2088 Aug 25 16:50 setup.cfg -rwxr-xr-x 1 id id 15142 Aug 25 16:50 setup.py -rw-r--r-- 1 id id 49 Aug 25 16:50 setupegg.py drwxr-xr-x 42 id id 4096 Aug 25 16:50 sympy . Output exceeds the size limit. Open the full output data in a text editor Navigate to project, then navigate to area wwhere files were cloned show the contents of README.md . SymPy . . . See the AUTHORS file for the list of authors. . And many more people helped on the SymPy mailing list, reported bugs, helped organize SymPy&#39;s participation in the Google Summer of Code, the Google Highly Open Participation Contest, Google Code-In, wrote and blogged about SymPy... ... also consider contributing all your changes back, so that we can incorporate it and all of us will benefit in the end. . end of README.md . Output exceeds the size limit. Open the full output data in a text editor Show the shell environment variables, key on left of equal value on right . SHELL=/bin/bash PYTHONUNBUFFERED=1 project=/home/id/thisisabashtest/sympy CONDA_EXE=/home/id/anaconda3/bin/conda _CE_M= APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL=1 WSL_DISTRO_NAME=Ubuntu ELECTRON_RUN_AS_NODE=1 VSCODE_AMD_ENTRYPOINT=vs/workbench/api/node/extensionHostProcess NAME=Code PWD=/home/id/thisisabashtest/sympy LOGNAME=id CONDA_PREFIX=/home/id/anaconda3 MOTD_SHOWN=update-motd project_dir=/home/id/thisisabashtest HOME=/home/id LANG=C.UTF-8 WSL_INTEROP=/run/WSL/8_interop LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:.tar=01;31:.tgz=01;31:.arc=01;31:.arj=01;31:.taz=01;31:.lha=01;31:.lz4=01;31:.lzh=01;31:.lzma=01;31:.tlz=01;31:.txz=01;31:.tzo=01;31:.t7z=01;31:.zip=01;31:.z=01;31:.dz=01;31:.gz=01;31:.lrz=01;31:.lz=01;31:.lzo=01;31:.xz=01;31:.zst=01;31:.tzst=01;31:.bz2=01;31:.bz=01;31:.tbz=01;31:.tbz2=01;31:.tz=01;31:.deb=01;31:.rpm=01;31:.jar=01;31:.war=01;31:.ear=01;31:.sar=01;31:.rar=01;31:.alz=01;31:.ace=01;31:.zoo=01;31:.cpio=01;31:.7z=01;31:.rz=01;31:.cab=01;31:.wim=01;31:.swm=01;31:.dwm=01;31:.esd=01;31:.jpg=01;35:.jpeg=01;35:.mjpg=01;35:.mjpeg=01;35:.gif=01;35:.bmp=01;35:.pbm=01;35:.pgm=01;35:.ppm=01;35:.tga=01;35:.xbm=01;35:.xpm=01;35:.tif=01;35:.tiff=01;35:.png=01;35:.svg=01;35:.svgz=01;35:.mng=01;35:.pcx=01;35:.mov=01;35:.mpg=01;35:.mpeg=01;35:.m2v=01;35:.mkv=01;35:.webm=01;35:.ogm=01;35:.mp4=01;35:.m4v=01;35:.mp4v=01;35:.vob=01;35:.qt=01;35:.nuv=01;35:.wmv=01;35:.asf=01;35:.rm=01;35:.rmvb=01;35:.flc=01;35:.avi=01;35:.fli=01;35:.flv=01;35:.gl=01;35:.dl=01;35:.xcf=01;35:.xwd=01;35:.yuv=01;35:.cgm=01;35:.emf=01;35:.ogv=01;35:.ogx=01;35:.aac=00;36:.au=00;36:.flac=00;36:.m4a=00;36:.mid=00;36:.midi=00;36:.mka=00;36:.mp3=00;36:.mpc=00;36:.ogg=00;36:.ra=00;36:.wav=00;36:.oga=00;36:.opus=00;36:.spx=00;36:*.xspf=00;36: WAYLAND_DISPLAY=wayland-0 CONDA_PROMPT_MODIFIER=(base) PYDEVD_USE_FRAME_EVAL=NO posts=/home/id/thisisabashtest/sympy/_posts ... VSCODE_HANDLES_UNCAUGHT_ERRORS=true OLDPWD=/home/id/thisisabashtest/sympy VSCODE_IPC_HOOKCLI=/mnt/wslg/runtime-dir/vscode-ipc-0e02c704-d0af-493b-8de2-004642c092f5.sock=/usr/bin/env . show the secrets of .git total 256 -rw-r--r-- 1 id id 23 Aug 25 16:50 HEAD drwxr-xr-x 2 id id 4096 Aug 25 16:50 branches -rw-r--r-- 1 id id 259 Aug 25 16:50 config -rw-r--r-- 1 id id 73 Aug 25 16:50 description drwxr-xr-x 2 id id 4096 Aug 25 16:50 hooks -rw-r--r-- 1 id id 209328 Aug 25 16:50 index drwxr-xr-x 2 id id 4096 Aug 25 16:50 info drwxr-xr-x 3 id id 4096 Aug 25 16:50 logs drwxr-xr-x 4 id id 4096 Aug 25 16:50 objects -rw-r--r-- 1 id id 8197 Aug 25 16:50 packed-refs drwxr-xr-x 5 id id 4096 Aug 25 16:50 refs . look at config file [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true [remote &quot;origin&quot;] url = https://github.com/sympy/sympy.git fetch = +refs/heads/:refs/remotes/origin/ [branch &quot;master&quot;] remote = origin merge = refs/heads/master . BASH HACKS . we can use list function to list a certain set of files, then we can compare the version of those files to the latest release . | you can use conda list to list all of your packages, then use conda update PACKAGENAME to update any old packages . | in order to update a repository you could use some git commands like git add to add files, or git push to push any changes we make. . | there are lots of different commands that could be run from installation if we install everything in a bash script. for example, you could use ./file.sh to automatically execute the script if it is executable, so if we install something with a bash script, that same script could use this to automatically execute the script we got. . |",
            "url": "https://jyustin.github.io/test-fastpages/bash/week%201/2023/06/04/bashhacks.html",
            "relUrl": "/bash/week%201/2023/06/04/bashhacks.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "apis",
            "content": "import requests url = &quot;https://google-translate1.p.rapidapi.com/language/translate/v2&quot; payload = &quot;q=Hello%2C%20world!&amp;target=es&amp;source=en&quot; headers = { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;Accept-Encoding&quot;: &quot;application/gzip&quot;, &quot;X-RapidAPI-Key&quot;: &quot;6a13c0a609mshb8a55b62f42e6d0p15ec9ejsnaf557400ec31&quot;, &quot;X-RapidAPI-Host&quot;: &quot;google-translate1.p.rapidapi.com&quot; } response = requests.request(&quot;POST&quot;, url, data=payload, headers=headers) print(response.text) . {&#34;data&#34;:{&#34;translations&#34;:[{&#34;translatedText&#34;:&#34;¡Hola Mundo!&#34;}]}} . import requests URL = &quot;https://rapidapi.p.rapidapi.com/api/Search/WebSearchAPI&quot; HEADERS = { &#39;x-rapidapi-host&#39;: &quot;contextualwebsearch-websearch-v1.p.rapidapi.com&quot;, &#39;x-rapidapi-key&#39;: &quot;6a13c0a609mshb8a55b62f42e6d0p15ec9ejsnaf557400ec31&quot; } query = &quot;computer science&quot; page_number = 1 page_size = 10 auto_correct = True safe_search = False querystring = {&quot;q&quot;: query, &quot;pageNumber&quot;: page_number, &quot;pageSize&quot;: page_size, &quot;autoCorrect&quot;: auto_correct, &quot;safeSearch&quot;: safe_search} response = requests.get(URL, headers=HEADERS, params=querystring).json() total_count = response[&quot;totalCount&quot;] for web_page in response[&quot;value&quot;]: url = web_page[&quot;url&quot;] title = web_page[&quot;title&quot;] description = web_page[&quot;description&quot;] body = web_page[&quot;body&quot;] date_published = web_page[&quot;datePublished&quot;] language = web_page[&quot;language&quot;] is_safe = web_page[&quot;isSafe&quot;] provider = web_page[&quot;provider&quot;][&quot;name&quot;] print(&quot;Url: {}. Title: {}.&quot;.format(url, title)) . Url: https://en.wikipedia.org/wiki/Computer_science. Title: Computer science - Wikipedia. Url: https://elemental.medium.com/tagged/computers. Title: Computers Elemental. Url: https://stackoverflow.com/tags/computer-science/info. Title: &#39;computer-science&#39; tag wiki - Stack Overflow. Url: https://lbre.stanford.edu/event-services/equipment-services/computers. Title: Computers | Land, Buildings &amp; Real Estate. Url: http://explore.appinventor.mit.edu/news/computer-science. Title: Computer Science Education Week: Going Beyond Code | Explore MIT App Inventor. Url: https://www.birds.cornell.edu/home/information-science/. Title: Information Science | Birds, Cornell Lab of Ornithology : Birds, Cornell Lab of Ornithology. Url: https://www.cmu.edu/admission/majors-programs/school-of-computer-science/computer-science. Title: Computer Science - Undergraduate Admission - Carnegie Mellon University. Url: http://guide.berkeley.edu/undergraduate/degree-programs/computer-science/. Title: Computer Science &lt; University of California, Berkeley. Url: http://www.uniq.ox.ac.uk/computer-science. Title: Computer Science - UNIQ. Url: https://beaver.psu.edu/directory/computer-science. Title: Computer Science Directory | Penn State Beaver. . &lt;py-script&gt; import requests URL = &quot;https://rapidapi.p.rapidapi.com/api/Search/WebSearchAPI&quot; HEADERS = { &#39;x-rapidapi-host&#39;: &quot;contextualwebsearch-websearch-v1.p.rapidapi.com&quot;, &#39;x-rapidapi-key&#39;: &quot;6a13c0a609mshb8a55b62f42e6d0p15ec9ejsnaf557400ec31&quot; } query = &quot;computer science&quot; page_number = 1 page_size = 10 auto_correct = True safe_search = False querystring = {&quot;q&quot;: query, &quot;pageNumber&quot;: page_number, &quot;pageSize&quot;: page_size, &quot;autoCorrect&quot;: auto_correct, &quot;safeSearch&quot;: safe_search} response = requests.get(URL, headers=HEADERS, params=querystring).json() total_count = response[&quot;totalCount&quot;] for web_page in response[&quot;value&quot;]: url = web_page[&quot;url&quot;] title = web_page[&quot;title&quot;] description = web_page[&quot;description&quot;] body = web_page[&quot;body&quot;] date_published = web_page[&quot;datePublished&quot;] language = web_page[&quot;language&quot;] is_safe = web_page[&quot;isSafe&quot;] provider = web_page[&quot;provider&quot;][&quot;name&quot;] print(&quot;Url: {}. Title: {}.&quot;.format(url, title)) &lt;/py-script&gt; &lt;div id=&quot;request_output&quot;&gt;&lt;/div&gt; &lt;py-script&gt; from pyodide.http import pyfetch import asyncio URL = &quot;https://rapidapi.p.rapidapi.com/api/Search/WebSearchAPI&quot; HEADERS = { &#39;x-rapidapi-host&#39;: &quot;contextualwebsearch-websearch-v1.p.rapidapi.com&quot;, &#39;x-rapidapi-key&#39;: &quot;6a13c0a609mshb8a55b62f42e6d0p15ec9ejsnaf557400ec31&quot; } query = &quot;computer science&quot; page_number = 1 page_size = 10 auto_correct = True safe_search = False querystring = {&quot;q&quot;: query, &quot;pageNumber&quot;: page_number, &quot;pageSize&quot;: page_size, &quot;autoCorrect&quot;: auto_correct, &quot;safeSearch&quot;: safe_search} response = await pyfetch(url=URL, headers=HEADERS, params=querystring, method=&quot;GET&quot;) output = f&quot;GET request=&gt; status:{response.status}, json:{await response.json()}&quot; pyscript.write(&#39;request_output&#39;, output) &lt;/py-script&gt; &lt;py-script&gt; from pyodide.http import pyfetch import asyncio url = &quot;https://real-time-web-search.p.rapidapi.com/search&quot; beanbag = {&quot;q&quot;:&quot;create an online store&quot;,&quot;limit&quot;:&quot;10&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;6a13c0a609mshb8a55b62f42e6d0p15ec9ejsnaf557400ec31&quot;, &quot;X-RapidAPI-Host&quot;: &quot;real-time-web-search.p.rapidapi.com&quot; } response = await pyfetch(url=&quot;https://real-time-web-search.p.rapidapi.com/search&quot;, headers=HEADERS, params=beanbag, method=&quot;GET&quot;) output = f&quot;GET request=&gt; status:{response.status}, json:{await response.json()}&quot; pyscript.write(&#39;request_output&#39;, output) &lt;/py-script&gt; . &lt;py-script&gt; from pyodide.http import pyfetch import asyncio response = await pyfetch(url=&quot;https://www.boredapi.com/api/activity/&quot;, method=&quot;GET&quot;) output = f&quot;GET request=&gt; status:{response.status}, json:{await response.json()}&quot; pyscript.write(&#39;request_output&#39;, output) &lt;/py-script&gt; .",
            "url": "https://jyustin.github.io/test-fastpages/js%20codes/2023/06/04/api.html",
            "relUrl": "/js%20codes/2023/06/04/api.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "3.12 3.13 hacks and notes",
            "content": "notes . procedure: a named group of programming instructions that may have parameters and return values. . Parameters: input values of a procedure. . Modularity: the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program . HINT: procedures should be descriptive. also consider what parameters to set and what data is needed for the procedure . Note: There are two types of procedures, one that returns a value or some type of data and on that just executes a block of statements. also remember to keep procedures simple. . make sure to have multiple different functions in a procedure . Think of procedures like functions I guess? . hacks for 3.12 . Q 1: . a -- ? b -- ? c -- 9 PROCEDURE find a () { b &lt;-- 9 9 . a &lt;-- b c . Print (a) } What is a? . ANS: a would become 891 since the procedure puts b as 99 then sets a to be b*c which is 891 (i may be wrong) . Q 2: . cost ⟵ 173 tax - 10% PROCEDURE applytax (cost, cpercentDiscounted){ temp &lt;-- 100 + percentTaxed temp &lt;-- temp / 100 cost &lt;-- cost x temp Print(cost)} . What is the cost? . ANS: temp = 110/100 so cost = 173 * 1.1 = 190.3 so cost = 190.3 . 3.13 Homework/Hacks . Q 1: Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game . Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) . ANS below . toprbyardspg = 100 currentrbyards = 1260 totalGames = 12 procedure topyards(toprbyardspg, currentrbyards, totalGames) { currentrbyards = 1260 / totalGames if toprbyardspg &lt; currentrbyards: currentrbyards = toprbyardspg } . 2. Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. . Use what you learned about moving robots . PROCEDURE toEnd() { move_forward() rotate_left() move_forward() move_forward() rotate_right() move_forward() move_forward() move_forward() rotate_left() move_forward() move_forward() rotate_left() move_forward() move_forward() rotate_right() move_forward() rotate_left() move_forward() move_forward() # using loops and if statements may work but for me it would be harder and # take more time } . Q 3: . Which Is the Correct Way to define the Name of a Procedure? . A. PROCEDURE MYLIST . B. PROCEDURE MyList . C. procedure mylist . ANS: B because procedure is in caps and it&#39;s camel cased. . Q 4: . Write A Procedure That gets the BeachBall To the Green Square . PROCEDURE toEnd() { move_forward() rotate_left() move_forward() rotate_right() move_forward() move_forward() move_forward() move_forward() move_forward() rotate_left() move_forward() move_forward() } . missing hacks (oops) . Problem 1: This problem involves parameters Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } This is the correct equation, the others have the wrong equation or don&#39;t add the extra variables needed. . Problem 2: Procedures with return values . James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . True because there is nothing displaying the text . False . Problem 3: Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) this is adding the 2 flights co2 production seperately . totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) this is summing up the passengers and miles and then calculating the total flight footprint . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon .",
            "url": "https://jyustin.github.io/test-fastpages/3.12/2023/06/04/.html",
            "relUrl": "/3.12/2023/06/04/.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "3.8 - 3.10 hacks and notes",
            "content": "notes . iteration is when something is repeated. usually done using loops. REPEAT N TIMES is pseudocode for this. . LISTS: collection of data in a sequence that can be iterated through. . EX: fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;, &quot;pomegranate&quot;] . LISTS ARE MUTABLE. you can add and remove items from a list. . Nested Lists: you can store lists inside lists for more complex data. can create sublists with this. . can iterate through sublists in list and then iterate through values in those sublists. . Exercise 1 . list = [1, 2, 3, 4, 5] # Print this list in reverse order #list.reverse() also works for i in range(len(list)): print(i + 1) a = list.pop() # pop element at the end of list list.insert(i, a) # add new element with index val of last popped element print(list) . 1 2 3 4 5 [5, 4, 3, 2, 1] . Exercise 2 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] # Sort this array using bubble sort for i in list: for a in range(len(list) - 1): # for loops look at the first element and the element next to it if list[a] &gt; list[a + 1]: # if the 1st element is larger than the 2nd one + 1 list[a], list[a + 1] = list[a + 1], list[a] # position of 2 elements are swapped so larger element is in front # lesser element is in back # list.sort() also works :/ print(list) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Quiz reflection . 4) How can we add something to the end of a list? . (a) Use + sign . (b) The word Add . (c) Append . (d) Extend . ANS: Append . I picked extend and got the problem wrong because I mixed up the definition of extend with append. extend is for lists and append is for individual elements. . 8) What does a WHILE loop do? . (a) Iterates over an iterable and for a set amount of time . (b) Intuitively takes an iterable and manipulates it over a set period using pointers . (c) Loop over a bound interval by comparing to a conditional . (d) Crash bitcoin . ANS: (C) I got this one wrong because I picked A initially. I forgot that the set amount of time part must be added in. C is the technical definition. A is how WHile loops work. . 9) I want to iterate over a list until the user inputs &#39;quit&#39;. What loop would I use? . (a) WHILE loops . (b) FOR loops . (c) Recursive Loops . (d) Paradoxical Loops . ANS: B, but I picked A because I was thinking of a while loop and a for loop. I understand why a for loop would be used. .",
            "url": "https://jyustin.github.io/test-fastpages/3.8/2023/06/04/.810.html",
            "relUrl": "/3.8/2023/06/04/.810.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "3.5 - 3.7 hacks and notes",
            "content": "3.5 notes . Logical operators evaluate boolean values. Pseudocode will use Not , AND, and OR to demonstrate this. . practice questions 3.5 . q 1. What boolean value would result be? . a &lt;-- 19 b &lt;-- 28 result &lt;-- a = b . True . False . ANS: False b/c a /= b . q 2. What boolean value would result be? . score &lt;-- 99 average &lt;-- 99 result &lt;-- score ≤ average . True . False . ANS: True b/c score = average . q 3. What boolean value would be displayed? . type &lt;-- &quot;dog&quot; training &lt;-- &quot;yes&quot; DISPLAY((NOT (type = &quot;dog&quot;)) AND (training = &quot;no&quot;)) . True . False . ANS: FALSE AND FALSE b/c both statements are false . 3.6 notes . conditional statements are when the code acts based on different conditions based on user input or stored data. . ex: if statements and if else statements are conditional statements . HINT: flowcharts can help visualize conditional statements . practice questions 3.5 . q 1. What value will be displayed . rank &lt;-- &quot;titan&quot; hall &lt;-- 14 IF (rank = &quot;titan&quot;) { DISPLAY(&quot;You like Clash of Clans a lot.&quot;) } . You like Clash of Clans a lot. . 14 . titan . rank . ANS: Since rank = &quot;titan&quot;, the if statement is executed, displaying the code in it. () . q 2. What portion of the code will run? . class &lt;-- 33 cookies &lt;-- 25 IF (class &lt; cookies) { DISPLAY(&quot;Give out cookies today.&quot;) } ELSE { DISPLAY(&quot;Do not give out cookies today.&quot;) } . The if portion . The else portion . ANS: else portion b/c class &lt; cookies . 3.7 notes . NESTED CONDITIONAL: conditional statement in a conditional statement . HINT: flowcharts will be helpful to visualize these . 3.7 practice questions . q 1. Is this an example of a nested conditional? . space &lt;-- 90 download &lt;-- 20 IF (space &gt; download) { DISPLAY(&quot;File can be downloaded.&quot;) } . Yes . No . ANS: no b/c theres only one conditional statement . q 2. What does this code display? . price &lt;-- 200 discount &lt;-- 65 IF (price &gt; 100) { IF (discount &gt; 50) { DISPLAY(&quot;You can buy this item.&quot;) } ELSE { DISPLAY(&quot;You cannot purchase this item.&quot;) } } . You cannot purchase this item. . 50 . You can buy this item. . 65 . ANS: You cannot purchase this item b/c discount &lt; 50 . 3.5 HACKSSSS . Binary Practice Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1 90(D) = 1000(B) . A. True . B. False . ANS: B . 2 10(D) ≠ 0110(B) . A. True . B. False . ANS: B . 3 56(D) ≥ 111000(B) . A. True . B. False . ANS: A . 4 99(D) &lt; 1110011(B) . A. True . B. False . ANS: B . binary truth tables . AND OPERATOR . Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 | 0 | 0 | . OR Operator . Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not operator . Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . Python Practice . print(20 &lt; 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x == y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true x = 20 z = 20 print(x == z) . False True True . 3.6 hacks . AP PREP . q 1. What is displayed by this code? . result &lt;-- 75 IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } ELSE { DISPLAY(&quot;Nice job!&quot;) } . Nice job! . Display . Please schedule a retake. . 75 . ANS: Please schedule a retake. . q 2. How is an if statement different from an if-else statement. . Extra words. . An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. . They are the exact same. . An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. . ANS: An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. (2) b/c if - else has to go through code because it will do something even if the condition is not what the if statement wants . q 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If statement . If-else statement . ANS: IF-else statement . q 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement . If-else statement . ANS: If statement cause we don&#39;t know what he&#39;ll do if it isn&#39;t sunny . Using Python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;shark&quot;: # What boolean value does this statement cause? # it should be true when the for loop gets to shark print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) if i == &quot;wildebeest&quot; or i == &quot;lion&quot;: print(i,&quot;,this animal lives in the desert&quot;) else: print(i) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . lion ,this animal lives in the desert tiger wildebeest ,this animal lives in the desert Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! shark jellyfish blobfish raven . 3.7 HACKS . Exercise 1 Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal . BefWil = { &quot;foody&quot;:&quot;Beef wellington&quot;, &quot;meat&quot;: &quot;beef&quot;, &quot;preptime&quot;: &quot;150 minutes&quot; } ChickenAlfredo = { &quot;foody&quot;:&quot;ChickenAlfredo&quot;, &quot;meat&quot;: &quot;Chicken&quot;, &quot;preptime&quot;: &quot;60 minutes&quot; } Ques = { &quot;foody&quot;:&quot;cheese quesadilla&quot;, &quot;meat&quot;: &quot;None&quot;, &quot;preptime&quot;: &quot;10 minutes&quot; } #function to see if meal meets requirements def dinner(food): if food[&quot;meat&quot;] == &quot;None&quot;: if food[&quot;preptime&quot;] &lt;= &quot;30&quot;: print(food[&quot;foody&quot;]) dinner(ChickenAlfredo) dinner(Ques) dinner(BefWil) . cheese quesadilla . FlowCHART .",
            "url": "https://jyustin.github.io/test-fastpages/3.5-3.7/2023/06/04/.5-3.7.html",
            "relUrl": "/3.5-3.7/2023/06/04/.5-3.7.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "3.3 - 3.4 hacks and notes",
            "content": "notes . An algorithm is a finite set of instructions that accomplish a specific task, us as humans, do algorithms on a daily basis. . Sequencing is doing steps in order, for example, doing the first step then the second then the third, etc. . Selection is when the programmer decides between two different outcomes. . Iteration is when you have to repeat a step until that condition is fulfilled. . hacks . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) #comments for top code # the code itself is sequencing (doing all orders in a specific order) # the if statement is selection as it only runs if the if statement is met and sorts through numbers # the for statement is iteration because it repeats the steps in it for i in numbers i = 1 starString = &quot;*&quot; while i &lt;= 5: j = 1 while j &lt;= i: print (&quot;*&quot;, end= &quot;&quot;) j += 1 print () i += 1 #comments for bottom code #the code itself is sequencing (doing all orders in a specific order) #while j = 1 is selection because it is changing j # while i loop is iteration because it repeats for if i is less than 5 # QUESTION 5 # code segment 1 numdog = 1 numcat = 0 numfish = 2 numparrot = 1 numbird = 1 numdog = numcat numcat = numfish numfish = numdog print(numfish) #this would print 0 #code segment 2 nummap = 1 numbooks = 2 numdrinks = 1 money = 770 numpens = 4 numpens = numbooks money = money - numpens print(money) #assuming all are integers, money is 768 . questions . Practice Problems given the following code segment below: a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . find the value for a, b, c, d ANS: a = 1, b = 7, c = 3, d = 7 . consider the following code segment: hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . the value of hot is true, the value of cold is true the value of hot is false, the value of cold is true the value of hot is true, the value of cold is false the value of hot is false, the value of cold is false ANS: the value of hot is true, the value of cold is true . Sequencing (code below) num1 = 3 num2 = 1 num3 = 5 num1 = num2 + num3 num2 = num1 + num3 . What is the value of num1 and num2? ANS: num1 = 6, num2 = 11 . String Homework What does the code print? . Test 1 CODE BELOW firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) name &lt;- concat(lastName, var) email &lt;- concat(name, &quot;@gmail.com&quot;) DISPLAY(email) . What would the result be? ANS: &quot;SmithB@gmail.com&quot; . TEST 2 CODE BELOW word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, len1) second &lt;- substring(word2, len2+3, len2) newWord &lt;- concat(first, second) DISPLAY(newWord) . ANS: ompuook . after doing all of the questions, I found that the biggest area of weakness for me was vocabulary and making sure I understand exactly what each vocab term means. I just need to be more familiar with these kinds of terms. .",
            "url": "https://jyustin.github.io/test-fastpages/3.3/2023/06/04/.1.html",
            "relUrl": "/3.3/2023/06/04/.1.html",
            "date": " • Jun 4, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "animation test",
            "content": ". .",
            "url": "https://jyustin.github.io/test-fastpages/2023/05/24/animationtest.html",
            "relUrl": "/2023/05/24/animationtest.html",
            "date": " • May 24, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Python 2D Iteration and Animation",
            "content": "2D Programming and Resources . There are lots of applications for 2D data. Common terms in 2D are tabular data, row/columns, matrix, etc. Nested iterative loops are often used to find or discover each cell in a 2D array. . 2D samples and challenges in Jupyter. wget link:https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-05-16-DS-arrays_lab.ipynb- Mario animations in JS, these are markdown code examples. Assets metadata yml, wget and place in _data directory; sprite, download and place in images directory | Code to interact with Sprite Animations runtime, wget code | Game starters runtime, wget imperative code, wget oop code | . | . Python 2D array . Example of pre-populating 2D array and printing using 3 different styles . Candy Challenge:print a christmas tree and trunk | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society 2D arrays &quot;&quot;&quot; # Classic nested loops using ij indexes, this shows 2 dimensions def print_matrix1(matrix): print(&quot;Classic nested loops using ij indexes&quot;) for i in range(len(matrix)): # outer loop (i), built on length of matrix (rows) for j in range(len(matrix[i])): # inner loop (j), built on length of items (columns) print(matrix[i][j], end=&quot; &quot;) # [i][j] is 2D representation, end changes newline to space print() # Enhanced nested for loops, row and col variables def print_matrix2(matrix): print(&quot;Enhanced nested for loops&quot;) for row in matrix: # short hand row iterator, index is not required for col in row: # short hand column iterator print(col, end=&quot; &quot;) print() # For loop with shortcut (*) row expansion def print_matrix3(matrix): print(&quot;For loop with shortcut (*) row expansion&quot;) for row in matrix: print(*row) # pythons has (*) that is one line expansion of row into columns def test_matrices(): # setup some text matrices keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] keyboard = [[&quot;`&quot;, 1, &quot; &quot;, 2, &quot; &quot;,3, &quot; &quot;, 4, &quot; &quot;, 5, &quot; &quot;, 6, &quot; &quot;, 7, &quot; &quot;, 8, &quot; &quot;, 9, &quot; &quot;, 0, &quot; &quot;, &quot;-&quot;,&quot; &quot;, &quot;=&quot;], [&quot; &quot;, &quot; &quot;, &quot;Q&quot;, &quot; &quot;, &quot;W&quot;, &quot; &quot;, &quot;E&quot;, &quot; &quot;, &quot;R&quot;, &quot; &quot;, &quot;T&quot;, &quot; &quot;, &quot;Y&quot;, &quot; &quot;, &quot;U&quot;, &quot; &quot;, &quot;I&quot;, &quot; &quot;, &quot; &quot;, &quot;O&quot;, &quot; &quot;, &quot;P&quot;, &quot; &quot;, &quot;[&quot;, &quot; &quot;, &quot;]&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;A&quot;, &quot; &quot;, &quot;S&quot;, &quot; &quot;, &quot;D&quot;, &quot; &quot;, &quot;F&quot;, &quot; &quot;, &quot;G&quot;, &quot; &quot;, &quot;H&quot;, &quot; &quot;, &quot;J&quot;, &quot; &quot;, &quot;K&quot;, &quot; &quot;, &quot;L&quot;, &quot; &quot;, &quot;;&quot;, &quot; &quot;, &quot;&#39;&quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;Z&quot;, &quot; &quot;, &quot;X&quot;, &quot; &quot;, &quot;C&quot;, &quot; &quot;, &quot;V&quot;, &quot; &quot;, &quot;B&quot;, &quot; &quot;, &quot;N&quot;, &quot; &quot;, &quot;M&quot;, &quot; &quot;, &quot;,&quot;, &quot; &quot;, &quot;.&quot;, &quot; &quot;, &quot;/&quot;]] tree = [[&quot; / &quot;], [&quot; / * &quot;], [&quot; / O * &quot;], [&quot; /*/ / / &quot;], [&quot; / O / * / &quot;], [&quot; / * / * / / &quot;], [&quot; || &quot;],] numbers = [ [0, 1], # binary [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;] # hexadecimal ] # pack into a list of matrices with titles matrices = [ [&quot;Keypad&quot;, keypad], [&quot;Keyboard&quot;, keyboard], [&quot;Number Systems&quot;, numbers], [&quot;tree&quot;,tree] ] # loop 2D matrix with returning list in [key, value] arrangement for title, matrix in matrices: # unpack title and matrix as variables # formatted message with concatenation print(title, len(matrix), &quot;x&quot;, &quot;~&quot; + str(len(matrix[0]))) # use three different methods print_matrix1(matrix) print_matrix2(matrix) print_matrix3(matrix) # blank link in between print() # tester section if __name__ == &quot;__main__&quot;: test_matrices() . Keypad 4 x ~3 Classic nested loops using ij indexes 1 2 3 4 5 6 7 8 9 0 Enhanced nested for loops 1 2 3 4 5 6 7 8 9 0 For loop with shortcut (*) row expansion 1 2 3 4 5 6 7 8 9 0 Keyboard 4 x ~24 Classic nested loops using ij indexes ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Enhanced nested for loops ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / For loop with shortcut (*) row expansion ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Number Systems 3 x ~2 Classic nested loops using ij indexes 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Enhanced nested for loops 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F For loop with shortcut (*) row expansion 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F tree 7 x ~1 Classic nested loops using ij indexes / / * / O * /*/ / / / O / * / / * / * / / || Enhanced nested for loops / / * / O * /*/ / / / O / * / / * / * / / || For loop with shortcut (*) row expansion / / * / O * /*/ / / / O / * / / * / * / / || . JavaScript 2D array . Example below populate a 2D array. Key concepts are ij loop and assignments. Observe the object that is created in console. Learn the basics of iteration through 2D array in JavaScript. . Candy challenge:Work of pairs. Create one of the Python examples (christmas tree, keyboard, ...). Use the element.append to output within the notebook. As you work on JavaScript make sure your development enviornment is setup like JavaScript programmer. | . %%js /* * Creator: Nighthawk Coding Society Construct a two-dimensional array in JS */ var arr2D = []; var rows = 3; var cols = 4; // Loop to initialize 2D array elements for (var i = 0; i &lt; rows; i++) { arr2D[i]=[]; for (var j = 0; j &lt; cols; j++) { arr2D[i][j] = &quot;r:&quot; + i + &quot;c:&quot; + j; } } console.log(arr2D); element.append(arr2D); . Monkey Jumpers Poem . Here are some of the key parts of these arrays . Build ASCII monkeys, 5 different monkeys using ASCII Art for the &quot;Monkey Jumpers&quot; countdown poem | ANSII Color codes are added to each Monkey | Candy Challenge:Print monkeys horizontally versus vertically. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear def main(): # ANSI Color Codes Red = &quot; u001b[31m&quot; Green = &quot; u001b[32m&quot; Yellow = &quot; u001b[33m&quot; Blue = &quot; u001b[34m&quot; Magenta = &quot; u001b[35m&quot; &quot;&quot;&quot; 2D array data assignment &quot;&quot;&quot; monkeys = [ [ Red, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, # [0][0] eyes &quot; _⏄_/ &quot;, # [0][1] chin &quot; --0-- &quot;, # [0][2] body &quot; ⎛ ⎞ &quot; # [0][3] legs ], [ Green, &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, # [1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; ], [ Yellow, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, # [2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; ], [ Blue, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, # [3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; ], [ Magenta, &quot; (◕‿◕✿) &quot;, # [4][0] &quot; _⍾_/ &quot;, # [4][1] &quot; ==4== &quot;, # [4][2] &quot; _/ _ &quot; # [4][3] ] ] &quot;&quot;&quot; 2D array program logic &quot;&quot;&quot; # cycles through 2D array backwards for i in range(len(monkeys), -1, -1): clear_output(wait=True) print(&quot;Nursery Rhyme&quot;) # identification message # this print statement shows current count of Monkeys # concatenation (+) of the loop variable and string to form a countdown message print(str(i) + &quot; little monkeys jumping on the bed...&quot;) # cycle through monkeys that are left in poem countdown for row in range(i - 1, -1, -1): # cycles through remaining monkeys in countdown # cycles through monkey part by part for col in range(len(monkeys[row])): # prints specific part of the monkey from the 2D cell print(monkeys[col][row] + &quot; &quot;) # this new line gives separation between stanza of poem print(&quot; u001b[0m&quot;) # reset color time.sleep(1) # out of all the loops, prints finishing messages clear_output(wait=True) print(&quot;No more monkeys jumping on the bed&quot;) print(&quot;0000000000000000000000000000000000&quot;) print(&quot; THE END &quot;) if __name__ == &quot;__main__&quot;: main() . No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Animation, the Energetic versus Lazy Programmer methods . Animation is done like the old Disney films, lots of little images put togehter. In these examples we eliminate using a 2D array, but simulate int with a sequence of print statements. . This 1st sequence is a lot of lines of code. | The 2nd takes the lazy programmer method to do the same. | Candy challenge:Make you own ASCII art animation. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (long method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes Color34 = &quot; u001b[34m&quot; Color37 = &quot; u001b[37m&quot; # As you can see, its not very optimal def ship1(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship2(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship3(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship4(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship5(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship6(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship7(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship8(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship9(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship10(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship11(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship12(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship13(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship14(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship15(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship16(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship17(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship18(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship19(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship20(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) clear_output(wait=True) time.sleep(.1) ship1() time.sleep(.5) clear_output(wait=True) ship2() time.sleep(.5) clear_output(wait=True) ship3() time.sleep(.5) clear_output(wait=True) ship4() time.sleep(.5) clear_output(wait=True) ship5() time.sleep(.5) clear_output(wait=True) ship6() time.sleep(.5) clear_output(wait=True) ship7() time.sleep(.5) clear_output(wait=True) ship8() time.sleep(.5) clear_output(wait=True) ship9() time.sleep(.5) clear_output(wait=True) ship10() time.sleep(.5) clear_output(wait=True) ship11() time.sleep(.5) clear_output(wait=True) ship12() time.sleep(.5) clear_output(wait=True) ship13() time.sleep(.5) clear_output(wait=True) ship14() time.sleep(.5) clear_output(wait=True) ship15() time.sleep(.5) clear_output(wait=True) ship16() time.sleep(.5) clear_output(wait=True) ship17() time.sleep(.5) clear_output(wait=True) ship18() time.sleep(.5) clear_output(wait=True) ship19() time.sleep(.5) clear_output(wait=True) ship20() time.sleep(.5) . | |/ __ |__/ ____/ -- . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[35m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; | &quot;) print(sp + &quot; |/ &quot;) print(SHIP_COLOR, end=&quot;&quot;) print(sp + &quot; __ |__/ &quot;) print(sp + &quot; ____/ &quot;) print(OCEAN_COLOR + &quot;--&quot;*32 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.2) ship() # activate/call ship function . | |/ __ |__/ ____/ - . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[35m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot;&quot; * position sa = &quot; &quot; * position print(sp + &quot;/ / &quot;) print(sa + &quot; &lt;&gt; &lt;&gt; &quot;) print(sp + &quot; ________/&quot;) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 30 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.5) ship() # activate/call ship function . / / &lt;&gt; &lt;&gt; ________/ .",
            "url": "https://jyustin.github.io/test-fastpages/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "relUrl": "/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "date": " • May 16, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "six sided dice simulation",
            "content": ". Roll a 6 sided die! . Die result will show up here! .",
            "url": "https://jyustin.github.io/test-fastpages/2023/04/30/sim.html",
            "relUrl": "/2023/04/30/sim.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "Theme Changer",
            "content": "Theme Changer . You guys can copy this file and change/improve it here is the link . . Toggle Theme &lt;/html&gt; .",
            "url": "https://jyustin.github.io/test-fastpages/2023/04/25/theme-changer.html",
            "relUrl": "/2023/04/25/theme-changer.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "SASS part 2",
            "content": "Guess the Number . Guess the Number . Button to check Roll a 6 sided die! Try to guess the number between 1 and 100. . . Die result will show up here! .",
            "url": "https://jyustin.github.io/test-fastpages/2023/04/25/sass2.html",
            "relUrl": "/2023/04/25/sass2.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "SASS coding part of hacks (Sass playground basically)",
            "content": ". Toggle Theme 1 Toggle Theme 2 Toggle Theme 3 &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://jyustin.github.io/test-fastpages/2023/04/25/SASS.html",
            "relUrl": "/2023/04/25/SASS.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "P4-Y 4/25 Guide to SASS",
            "content": "WGET this file and complete fully and thoroughly in order to be receive credit . Wget Link . Team Lesson Plan: . SASS Part 1- Nathan, Aniket, Kalani . Basic UI Properties and what they mean | Color properties | Themes | SASS Definition/What it is useful for | SASS code segments w/ comparison to css | Demonstration of SASS | . SASS Part 2- Max W, Evan . More UI Properties | UX | Layouts | Animation/animation code for UI | . Building JavaScript Game or Application- Ryan, Jaden . Before vs After Minesweeper Game - how to customize | Building a java script game and what it requires | . Hacks Page - Kalani, Max T . Students must create their own hack (simple app,game, etc using key components from the lesson) | Make sure the students can wget the file so they can work on it for their hacks | . notes . Sass is pretty useful for flashy frontend code. . Animating images, for example looks pretty easy with SASS. . Overall, looks easier to work with than just basic html/js/css . IMPORTANT: you will need to convert the sass files to css for html files. Use the compiler tool. . example: . SASS SYNTAX . $font-stack: Helvetica, sans-serif . $primary-color: #333 . body . font: 100% $font-stack . color: $primary-color . Classwork: . What are 5 Basic UI Elements?: . Colors and background | appealing images and visuals | good user input sections | language and font | overall professional presentation | In your own words, explain what SASS does: . Sass is essentially css but better, allowing us to seamlessly incorporate nice flashy frontend things like themes, different colors, and manipulating images with little fuss. SASS can be easily incorporated with frontend languages like markdown and html. | . What are some benefits to SASS?: . -SASS comes with many easy to implement features that make the frontend look much cooler. Animation for one is easy to produce using SASS. Additionally, SASS works with all of the common forms of frontend like html and Markdown, as SASS has similar functionality to CSS. . Describe/Explain one of the more &quot;advanced&quot; SASS properties below in detail: . AN example of an advanced SASS property would be image manipulation, more specifically animating the images and making them move. | . For example, you can use keyframes in SASS to have an image fade in and out of 2 frames. We could have one image be constantly fading between a different frame we set, or we can use rotation to have an image constantly rotate for something kind of impressive. . Link to Number Guesser Game . How does the number guesser game work? . In terms of coding and functions: | . the game uses a simple function, run by a button to check the user&#39;s input for what they believe is the answer. The function uses if statements to compare the user&#39;s answer the a randomly selected number (the answer). If the variiables are the same and we are right, a element should change to reflect that we are right, otherwise we use else and else if to tell the user whether or not their guess is too high or too low, changing an element to reflect that. . Explain how SASS can be used to make the number guesser game look more visually appealing? . we could first add some more visually appealing colors to start. Next, we could create some elements for the buttons that look better than the standard ones created. We could also try to incorporate some advanced sass like special images or something like that. just do whatever we would normally do with css. | . Hacks - Insert any screenshots, code segments, etc. that you need to in order to demonstrate an understanding of the hacks . Hacks Part 1 . Add your own element to your own repository to make it unique (0.9) | Hacks Part 2 . Add the style change button to your own github page (0.9) Change the button to your own styles | See if you can let make it change to multiple different styles (we understand that it is hard to create multiple distinct styles so you are only required to make it clear you have at least three different styles at can be changed) | . | Extra: Try and incorporate something you learned in the lesson into your CPT Project (0.1) | Hacks Part 3 . Add SASS to Number Guesser Game provided (0.9) or create your own Javascript game/application and add SASS to it (0.9+) | We will collectively decide on the &quot;best&quot; game/app and award potential seed. | Copy and paste the following code segment into a markdown file which will be used for the hacks: . &lt;html&gt; &lt;head&gt; &lt;title&gt;Guess the Number&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Guess the Number&lt;/h1&gt; &lt;p&gt;Try to guess the number between 1 and 100.&lt;/p&gt; &lt;input type=&quot;text&quot; id=&quot;guess&quot; placeholder=&quot;Enter your guess&quot;&gt; &lt;button onclick=&quot;checkGuess()&quot;&gt;Submit&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;script&gt; // Generate a random number between 1 and 100 const randomNumber = Math.floor(Math.random() * 100) + 1; let attempts = 0; function checkGuess() { // Get the user&#39;s guess const guess = parseInt(document.getElementById(&quot;guess&quot;).value); // Increase the number of attempts attempts++; // Check if the guess is correct if (guess === randomNumber) { document.getElementById(&quot;result&quot;).innerHTML = `Congratulations! You guessed the number in ${attempts} attempts.`; } else if (guess &lt; randomNumber) { document.getElementById(&quot;result&quot;).innerHTML = &quot;Too low. Guess again.&quot;; } else { document.getElementById(&quot;result&quot;).innerHTML = &quot;Too high. Guess again.&quot;; } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Input In [1] &lt;html&gt; ^ SyntaxError: invalid syntax .",
            "url": "https://jyustin.github.io/test-fastpages/student/2023/04/25/P4Y-SASSGuide.html",
            "relUrl": "/student/2023/04/25/P4Y-SASSGuide.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "Pandas - Mati & Caleb",
            "content": "before we start this portion of the lesson: . check if you have pip installed since we are going to be installing some libraries today!!!!!! if you arnt sure if you have pip, check it by running this command: . pip . if your terminal says &quot;command not found&quot; or something else on linux, run this: . python3 -m ensurepip --default-pip . Overview: . Pandas is a powerful tool in Python that is used for data analysis and manipulation. In this lesson, we will explore how to use Pandas to work with datasets, analyze them, and visualize the results. . Learning Objectives: . By the end of this lesson, students should be able to: . Understand what Pandas is and why it is useful for data analysis | Load data into Pandas and create tables to store it | Use different functions in Pandas to manipulate data, such as filtering, sorting, and grouping | Visualize data using graphs and charts | . Question . Who here has used numpy???? . (should be all odf you because all of you have used it in this class before. ) . what is pandas? . this: . Pandas is a Python library used for data analysis and manipulation. | it can handle different types of data, including CSV files and databases. | it also allows you to create tables to store and work with your data. | it has functions for filtering, sorting, and grouping data to make it easier to work with. | it also has tools for visualizing data with graphs and charts. | it is widely used in the industry for data analysis and is a valuable skill to learn. | companies that use Pandas include JPMorgan Chase, Google, NASA, the New York Times, and many others. | . Question #2 &amp; 3: . which companies use pandas? | what is pandas? | . but why is pandas useful? . it can provides tools for handling and manipulating tabular data, which is a common format for storing and analyzing data. | it can handle different types of data, including CSV files and databases. | it allows you to perform tasks such as filtering, sorting, and grouping data, making it easier to analyze and work with. | it has functions for handling missing data and can fill in or remove missing values, which is important for accurate data analysis. | it also has tools for creating visualizations such as graphs and charts, making it easier to communicate insights from the data. | it is fast and efficient, even for large datasets, which is important for time-critical data analysis. | it is widely used in the industry and has a large community of users and developers, making it easy to find support and resources. | . Question #4: . why is pandas useful? | . how do i flipping use it? its so hard, my puny brain cant understand it . it is actually really simple . here is numpy doing simple math: . import pandas as pd df = pd.read_csv(&#39;files/example.csv&#39;) print(df.head()) print(&quot;Average age:&quot;, df[&#39;Age&#39;].mean()) females = df[df[&#39;Gender&#39;] == &#39;Female&#39;] print(females) sorted_data = df.sort_values(by=&#39;Salary&#39;, ascending=False) print(sorted_data) . ParserError Traceback (most recent call last) /home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb Cell 10 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # dummy code, just like you. &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; import pandas as pd -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; df = pd.read_csv(&#39;files/example.csv&#39;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print(df.head()) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; print(&#34;Average age:&#34;, df[&#39;Age&#39;].mean()) File ~/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py:311, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs) 305 if len(args) &gt; num_allow_args: 306 warnings.warn( 307 msg.format(arguments=arguments), 308 FutureWarning, 309 stacklevel=stacklevel, 310 ) --&gt; 311 return func(*args, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:680, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options) 665 kwds_defaults = _refine_defaults_read( 666 dialect, 667 delimiter, (...) 676 defaults={&#34;delimiter&#34;: &#34;,&#34;}, 677 ) 678 kwds.update(kwds_defaults) --&gt; 680 return _read(filepath_or_buffer, kwds) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:581, in _read(filepath_or_buffer, kwds) 578 return parser 580 with parser: --&gt; 581 return parser.read(nrows) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:1254, in TextFileReader.read(self, nrows) 1252 nrows = validate_integer(&#34;nrows&#34;, nrows) 1253 try: -&gt; 1254 index, columns, col_dict = self._engine.read(nrows) 1255 except Exception: 1256 self.close() File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/c_parser_wrapper.py:225, in CParserWrapper.read(self, nrows) 223 try: 224 if self.low_memory: --&gt; 225 chunks = self._reader.read_low_memory(nrows) 226 # destructive to chunks 227 data = _concatenate_chunks(chunks) File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:805, in pandas._libs.parsers.TextReader.read_low_memory() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:861, in pandas._libs.parsers.TextReader._read_rows() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:847, in pandas._libs.parsers.TextReader._tokenize_rows() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:1960, in pandas._libs.parsers.raise_parser_error() ParserError: Error tokenizing data. C error: Expected 1 fields in line 28, saw 367 . uh oh!!! no pandas 😢 . if see this error, enter these into your terminal: . pip install wheel pip install pandas . on stack overflow, it said pandas is disturbed through pip as a wheel. so you need that too. . link to full forum if curious: https://stackoverflow.com/questions/33481974/importerror-no-module-named-pandas . ps: do this for this to work on ur laptop: . wget https://raw.githubusercontent.com/KKcbal/amongus/master/_notebooks/files/example.csv . example code on how to load a csv into a chart . import pandas as pd # read the CSV file df = pd.read_csv(&#39;files/example.csv&#39;) # print the first five rows print(df.head()) # define a function to assign each age to an age group def assign_age_group(age): if age &lt; 30: return &#39;&lt;30&#39; elif age &lt; 40: return &#39;30-40&#39; elif age &lt; 50: return &#39;40-50&#39; else: return &#39;&gt;50&#39; # apply the function to the Age column to create a new column with age groups df[&#39;Age Group&#39;] = df[&#39;Age&#39;].apply(assign_age_group) # group by age group and count the number of people in each group age_counts = df.groupby(&#39;Age Group&#39;)[&#39;Name&#39;].count() # print the age group counts print(age_counts) . ParserError Traceback (most recent call last) /home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb Cell 14 in &lt;cell line: 4&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; import pandas as pd &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; # read the CSV file -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; df = pd.read_csv(&#39;files/example.csv&#39;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; # print the first five rows &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print(df.head()) File ~/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py:311, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs) 305 if len(args) &gt; num_allow_args: 306 warnings.warn( 307 msg.format(arguments=arguments), 308 FutureWarning, 309 stacklevel=stacklevel, 310 ) --&gt; 311 return func(*args, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:680, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options) 665 kwds_defaults = _refine_defaults_read( 666 dialect, 667 delimiter, (...) 676 defaults={&#34;delimiter&#34;: &#34;,&#34;}, 677 ) 678 kwds.update(kwds_defaults) --&gt; 680 return _read(filepath_or_buffer, kwds) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:581, in _read(filepath_or_buffer, kwds) 578 return parser 580 with parser: --&gt; 581 return parser.read(nrows) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:1254, in TextFileReader.read(self, nrows) 1252 nrows = validate_integer(&#34;nrows&#34;, nrows) 1253 try: -&gt; 1254 index, columns, col_dict = self._engine.read(nrows) 1255 except Exception: 1256 self.close() File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/c_parser_wrapper.py:225, in CParserWrapper.read(self, nrows) 223 try: 224 if self.low_memory: --&gt; 225 chunks = self._reader.read_low_memory(nrows) 226 # destructive to chunks 227 data = _concatenate_chunks(chunks) File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:805, in pandas._libs.parsers.TextReader.read_low_memory() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:861, in pandas._libs.parsers.TextReader._read_rows() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:847, in pandas._libs.parsers.TextReader._tokenize_rows() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:1960, in pandas._libs.parsers.raise_parser_error() ParserError: Error tokenizing data. C error: Expected 1 fields in line 28, saw 367 . how to manipulate the data in pandas. . import pandas as pd # load the csv file df = pd.read_csv(&#39;example.csv&#39;) # print the first five rows print(df.head()) # filter the data to include only people aged 30 or older df_filtered = df[df[&#39;Age&#39;] &gt;= 30] # sort the data by age in descending order df_sorted = df.sort_values(&#39;Age&#39;, ascending=False) # group the data by gender and calculate the mean age for each group age_by_gender = df.groupby(&#39;Gender&#39;)[&#39;Age&#39;].mean() # print the filtered data print(df_filtered) # print the sorted data print(df_sorted) # print the mean age by gender print(age_by_gender) . FileNotFoundError Traceback (most recent call last) /home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb Cell 16 in &lt;cell line: 4&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; import pandas as pd &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; # load the csv file -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; df = pd.read_csv(&#39;example.csv&#39;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; # print the first five rows &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print(df.head()) File ~/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py:311, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs) 305 if len(args) &gt; num_allow_args: 306 warnings.warn( 307 msg.format(arguments=arguments), 308 FutureWarning, 309 stacklevel=stacklevel, 310 ) --&gt; 311 return func(*args, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:680, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options) 665 kwds_defaults = _refine_defaults_read( 666 dialect, 667 delimiter, (...) 676 defaults={&#34;delimiter&#34;: &#34;,&#34;}, 677 ) 678 kwds.update(kwds_defaults) --&gt; 680 return _read(filepath_or_buffer, kwds) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:575, in _read(filepath_or_buffer, kwds) 572 _validate_names(kwds.get(&#34;names&#34;, None)) 574 # Create the parser. --&gt; 575 parser = TextFileReader(filepath_or_buffer, **kwds) 577 if chunksize or iterator: 578 return parser File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:933, in TextFileReader.__init__(self, f, engine, **kwds) 930 self.options[&#34;has_index_names&#34;] = kwds[&#34;has_index_names&#34;] 932 self.handles: IOHandles | None = None --&gt; 933 self._engine = self._make_engine(f, self.engine) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:1217, in TextFileReader._make_engine(self, f, engine) 1213 mode = &#34;rb&#34; 1214 # error: No overload variant of &#34;get_handle&#34; matches argument types 1215 # &#34;Union[str, PathLike[str], ReadCsvBuffer[bytes], ReadCsvBuffer[str]]&#34; 1216 # , &#34;str&#34;, &#34;bool&#34;, &#34;Any&#34;, &#34;Any&#34;, &#34;Any&#34;, &#34;Any&#34;, &#34;Any&#34; -&gt; 1217 self.handles = get_handle( # type: ignore[call-overload] 1218 f, 1219 mode, 1220 encoding=self.options.get(&#34;encoding&#34;, None), 1221 compression=self.options.get(&#34;compression&#34;, None), 1222 memory_map=self.options.get(&#34;memory_map&#34;, False), 1223 is_text=is_text, 1224 errors=self.options.get(&#34;encoding_errors&#34;, &#34;strict&#34;), 1225 storage_options=self.options.get(&#34;storage_options&#34;, None), 1226 ) 1227 assert self.handles is not None 1228 f = self.handles.handle File ~/anaconda3/lib/python3.9/site-packages/pandas/io/common.py:789, in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options) 784 elif isinstance(handle, str): 785 # Check whether the filename is to be opened in binary mode. 786 # Binary mode does not support &#39;encoding&#39; and &#39;newline&#39;. 787 if ioargs.encoding and &#34;b&#34; not in ioargs.mode: 788 # Encoding --&gt; 789 handle = open( 790 handle, 791 ioargs.mode, 792 encoding=ioargs.encoding, 793 errors=errors, 794 newline=&#34;&#34;, 795 ) 796 else: 797 # Binary mode 798 handle = open(handle, ioargs.mode) FileNotFoundError: [Errno 2] No such file or directory: &#39;example.csv&#39; . how do i put it into a chart &#128553; . here is how: . import pandas as pd import matplotlib.pyplot as plt # read the CSV file df = pd.read_csv(&#39;files/example.csv&#39;) # create a bar chart of the number of people in each age group age_groups = [&#39;&lt;30&#39;, &#39;30-40&#39;, &#39;40-50&#39;, &#39;&gt;50&#39;] age_counts = pd.cut(df[&#39;Age&#39;], bins=[0, 30, 40, 50, df[&#39;Age&#39;].max()], labels=age_groups, include_lowest=True).value_counts() plt.bar(age_counts.index, age_counts.values) plt.title(&#39;Number of people in each age group&#39;) plt.xlabel(&#39;Age group&#39;) plt.ylabel(&#39;Number of people&#39;) plt.show() # create a pie chart of the gender distribution gender_counts = df[&#39;Gender&#39;].value_counts() plt.pie(gender_counts.values, labels=gender_counts.index, autopct=&#39;%1.1f%%&#39;) plt.title(&#39;Gender distribution&#39;) plt.show() # create a scatter plot of age vs. income plt.scatter(df[&#39;Age&#39;], df[&#39;Income&#39;]) plt.title(&#39;Age vs. Income&#39;) plt.xlabel(&#39;Age&#39;) plt.ylabel(&#39;Income&#39;) plt.show() . ParserError Traceback (most recent call last) /home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb Cell 18 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; import matplotlib.pyplot as plt &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; # read the CSV file -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; df = pd.read_csv(&#39;files/example.csv&#39;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # create a bar chart of the number of people in each age group &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; age_groups = [&#39;&lt;30&#39;, &#39;30-40&#39;, &#39;40-50&#39;, &#39;&gt;50&#39;] File ~/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py:311, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs) 305 if len(args) &gt; num_allow_args: 306 warnings.warn( 307 msg.format(arguments=arguments), 308 FutureWarning, 309 stacklevel=stacklevel, 310 ) --&gt; 311 return func(*args, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:680, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options) 665 kwds_defaults = _refine_defaults_read( 666 dialect, 667 delimiter, (...) 676 defaults={&#34;delimiter&#34;: &#34;,&#34;}, 677 ) 678 kwds.update(kwds_defaults) --&gt; 680 return _read(filepath_or_buffer, kwds) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:581, in _read(filepath_or_buffer, kwds) 578 return parser 580 with parser: --&gt; 581 return parser.read(nrows) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:1254, in TextFileReader.read(self, nrows) 1252 nrows = validate_integer(&#34;nrows&#34;, nrows) 1253 try: -&gt; 1254 index, columns, col_dict = self._engine.read(nrows) 1255 except Exception: 1256 self.close() File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/c_parser_wrapper.py:225, in CParserWrapper.read(self, nrows) 223 try: 224 if self.low_memory: --&gt; 225 chunks = self._reader.read_low_memory(nrows) 226 # destructive to chunks 227 data = _concatenate_chunks(chunks) File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:805, in pandas._libs.parsers.TextReader.read_low_memory() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:861, in pandas._libs.parsers.TextReader._read_rows() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:847, in pandas._libs.parsers.TextReader._tokenize_rows() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:1960, in pandas._libs.parsers.raise_parser_error() ParserError: Error tokenizing data. C error: Expected 1 fields in line 28, saw 367 . uh oh!!!! another error!??!!??!?! install this library: . pip install matplotlib . import pandas as pd import matplotlib.pyplot as plt import numpy as np # read the CSV file df = pd.read_csv(&#39;files/example.csv&#39;) # define age groups age_groups = [&#39;&lt;30&#39;, &#39;30-40&#39;, &#39;40-50&#39;, &#39;&gt;50&#39;] # create a new column with the age group for each person df[&#39;Age Group&#39;] = pd.cut(df[&#39;Age&#39;], bins=[0, 30, 40, 50, np.inf], labels=age_groups, include_lowest=True) # group by age group and count the number of people in each group age_counts = df.groupby(&#39;Age Group&#39;)[&#39;Name&#39;].count() # create a bar chart of the age counts age_counts.plot(kind=&#39;bar&#39;) # set the title and axis labels plt.title(&#39;Number of People in Each Age Group&#39;) plt.xlabel(&#39;Age Group&#39;) plt.ylabel(&#39;Number of People&#39;) # show the chart plt.show() . ParserError Traceback (most recent call last) /home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb Cell 20 in &lt;cell line: 6&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; import numpy as np &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; # read the CSV file -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; df = pd.read_csv(&#39;files/example.csv&#39;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; # define age groups &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-24-pandas.ipynb#X25sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; age_groups = [&#39;&lt;30&#39;, &#39;30-40&#39;, &#39;40-50&#39;, &#39;&gt;50&#39;] File ~/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py:311, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs) 305 if len(args) &gt; num_allow_args: 306 warnings.warn( 307 msg.format(arguments=arguments), 308 FutureWarning, 309 stacklevel=stacklevel, 310 ) --&gt; 311 return func(*args, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:680, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options) 665 kwds_defaults = _refine_defaults_read( 666 dialect, 667 delimiter, (...) 676 defaults={&#34;delimiter&#34;: &#34;,&#34;}, 677 ) 678 kwds.update(kwds_defaults) --&gt; 680 return _read(filepath_or_buffer, kwds) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:581, in _read(filepath_or_buffer, kwds) 578 return parser 580 with parser: --&gt; 581 return parser.read(nrows) File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py:1254, in TextFileReader.read(self, nrows) 1252 nrows = validate_integer(&#34;nrows&#34;, nrows) 1253 try: -&gt; 1254 index, columns, col_dict = self._engine.read(nrows) 1255 except Exception: 1256 self.close() File ~/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/c_parser_wrapper.py:225, in CParserWrapper.read(self, nrows) 223 try: 224 if self.low_memory: --&gt; 225 chunks = self._reader.read_low_memory(nrows) 226 # destructive to chunks 227 data = _concatenate_chunks(chunks) File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:805, in pandas._libs.parsers.TextReader.read_low_memory() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:861, in pandas._libs.parsers.TextReader._read_rows() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:847, in pandas._libs.parsers.TextReader._tokenize_rows() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/parsers.pyx:1960, in pandas._libs.parsers.raise_parser_error() ParserError: Error tokenizing data. C error: Expected 1 fields in line 28, saw 367 . magic!!!!!! . Hacks . make your own data using your brian, google or chatgpt, should look different than mine. | modify my code or write your own | output your data other than a bar graph. | write an 850+ word essay on how pandas, python or irl, affected your life. If AI score below 85%, then -1 grading point (CRINGE DONT USE) | answer the questions below, the more explained the better. | Questions . What are the two primary data structures in pandas and how do they differ? | How do you read a CSV file into a pandas DataFrame? | How do you select a single column from a pandas DataFrame? | How do you filter rows in a pandas DataFrame based on a condition? | How do you group rows in a pandas DataFrame by a particular column? | How do you aggregate data in a pandas DataFrame using functions like sum and mean? | How do you handle missing values in a pandas DataFrame? | How do you merge two pandas DataFrames together? | How do you export a pandas DataFrame to a CSV file? | What is the difference between a Series and a DataFrame in Pandas? | note . all hacks due saturday night, the more earlier you get them in the higher score you will get. if you miss the due date, you will get a 0. there will be no tolerance. . no questions answered . Tonight- 2.9 . Friday Night- 2.8 . Saturday Night - 2.7 . Sunday Night - 0.0 . questions answered . Tonight- 3.0 . Friday Night- 2.9 . Saturday Night - 2.8 . Sunday Night - 0.0 . wdfasdf .",
            "url": "https://jyustin.github.io/test-fastpages/jupyter/lesson/2023/04/24/pandas.html",
            "relUrl": "/jupyter/lesson/2023/04/24/pandas.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post34": {
            "title": "computing hacks",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . my PC specs: . Processor GHz: AMD Ryzen 7 3700U with Radeon Vega Mobile Gfx. 2.30 GHz . | Memory in GB: 9.9 GB . | Storage in GB: 477 GB . | OS: Windows 11 Home. OS build: 22621.1413 . | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions | . ans + review/notes . More lines/connections means more resources are needed, however less lines generally lead to less security against faults. . redundant: the network can allow devices to communicate even if connections fail. also known as fault-tolerant. . more devices = stronger network connections . QUESTION 1: . the network is fault tolerant. . Question 2: . No. Also, you can easily determine fault tolerance by looking at each letter and seeing if there is more than 1 “line” connected to that letter. only 1 line = no fault tolerance. . Question 3: . No. . Question 4 (on 4.2 now): . C is false. C claims data will only take 1 route from 1 device to another. this is not true, the data can travel many different paths based on needs. . Question 5: . A. connect from A-B, as A only has one path right now. . big idea 4 notes . Path . Route . Computer System . Computer Device . Bandwidth . Computer Network . Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas . | Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . diagrams . a quick flowchart for basic understanding of what programs do when run, NOT ABOUT NETWORKING . . 2nd diagram for general networking . . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . ans . Fault tolerance is when the network of computers connected along each other is stable enough so that when a connecton between 2 computers is severed, the other computers in the networ are still able to connect to each other. . . in the following example, the connection is not fault tolerant, as the severing of at least 1 connection will cause a computer to be unconnected in the network web. . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://jyustin.github.io/test-fastpages/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post35": {
            "title": "Numpy and Tenser Flow",
            "content": "What is Numpy? . It stands for Numerical python. It is a python package which is used to perform a wide variety of mathematical operations on arrays and works faster than a regular python list. . What can we do with Numpy? . One of the easiest things to do with Numpy is to change the shape of an array . import numpy as np a = np.array([1, 2, 3, 4, 5, 6]) print(a) b = np.reshape( a, # the array being reshaped (2,3) # dimensions of the new array ) print(b) c = np.reshape( a, (6,1) ) print(c) . [1 2 3 4 5 6] [[1 2 3] [4 5 6]] [[1] [2] [3] [4] [5] [6]] . Create two dimensional array. . a_list = [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]] d = np.array([a_list]) d . array([[[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]]]) . Accessing Elements: Can find a specific index, similar to regular python lists . z1 = np.random.randint (10, size=6) z1[0] # Find an index . 3 . z1[0:2] # Create an array of the specified range . array([3, 9]) . z1[-1] # Get last element of the list . 4 . Using Numpy With Images . from skimage import io photo = io.imread(&#39;images/waldo.png&#39;) type(photo) . numpy.ndarray . import matplotlib.pyplot as plt plt.imshow(photo) photo.shape . (252, 370, 4) . Output a mirror image . plt.imshow(photo[::-1]) . &lt;matplotlib.image.AxesImage at 0x7f539a412f40&gt; . Find specific part of the image by putting axes into an array . plt.imshow(photo[150:400, 675:775]) . ValueError Traceback (most recent call last) /home/id/vscode/test-fastpages/_notebooks/2023-04-03-TenserFlow.ipynb Cell 16 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-03-TenserFlow.ipynb#X21sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; plt.imshow(photo[150:400, 675:775]) File ~/anaconda3/lib/python3.9/site-packages/matplotlib/_api/deprecation.py:456, in make_keyword_only.&lt;locals&gt;.wrapper(*args, **kwargs) 450 if len(args) &gt; name_idx: 451 warn_deprecated( 452 since, message=&#34;Passing the %(name)s %(obj_type)s &#34; 453 &#34;positionally is deprecated since Matplotlib %(since)s; the &#34; 454 &#34;parameter will become keyword-only %(removal)s.&#34;, 455 name=name, obj_type=f&#34;parameter of {func.__name__}()&#34;) --&gt; 456 return func(*args, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py:2640, in imshow(X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, interpolation_stage, filternorm, filterrad, resample, url, data, **kwargs) 2634 @_copy_docstring_and_deprecators(Axes.imshow) 2635 def imshow( 2636 X, cmap=None, norm=None, aspect=None, interpolation=None, 2637 alpha=None, vmin=None, vmax=None, origin=None, extent=None, *, 2638 interpolation_stage=None, filternorm=True, filterrad=4.0, 2639 resample=None, url=None, data=None, **kwargs): -&gt; 2640 __ret = gca().imshow( 2641 X, cmap=cmap, norm=norm, aspect=aspect, 2642 interpolation=interpolation, alpha=alpha, vmin=vmin, 2643 vmax=vmax, origin=origin, extent=extent, 2644 interpolation_stage=interpolation_stage, 2645 filternorm=filternorm, filterrad=filterrad, resample=resample, 2646 url=url, **({&#34;data&#34;: data} if data is not None else {}), 2647 **kwargs) 2648 sci(__ret) 2649 return __ret File ~/anaconda3/lib/python3.9/site-packages/matplotlib/_api/deprecation.py:456, in make_keyword_only.&lt;locals&gt;.wrapper(*args, **kwargs) 450 if len(args) &gt; name_idx: 451 warn_deprecated( 452 since, message=&#34;Passing the %(name)s %(obj_type)s &#34; 453 &#34;positionally is deprecated since Matplotlib %(since)s; the &#34; 454 &#34;parameter will become keyword-only %(removal)s.&#34;, 455 name=name, obj_type=f&#34;parameter of {func.__name__}()&#34;) --&gt; 456 return func(*args, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/matplotlib/__init__.py:1412, in _preprocess_data.&lt;locals&gt;.inner(ax, data, *args, **kwargs) 1409 @functools.wraps(func) 1410 def inner(ax, *args, data=None, **kwargs): 1411 if data is None: -&gt; 1412 return func(ax, *map(sanitize_sequence, args), **kwargs) 1414 bound = new_sig.bind(ax, *args, **kwargs) 1415 auto_label = (bound.arguments.get(label_namer) 1416 or bound.kwargs.get(label_namer)) File ~/anaconda3/lib/python3.9/site-packages/matplotlib/axes/_axes.py:5488, in Axes.imshow(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, interpolation_stage, filternorm, filterrad, resample, url, **kwargs) 5481 self.set_aspect(aspect) 5482 im = mimage.AxesImage(self, cmap, norm, interpolation, 5483 origin, extent, filternorm=filternorm, 5484 filterrad=filterrad, resample=resample, 5485 interpolation_stage=interpolation_stage, 5486 **kwargs) -&gt; 5488 im.set_data(X) 5489 im.set_alpha(alpha) 5490 if im.get_clip_path() is None: 5491 # image does not already have clipping set, clip to axes patch File ~/anaconda3/lib/python3.9/site-packages/matplotlib/image.py:724, in _ImageBase.set_data(self, A) 718 if self._A.ndim == 3: 719 # If the input data has values outside the valid range (after 720 # normalisation), we issue a warning and then clip X to the bounds 721 # - otherwise casting wraps extreme values, hiding outliers and 722 # making reliable interpretation impossible. 723 high = 255 if np.issubdtype(self._A.dtype, np.integer) else 1 --&gt; 724 if self._A.min() &lt; 0 or high &lt; self._A.max(): 725 _log.warning( 726 &#39;Clipping input data to the valid range for imshow with &#39; 727 &#39;RGB data ([0..1] for floats or [0..255] for integers).&#39; 728 ) 729 self._A = np.clip(self._A, 0, high) File ~/anaconda3/lib/python3.9/site-packages/numpy/ma/core.py:5700, in MaskedArray.min(self, axis, out, fill_value, keepdims) 5698 # No explicit output 5699 if out is None: -&gt; 5700 result = self.filled(fill_value).min( 5701 axis=axis, out=out, **kwargs).view(type(self)) 5702 if result.ndim: 5703 # Set the mask 5704 result.__setmask__(newmask) File ~/anaconda3/lib/python3.9/site-packages/numpy/core/_methods.py:44, in _amin(a, axis, out, keepdims, initial, where) 42 def _amin(a, axis=None, out=None, keepdims=False, 43 initial=_NoValue, where=True): &gt; 44 return umr_minimum(a, axis, None, out, keepdims, initial, where) ValueError: zero-size array to reduction operation minimum which has no identity . Reduce the size of an image . plt.imshow(photo[::2, ::2]) . &lt;matplotlib.image.AxesImage at 0x7f5398f4f730&gt; . Can use Numpy math functions to find values related to an image . photo photo_sin = np.sin(photo) photo_sin . array([[[-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], ..., [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ]], [[-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], ..., [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ]], [[-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], ..., [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ]], ..., [[-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], ..., [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ]], [[-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], ..., [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ]], [[-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], ..., [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ], [-0.5063, -0.5063, -0.5063, 0. ]]], dtype=float16) . Numpy Hacks . For your hacks, use matplotlib and numpy to slice this image to display Waldo. Also find and display one other numpy function and blog about what it is used for. . photo1 = io.imread(&#39;images/waldo.png&#39;) type(photo1) plt.imshow(photo1) . &lt;matplotlib.image.AxesImage at 0x7f5398b69fd0&gt; . SLICED WALDO FOR HACKS . from skimage import io import matplotlib.pyplot as plt photo = io.imread(&#39;images/waldo.png&#39;) type(photo) plt.imshow(photo) plt.imshow(photo[110:200, 225:300]) . &lt;matplotlib.image.AxesImage at 0x7fbe5c058e50&gt; . extra numpy thing . import numpy as np np.random.choice([&quot;heads&quot;,&quot;tails&quot;]) # this will select a random value from our array . &#39;heads&#39; . random.choice can be used for situations where we want to randomly select something, like random in javascript. For example, if we wanted to create a dice game, we would use random.choice to easily create an array with our potential rolls and then just run it for each time we want a random number. Its basically an easy way to produce random results. . What is TenserFlow? . Tensor Flow is a machine learning platform which has tools to validate and transform large datasets and also provides standard datasets for machine learning training. . An example of this is the fashion MNIST (Modified National Institute of Standards and Technology) database: . In this dataset there are many pictures which are each28x28 Numpy arrays. . Setting up . This will train a neural network model to identify pictures of clothing. We will use tf.keras, a high-level API to build and train models in TensorFlow. . import tensorflow as tf # Helper libraries import numpy as np import matplotlib.pyplot as plt print(tf.__version__) . TypeError Traceback (most recent call last) /home/id/vscode/test-fastpages/_notebooks/2023-04-03-TenserFlow.ipynb Cell 27 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-03-TenserFlow.ipynb#X33sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # TensorFlow and tf.keras -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-03-TenserFlow.ipynb#X33sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; import tensorflow as tf &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-03-TenserFlow.ipynb#X33sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; # Helper libraries &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-03-TenserFlow.ipynb#X33sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; import matplotlib.pyplot as plt File ~/anaconda3/lib/python3.9/site-packages/tensorflow/__init__.py:37, in &lt;module&gt; 34 import sys as _sys 35 import typing as _typing &gt; 37 from tensorflow.python.tools import module_util as _module_util 38 from tensorflow.python.util.lazy_loader import LazyLoader as _LazyLoader 40 # Make sure code inside the TensorFlow codebase can use tf2.enabled() at import. File ~/anaconda3/lib/python3.9/site-packages/tensorflow/python/__init__.py:42, in &lt;module&gt; 37 from tensorflow.python.eager import context 39 # pylint: enable=wildcard-import 40 41 # Bring in subpackages. &gt; 42 from tensorflow.python import data 43 from tensorflow.python import distribute 44 # from tensorflow.python import keras File ~/anaconda3/lib/python3.9/site-packages/tensorflow/python/data/__init__.py:21, in &lt;module&gt; 15 &#34;&#34;&#34;`tf.data.Dataset` API for input pipelines. 16 17 See [Importing Data](https://tensorflow.org/guide/data) for an overview. 18 &#34;&#34;&#34; 20 # pylint: disable=unused-import &gt; 21 from tensorflow.python.data import experimental 22 from tensorflow.python.data.ops.dataset_ops import AUTOTUNE 23 from tensorflow.python.data.ops.dataset_ops import Dataset File ~/anaconda3/lib/python3.9/site-packages/tensorflow/python/data/experimental/__init__.py:97, in &lt;module&gt; 15 &#34;&#34;&#34;Experimental API for building input pipelines. 16 17 This module contains experimental `Dataset` sources and transformations that can (...) 93 @@UNKNOWN_CARDINALITY 94 &#34;&#34;&#34; 96 # pylint: disable=unused-import &gt; 97 from tensorflow.python.data.experimental import service 98 from tensorflow.python.data.experimental.ops.batching import dense_to_ragged_batch 99 from tensorflow.python.data.experimental.ops.batching import dense_to_sparse_batch File ~/anaconda3/lib/python3.9/site-packages/tensorflow/python/data/experimental/service/__init__.py:419, in &lt;module&gt; 1 # Copyright 2020 The TensorFlow Authors. All Rights Reserved. 2 # 3 # Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); (...) 13 # limitations under the License. 14 # ============================================================================== 15 &#34;&#34;&#34;API for using the tf.data service. 16 17 This module contains: (...) 416 job of ParameterServerStrategy). 417 &#34;&#34;&#34; --&gt; 419 from tensorflow.python.data.experimental.ops.data_service_ops import distribute 420 from tensorflow.python.data.experimental.ops.data_service_ops import from_dataset_id 421 from tensorflow.python.data.experimental.ops.data_service_ops import register_dataset File ~/anaconda3/lib/python3.9/site-packages/tensorflow/python/data/experimental/ops/data_service_ops.py:22, in &lt;module&gt; 20 from tensorflow.core.protobuf import data_service_pb2 21 from tensorflow.python import tf2 &gt; 22 from tensorflow.python.data.experimental.ops import compression_ops 23 from tensorflow.python.data.experimental.service import _pywrap_server_lib 24 from tensorflow.python.data.experimental.service import _pywrap_utils File ~/anaconda3/lib/python3.9/site-packages/tensorflow/python/data/experimental/ops/compression_ops.py:16, in &lt;module&gt; 1 # Copyright 2020 The TensorFlow Authors. All Rights Reserved. 2 # 3 # Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); (...) 13 # limitations under the License. 14 # ============================================================================== 15 &#34;&#34;&#34;Ops for compressing and uncompressing dataset elements.&#34;&#34;&#34; &gt; 16 from tensorflow.python.data.util import structure 17 from tensorflow.python.ops import gen_experimental_dataset_ops as ged_ops 20 def compress(element): File ~/anaconda3/lib/python3.9/site-packages/tensorflow/python/data/util/structure.py:22, in &lt;module&gt; 18 import itertools 20 import wrapt &gt; 22 from tensorflow.python.data.util import nest 23 from tensorflow.python.framework import composite_tensor 24 from tensorflow.python.framework import ops File ~/anaconda3/lib/python3.9/site-packages/tensorflow/python/data/util/nest.py:34, in &lt;module&gt; 1 # Copyright 2017 The TensorFlow Authors. All Rights Reserved. 2 # 3 # Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); (...) 13 # limitations under the License. 14 # ============================================================================== 16 &#34;&#34;&#34;## Functions for working with arbitrarily nested sequences of elements. 17 18 NOTE(mrry): This fork of the `tensorflow.python.util.nest` module (...) 31 arrays. 32 &#34;&#34;&#34; &gt; 34 from tensorflow.python.framework import sparse_tensor as _sparse_tensor 35 from tensorflow.python.util import _pywrap_utils 36 from tensorflow.python.util import nest File ~/anaconda3/lib/python3.9/site-packages/tensorflow/python/framework/sparse_tensor.py:25, in &lt;module&gt; 23 from tensorflow.python import tf2 24 from tensorflow.python.framework import composite_tensor &gt; 25 from tensorflow.python.framework import constant_op 26 from tensorflow.python.framework import dtypes 27 from tensorflow.python.framework import ops File ~/anaconda3/lib/python3.9/site-packages/tensorflow/python/framework/constant_op.py:25, in &lt;module&gt; 23 from tensorflow.core.framework import types_pb2 24 from tensorflow.python.eager import context &gt; 25 from tensorflow.python.eager import execute 26 from tensorflow.python.framework import dtypes 27 from tensorflow.python.framework import op_callbacks File ~/anaconda3/lib/python3.9/site-packages/tensorflow/python/eager/execute.py:21, in &lt;module&gt; 19 from tensorflow.python import pywrap_tfe 20 from tensorflow.python.eager import core &gt; 21 from tensorflow.python.framework import dtypes 22 from tensorflow.python.framework import ops 23 from tensorflow.python.framework import tensor_shape File ~/anaconda3/lib/python3.9/site-packages/tensorflow/python/framework/dtypes.py:37, in &lt;module&gt; 34 from tensorflow.core.function import trace_type 35 from tensorflow.tools.docs import doc_controls &gt; 37 _np_bfloat16 = _pywrap_bfloat16.TF_bfloat16_type() 38 _np_float8_e4m3fn = _pywrap_float8.TF_float8_e4m3fn_type() 39 _np_float8_e5m2 = _pywrap_float8.TF_float8_e5m2_type() TypeError: Unable to convert function return value to a Python type! The signature was () -&gt; handle . We will use the Fashion MNIST dataset which contains 70,000 grayscale images in 10 categories. Here we will load the database. . fashion_mnist = tf.keras.datasets.fashion_mnist (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data() . NameError Traceback (most recent call last) /home/id/vscode/test-fastpages/_notebooks/2023-04-03-TenserFlow.ipynb Cell 29 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-03-TenserFlow.ipynb#X35sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; fashion_mnist = tf.keras.datasets.fashion_mnist &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-04-03-TenserFlow.ipynb#X35sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data() NameError: name &#39;tf&#39; is not defined . This dataset loads 4 NumPy arrays: train_images and train_labels arrays are the training set, used for the models to learn test_images and test_labels arrays test the accuracy . Each imaged is mapped to a label. The class names are not included with the dataset, store them here to use later when plotting images: . class_names = [&#39;T-shirt/top&#39;, &#39;Trouser&#39;, &#39;Pullover&#39;, &#39;Dress&#39;, &#39;Coat&#39;, &#39;Sandal&#39;, &#39;Shirt&#39;, &#39;Sneaker&#39;, &#39;Bag&#39;, &#39;Ankle boot&#39;] . Let&#39;s explore the format of the dataset before training the model. The following shows there are 60,000 images in the training set, with each image represented as 28 x 28 pixels: . train_images.shape . (60000, 28, 28) . Likewise, there are 60,000 labels in the training set: . len(train_labels) . 60000 . Each label is an integer between 0 and 9: . train_labels . array([9, 0, 0, ..., 3, 0, 5], dtype=uint8) . There are 10,000 images in the test set. Again, each image is represented as 28 x 28 pixels: . test_images.shape . (10000, 28, 28) . And the test set contains 10,000 images labels: . len(test_labels) . 10000 . Preprocessing data . The data must be preprocessed before training the network. If you inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255: . plt.figure() plt.imshow(train_images[0]) plt.colorbar() plt.grid(False) plt.show() . Scale these values to a range of 0 to 1 before feeding them to the neural network model. To do so, divide the values by 255. It&#39;s important that the training set and the testing set be preprocessed in the same way: . train_images = train_images / 255.0 test_images = test_images / 255.0 . To verify that the data is in the correct format and that you&#39;re ready to build and train the network, let&#39;s display the first 25 images from the training set and display the class name below each image. . plt.figure(figsize=(10,10)) for i in range(25): plt.subplot(5,5,i+1) plt.xticks([]) plt.yticks([]) plt.grid(False) plt.imshow(train_images[i], cmap=plt.cm.binary) plt.xlabel(class_names[train_labels[i]]) plt.show() . Building the neural network requires configuring the layers of the model, then compiling the model. . The basic building block of a neural network is the layer. Layers extract representations from the data fed into them. Hopefully, these representations are meaningful for the problem at hand. . Most of deep learning consists of chaining together simple layers. Most layers, such as tf.keras.layers.Dense, have parameters that are learned during training. . model = tf.keras.Sequential([ tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(128, activation=&#39;relu&#39;), tf.keras.layers.Dense(10) ]) . The first layer in this network, tf.keras.layers.Flatten, transforms the format of the images from a two-dimensional array (of 28 by 28 pixels) to a one-dimensional array (of 28 * 28 = 784 pixels). Think of this layer as unstacking rows of pixels in the image and lining them up. This layer has no parameters to learn; it only reformats the data. . After the pixels are flattened, the network consists of a sequence of two tf.keras.layers.Dense layers. These are densely connected, or fully connected, neural layers. The first Dense layer has 128 nodes (or neurons). The second layer returns a logits array with length of 10. Each node contains a score that indicates the current image belongs to one of the 10 classes. . Before the model is ready for training, it needs a few more settings. These are added during the model&#39;s compile step: . Loss function —This measures how accurate the model is during training. You want to minimize this function to &quot;steer&quot; the model in the right direction. | Optimizer —This is how the model is updated based on the data it sees and its loss function. | Metrics —Used to monitor the training and testing steps. The following example uses accuracy, the fraction of the images that are correctly classified. | . model.compile(optimizer=&#39;adam&#39;, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=[&#39;accuracy&#39;]) . Training . Training the neural network model requires the following steps: . Feed the training data to the model. (train_images and train_labels arrays.) | The model learns to associate images and labels. | You ask the model to make predictions about a test set (test_images array) | Verify that the predictions match the labels from the test_labels array. | . To start training, call the model.fit method . model.fit(train_images, train_labels, epochs=10) . Epoch 1/10 . 2023-04-04 11:53:51.070373: W tensorflow/tsl/framework/cpu_allocator_impl.cc:83] Allocation of 188160000 exceeds 10% of free system memory. . 1875/1875 [==============================] - 11s 6ms/step - loss: 0.4959 - accuracy: 0.8268 Epoch 2/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.3762 - accuracy: 0.8651 Epoch 3/10 1875/1875 [==============================] - 10s 6ms/step - loss: 0.3361 - accuracy: 0.8778 Epoch 4/10 1875/1875 [==============================] - 10s 6ms/step - loss: 0.3130 - accuracy: 0.8860 Epoch 5/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2946 - accuracy: 0.8903 Epoch 6/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2816 - accuracy: 0.8958 Epoch 7/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2679 - accuracy: 0.9011 Epoch 8/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2578 - accuracy: 0.9027 Epoch 9/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2494 - accuracy: 0.9062 Epoch 10/10 1875/1875 [==============================] - 11s 6ms/step - loss: 0.2393 - accuracy: 0.9107 . &lt;keras.callbacks.History at 0x7f41ac3327f0&gt; . As the model trains, the loss and accuracy metrics are displayed. This model reaches an accuracy of about 0.91 (or 91%) on the training data. . Next, compare how the model performs on the test dataset: . test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2) print(&#39; nTest accuracy:&#39;, test_acc) . 313/313 - 1s - loss: 0.3225 - accuracy: 0.8908 - 1s/epoch - 3ms/step Test accuracy: 0.8907999992370605 . It turns out that the accuracy on the test dataset is a little less than the accuracy on the training dataset. This gap between training accuracy and test accuracy represents overfitting. Overfitting is when a machine learning model performs worse on new, previouly unseen inputs than on the training data. . Predicting Images . With the model trained, you can use it to make predictions about some images. Attach a softmax layer to convert the model&#39;s linear outputs (logits) to probabilities, which should be easier to interpret. . probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()]) . predictions = probability_model.predict(test_images) . 313/313 [==============================] - 1s 3ms/step . Here, the model has predicted the label for each image in the testing set. Let&#39;s take a look at the first prediction: . predictions[0] . array([1.7737974e-10, 9.8017128e-10, 2.4250555e-08, 2.7087502e-10, 3.3816602e-11, 7.0955430e-04, 1.5008560e-09, 2.1424549e-02, 2.1235054e-09, 9.7786587e-01], dtype=float32) . A prediction is an array of 10 numbers. They represent the model&#39;s &quot;confidence&quot; that the image corresponds to each of the 10 different articles of clothing. You can see which label has the highest confidence value: . np.argmax(predictions[0]) . 9 . So, the model is most confident that this image is an ankle boot, or class_names[9]. Examining the test label shows that this classification is correct: . test_labels[0] . 9 . Graph this to look at the full set of 10 class predictions. . def plot_image(i, predictions_array, true_label, img): true_label, img = true_label[i], img[i] plt.grid(False) plt.xticks([]) plt.yticks([]) plt.imshow(img, cmap=plt.cm.binary) predicted_label = np.argmax(predictions_array) if predicted_label == true_label: color = &#39;blue&#39; else: color = &#39;red&#39; plt.xlabel(&quot;{} {:2.0f}% ({})&quot;.format(class_names[predicted_label], 100*np.max(predictions_array), class_names[true_label]), color=color) def plot_value_array(i, predictions_array, true_label): true_label = true_label[i] plt.grid(False) plt.xticks(range(10)) plt.yticks([]) thisplot = plt.bar(range(10), predictions_array, color=&quot;#777777&quot;) plt.ylim([0, 1]) predicted_label = np.argmax(predictions_array) thisplot[predicted_label].set_color(&#39;red&#39;) thisplot[true_label].set_color(&#39;blue&#39;) . With the model trained, you can use it to make predictions about some images. . Let&#39;s look at the 0th image, predictions, and prediction array. Correct prediction labels are blue and incorrect prediction labels are red. The number gives the percentage (out of 100) for the predicted label. . i = 0 plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() . i = 12 plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() . Let&#39;s plot several images with their predictions. Note that the model can be wrong even when very confident. . # Color correct predictions in blue and incorrect predictions in red. num_rows = 5 num_cols = 3 num_images = num_rows*num_cols plt.figure(figsize=(2*2*num_cols, 2*num_rows)) for i in range(num_images): plt.subplot(num_rows, 2*num_cols, 2*i+1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(num_rows, 2*num_cols, 2*i+2) plot_value_array(i, predictions[i], test_labels) plt.tight_layout() plt.show() . Finally, use the trained model to make a prediction about a single image. . img = test_images[1] print(img.shape) . (28, 28) . tf.keras models are optimized to make predictions on a batch, or collection, of examples at once. Accordingly, even though you&#39;re using a single image, you need to add it to a list: . img = (np.expand_dims(img,0)) print(img.shape) . (1, 28, 28) . Now predict the correct label for this image: . predictions_single = probability_model.predict(img) print(predictions_single) . 1/1 [==============================] - 0s 52ms/step [[1.0949210e-05 4.1276347e-11 9.9810290e-01 1.2848138e-10 1.0825287e-03 1.3133799e-13 8.0366491e-04 1.1366387e-15 3.2978012e-10 1.3686339e-15]] . plot_value_array(1, predictions_single[0], test_labels) _ = plt.xticks(range(10), class_names, rotation=45) plt.show() . tf.keras.Model.predict returns a list of lists, one list for each image in the batch of data. Grab the predictions for our (only) image in the batch: . np.argmax(predictions_single[0]) . 2 . And the model predicts a label as expected. . Hacks . Tensorflow is now extra credit . Train this same model and record it&#39;s accuracy in the training and testing. .",
            "url": "https://jyustin.github.io/test-fastpages/jupyter/week-28/2023/04/03/TenserFlow.html",
            "relUrl": "/jupyter/week-28/2023/04/03/TenserFlow.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post36": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a __dictionary_. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is __O(1)_. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # THE output of the function is {1,2,3}. # There are no duplicate values # probably b/c we can&#39;t have duplciates in hashes. # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # Sets are a good example of how collisions in hashing works and why we shouldn&#39;t have duplicate # Sets are a tool we can use for hashing if we don&#39;t want to use dictionaries. . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # Lists # all of this is compiled into a dictionary # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? # Just remove the duplicate manually lol # or use sets (that worked) settest = set(lover_album[&quot;producer&quot;]) # Printing the dictionary print(lover_album[&quot;producer&quot;]) print(settest) . [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] {&#39;Louis Bell&#39;, &#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # lover_album[&quot;genre&quot;] =[&quot;Pop&quot;, &quot;Synth-pop&quot;, &quot;electropop&quot;] # will work, but maybe there is another way # lover_album[&quot;genre&quot;].append(&quot;new genre&quot;) #this method uses list methods but we now have duplicates if we run multiple times # Printing the dictionary print(lover_album[&quot;genre&quot;]) . [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;electropop&#39;, &#39;new genre&#39;, &#39;new genre&#39;] . for k,v in lover_album.items(): # iterate using a for loop for key and value #print(str(k) + &quot;: &quot; + str(v)) dont need this.... pass # Write your own code to print tracks in readable format # # exe = 0 trackS = lover_album[&quot;tracks&quot;] num = 0 for k,v in trackS.items(): # iterate using a for loop for key and value exe = exe + 1 num = num + 1 print(&quot;song&quot;, exe, &quot;:&quot;, trackS[num]) . song 1 : I Forgot That You Existed song 2 : Cruel Summer song 3 : Lover song 4 : The Man song 5 : The Archer song 6 : I Think He Knows song 7 : Miss Americana &amp; The Heartbreak Prince song 8 : Paper Rings song 9 : Cornelia Street song 10 : Death By A Thousand Cuts song 11 : London Boy song 12 : Soon You&#39;ll Get Better (feat. Dixie Chicks) song 13 : False God song 14 : You Need To Calm Down song 15 : Afterglow song 16 : Me! (feat. Brendon Urie of Panic! At The Disco) song 17 : It&#39;s Nice To Have A Friend song 18 : Daylight song 19 : All Of The Girls You Loved Before . def search(): x = 1 while x == 1: # use while loop so we can continue searching search = input(&quot;What would you like to know about the album? (type quit to exit)&quot;) if search == &quot;quit&quot;: x = 0 elif lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # use while loop so that we can continue searching # . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . working on hacks . my_album = { # initialize the album need to run each time &quot;title&quot;: &quot;I know how to use dictionaries&quot;, &quot;artist&quot;: &quot;artist&quot;, &quot;year&quot;: 1984, &quot;genre&quot;: [], &quot;tracks&quot;: { 1: &quot;U.N Owen Was her?&quot;, } } . def search_personal(): x = 1 while x == 1: # use while loop so we can continue searching search = input(&quot;What would you like to know about the album? (type quit to leave)&quot;) if search == &quot;quit&quot;: print(&quot;you have quit lol&quot;) x = 0 elif my_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(my_album.get(search.lower())) #search_personal() my_tracks = my_album[&quot;tracks&quot;] def addtracks(): x = 1 while x == 1: # use while loop so we can continue searching newTrack = input(&quot;add a new track (type tracks), change artist (type artist), show album (type search), add genre (type genre) or type quit&quot;) if newTrack == &quot;quit&quot;: x = 0 elif newTrack == &quot;artist&quot;: artists = input(&quot;type in artist name&quot;) my_album[&quot;artist&quot;] = artists elif newTrack == &quot;tracks&quot;: newTrackz = input(&quot;type in new track name&quot;) newTrack2 = input(&quot;add position of new track:&quot;) my_tracks[newTrack2] = newTrackz elif newTrack == &quot;search&quot;: search_personal() elif newTrack == &quot;genre&quot;: genres = input(&quot;add a genre to the program&quot;) my_album[&quot;genre&quot;].append(genres) newGenre = [] [newGenre.append(x) for x in my_album[&quot;genre&quot;] if x not in newGenre] # use list comprehension to remove duplicates my_album[&quot;genre&quot;] = newGenre # add genre print(my_album[&quot;genre&quot;]) else: print(&quot;unrecognized command!&quot;) addtracks() #search_personal() print(my_album[&quot;tracks&quot;]) . unrecognized command! unrecognized command! {1: &#39;U.N Owen Was her?&#39;, &#39;2&#39;: &#39;test&#39;} you have quit lol ZUN ZUN you have quit lol [&#39;DNB&#39;] [&#39;DNB&#39;] {1: &#39;U.N Owen Was her?&#39;, &#39;2&#39;: &#39;test&#39;} .",
            "url": "https://jyustin.github.io/test-fastpages/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post37": {
            "title": "Data Structures- Space and Time Complexity hacks",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . ANS . time and space complexity are important when developing programs, as you don&#39;t want your programs to consume too much memory, or take too long to complete. Basically, managing complexity and time of programs is essential when developing programs for user usage. You don&#39;t want your programs to consume too much of a users memory or take too long basically. . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 #baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) pixels: 5,846,448 Scaled size: (625, 468) pixels: 292,500 -- original image -- . Do you think this is a time complexity or space complexity or both problem? . ANS . when comparing time of the algorithm when basewidth is 5000, the algorithm takes 1.4 seconds to complete. . With a basewidth of 40000, the Kernel crashes after 30 seconds or so of the algorithm running. . With a basewidth of 10000, the algorithm takes 5.6 seconds to complete. . basewidth of 625, time is only 0.3 seconds to complete. . This is time problem, as we can see the time of the algorithm becomes longer as the basewidth increases, so reducing steps in the problem to reduce time of the algorithm is something that could potentially be a problem to fix. . This could also be a space complexity, as we can see that the algorithm cannot finish when the basewidth is too large. Reducing complexity or reducing steps in the algorithm would need to be done to solve the problem, as it seems like the program does not have the capabilty to process higher base widths. . Linear time because the program must perform another step when the base width increases, thus linearily increasing timeoftfhefucntion. . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) print(numbers) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] . Time: 0.1 seconds . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . 263 Alabama . time: 0.1 seconds . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . 178 1.78 . time: 0.1 seconds . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . time: 0.3 seconds . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . time: 0.1 seconds . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . time: over a minute, did not even complete . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . time: 0.1 seconds . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . time: 0.1 seconds . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) print(fibonacci(30)) #print(fibonacci(40)) . 832040 . fibonacci with 30: 0.4 seconds . fibonacci with 40: 34.6 seconds . fibonacci with 20: 0.1 seconds . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets #print(generate_subsets([1,2,3])) print(generate_subsets([1,2,3,4,5,6,7,8,9,10])) . [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 9, 10], [1, 2, 3, 4, 5, 6, 7, 9], [1, 2, 3, 4, 5, 6, 7, 10], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 8, 9, 10], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 8, 10], [1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 4, 5, 6, 9, 10], [1, 2, 3, 4, 5, 6, 9], [1, 2, 3, 4, 5, 6, 10], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7, 8, 9, 10], [1, 2, 3, 4, 5, 7, 8, 9], [1, 2, 3, 4, 5, 7, 8, 10], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 5, 7, 9, 10], [1, 2, 3, 4, 5, 7, 9], [1, 2, 3, 4, 5, 7, 10], [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 5, 8, 9, 10], [1, 2, 3, 4, 5, 8, 9], [1, 2, 3, 4, 5, 8, 10], [1, 2, 3, 4, 5, 8], [1, 2, 3, 4, 5, 9, 10], [1, 2, 3, 4, 5, 9], [1, 2, 3, 4, 5, 10], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 9, 10], [1, 2, 3, 4, 6, 7, 8, 9], [1, 2, 3, 4, 6, 7, 8, 10], [1, 2, 3, 4, 6, 7, 8], [1, 2, 3, 4, 6, 7, 9, 10], [1, 2, 3, 4, 6, 7, 9], [1, 2, 3, 4, 6, 7, 10], [1, 2, 3, 4, 6, 7], [1, 2, 3, 4, 6, 8, 9, 10], [1, 2, 3, 4, 6, 8, 9], [1, 2, 3, 4, 6, 8, 10], [1, 2, 3, 4, 6, 8], [1, 2, 3, 4, 6, 9, 10], [1, 2, 3, 4, 6, 9], [1, 2, 3, 4, 6, 10], [1, 2, 3, 4, 6], [1, 2, 3, 4, 7, 8, 9, 10], [1, 2, 3, 4, 7, 8, 9], [1, 2, 3, 4, 7, 8, 10], [1, 2, 3, 4, 7, 8], [1, 2, 3, 4, 7, 9, 10], [1, 2, 3, 4, 7, 9], [1, 2, 3, 4, 7, 10], [1, 2, 3, 4, 7], [1, 2, 3, 4, 8, 9, 10], [1, 2, 3, 4, 8, 9], [1, 2, 3, 4, 8, 10], [1, 2, 3, 4, 8], [1, 2, 3, 4, 9, 10], [1, 2, 3, 4, 9], [1, 2, 3, 4, 10], [1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10], [1, 2, 3, 5, 6, 7, 8, 9], [1, 2, 3, 5, 6, 7, 8, 10], [1, 2, 3, 5, 6, 7, 8], [1, 2, 3, 5, 6, 7, 9, 10], [1, 2, 3, 5, 6, 7, 9], [1, 2, 3, 5, 6, 7, 10], [1, 2, 3, 5, 6, 7], [1, 2, 3, 5, 6, 8, 9, 10], [1, 2, 3, 5, 6, 8, 9], [1, 2, 3, 5, 6, 8, 10], [1, 2, 3, 5, 6, 8], [1, 2, 3, 5, 6, 9, 10], [1, 2, 3, 5, 6, 9], [1, 2, 3, 5, 6, 10], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 3, 5, 7, 8, 9], [1, 2, 3, 5, 7, 8, 10], [1, 2, 3, 5, 7, 8], [1, 2, 3, 5, 7, 9, 10], [1, 2, 3, 5, 7, 9], [1, 2, 3, 5, 7, 10], [1, 2, 3, 5, 7], [1, 2, 3, 5, 8, 9, 10], [1, 2, 3, 5, 8, 9], [1, 2, 3, 5, 8, 10], [1, 2, 3, 5, 8], [1, 2, 3, 5, 9, 10], [1, 2, 3, 5, 9], [1, 2, 3, 5, 10], [1, 2, 3, 5], [1, 2, 3, 6, 7, 8, 9, 10], [1, 2, 3, 6, 7, 8, 9], [1, 2, 3, 6, 7, 8, 10], [1, 2, 3, 6, 7, 8], [1, 2, 3, 6, 7, 9, 10], [1, 2, 3, 6, 7, 9], [1, 2, 3, 6, 7, 10], [1, 2, 3, 6, 7], [1, 2, 3, 6, 8, 9, 10], [1, 2, 3, 6, 8, 9], [1, 2, 3, 6, 8, 10], [1, 2, 3, 6, 8], [1, 2, 3, 6, 9, 10], [1, 2, 3, 6, 9], [1, 2, 3, 6, 10], [1, 2, 3, 6], [1, 2, 3, 7, 8, 9, 10], [1, 2, 3, 7, 8, 9], [1, 2, 3, 7, 8, 10], [1, 2, 3, 7, 8], [1, 2, 3, 7, 9, 10], [1, 2, 3, 7, 9], [1, 2, 3, 7, 10], [1, 2, 3, 7], [1, 2, 3, 8, 9, 10], [1, 2, 3, 8, 9], [1, 2, 3, 8, 10], [1, 2, 3, 8], [1, 2, 3, 9, 10], [1, 2, 3, 9], [1, 2, 3, 10], [1, 2, 3], [1, 2, 4, 5, 6, 7, 8, 9, 10], [1, 2, 4, 5, 6, 7, 8, 9], [1, 2, 4, 5, 6, 7, 8, 10], [1, 2, 4, 5, 6, 7, 8], [1, 2, 4, 5, 6, 7, 9, 10], [1, 2, 4, 5, 6, 7, 9], [1, 2, 4, 5, 6, 7, 10], [1, 2, 4, 5, 6, 7], [1, 2, 4, 5, 6, 8, 9, 10], [1, 2, 4, 5, 6, 8, 9], [1, 2, 4, 5, 6, 8, 10], [1, 2, 4, 5, 6, 8], [1, 2, 4, 5, 6, 9, 10], [1, 2, 4, 5, 6, 9], [1, 2, 4, 5, 6, 10], [1, 2, 4, 5, 6], [1, 2, 4, 5, 7, 8, 9, 10], [1, 2, 4, 5, 7, 8, 9], [1, 2, 4, 5, 7, 8, 10], [1, 2, 4, 5, 7, 8], [1, 2, 4, 5, 7, 9, 10], [1, 2, 4, 5, 7, 9], [1, 2, 4, 5, 7, 10], [1, 2, 4, 5, 7], [1, 2, 4, 5, 8, 9, 10], [1, 2, 4, 5, 8, 9], [1, 2, 4, 5, 8, 10], [1, 2, 4, 5, 8], [1, 2, 4, 5, 9, 10], [1, 2, 4, 5, 9], [1, 2, 4, 5, 10], [1, 2, 4, 5], [1, 2, 4, 6, 7, 8, 9, 10], [1, 2, 4, 6, 7, 8, 9], [1, 2, 4, 6, 7, 8, 10], [1, 2, 4, 6, 7, 8], [1, 2, 4, 6, 7, 9, 10], [1, 2, 4, 6, 7, 9], [1, 2, 4, 6, 7, 10], [1, 2, 4, 6, 7], [1, 2, 4, 6, 8, 9, 10], [1, 2, 4, 6, 8, 9], [1, 2, 4, 6, 8, 10], [1, 2, 4, 6, 8], [1, 2, 4, 6, 9, 10], [1, 2, 4, 6, 9], [1, 2, 4, 6, 10], [1, 2, 4, 6], [1, 2, 4, 7, 8, 9, 10], [1, 2, 4, 7, 8, 9], [1, 2, 4, 7, 8, 10], [1, 2, 4, 7, 8], [1, 2, 4, 7, 9, 10], [1, 2, 4, 7, 9], [1, 2, 4, 7, 10], [1, 2, 4, 7], [1, 2, 4, 8, 9, 10], [1, 2, 4, 8, 9], [1, 2, 4, 8, 10], [1, 2, 4, 8], [1, 2, 4, 9, 10], [1, 2, 4, 9], [1, 2, 4, 10], [1, 2, 4], [1, 2, 5, 6, 7, 8, 9, 10], [1, 2, 5, 6, 7, 8, 9], [1, 2, 5, 6, 7, 8, 10], [1, 2, 5, 6, 7, 8], [1, 2, 5, 6, 7, 9, 10], [1, 2, 5, 6, 7, 9], [1, 2, 5, 6, 7, 10], [1, 2, 5, 6, 7], [1, 2, 5, 6, 8, 9, 10], [1, 2, 5, 6, 8, 9], [1, 2, 5, 6, 8, 10], [1, 2, 5, 6, 8], [1, 2, 5, 6, 9, 10], [1, 2, 5, 6, 9], [1, 2, 5, 6, 10], [1, 2, 5, 6], [1, 2, 5, 7, 8, 9, 10], [1, 2, 5, 7, 8, 9], [1, 2, 5, 7, 8, 10], [1, 2, 5, 7, 8], [1, 2, 5, 7, 9, 10], [1, 2, 5, 7, 9], [1, 2, 5, 7, 10], [1, 2, 5, 7], [1, 2, 5, 8, 9, 10], [1, 2, 5, 8, 9], [1, 2, 5, 8, 10], [1, 2, 5, 8], [1, 2, 5, 9, 10], [1, 2, 5, 9], [1, 2, 5, 10], [1, 2, 5], [1, 2, 6, 7, 8, 9, 10], [1, 2, 6, 7, 8, 9], [1, 2, 6, 7, 8, 10], [1, 2, 6, 7, 8], [1, 2, 6, 7, 9, 10], [1, 2, 6, 7, 9], [1, 2, 6, 7, 10], [1, 2, 6, 7], [1, 2, 6, 8, 9, 10], [1, 2, 6, 8, 9], [1, 2, 6, 8, 10], [1, 2, 6, 8], [1, 2, 6, 9, 10], [1, 2, 6, 9], [1, 2, 6, 10], [1, 2, 6], [1, 2, 7, 8, 9, 10], [1, 2, 7, 8, 9], [1, 2, 7, 8, 10], [1, 2, 7, 8], [1, 2, 7, 9, 10], [1, 2, 7, 9], [1, 2, 7, 10], [1, 2, 7], [1, 2, 8, 9, 10], [1, 2, 8, 9], [1, 2, 8, 10], [1, 2, 8], [1, 2, 9, 10], [1, 2, 9], [1, 2, 10], [1, 2], [1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 10], [1, 3, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7, 9, 10], [1, 3, 4, 5, 6, 7, 9], [1, 3, 4, 5, 6, 7, 10], [1, 3, 4, 5, 6, 7], [1, 3, 4, 5, 6, 8, 9, 10], [1, 3, 4, 5, 6, 8, 9], [1, 3, 4, 5, 6, 8, 10], [1, 3, 4, 5, 6, 8], [1, 3, 4, 5, 6, 9, 10], [1, 3, 4, 5, 6, 9], [1, 3, 4, 5, 6, 10], [1, 3, 4, 5, 6], [1, 3, 4, 5, 7, 8, 9, 10], [1, 3, 4, 5, 7, 8, 9], [1, 3, 4, 5, 7, 8, 10], [1, 3, 4, 5, 7, 8], [1, 3, 4, 5, 7, 9, 10], [1, 3, 4, 5, 7, 9], [1, 3, 4, 5, 7, 10], [1, 3, 4, 5, 7], [1, 3, 4, 5, 8, 9, 10], [1, 3, 4, 5, 8, 9], [1, 3, 4, 5, 8, 10], [1, 3, 4, 5, 8], [1, 3, 4, 5, 9, 10], [1, 3, 4, 5, 9], [1, 3, 4, 5, 10], [1, 3, 4, 5], [1, 3, 4, 6, 7, 8, 9, 10], [1, 3, 4, 6, 7, 8, 9], [1, 3, 4, 6, 7, 8, 10], [1, 3, 4, 6, 7, 8], [1, 3, 4, 6, 7, 9, 10], [1, 3, 4, 6, 7, 9], [1, 3, 4, 6, 7, 10], [1, 3, 4, 6, 7], [1, 3, 4, 6, 8, 9, 10], [1, 3, 4, 6, 8, 9], [1, 3, 4, 6, 8, 10], [1, 3, 4, 6, 8], [1, 3, 4, 6, 9, 10], [1, 3, 4, 6, 9], [1, 3, 4, 6, 10], [1, 3, 4, 6], [1, 3, 4, 7, 8, 9, 10], [1, 3, 4, 7, 8, 9], [1, 3, 4, 7, 8, 10], [1, 3, 4, 7, 8], [1, 3, 4, 7, 9, 10], [1, 3, 4, 7, 9], [1, 3, 4, 7, 10], [1, 3, 4, 7], [1, 3, 4, 8, 9, 10], [1, 3, 4, 8, 9], [1, 3, 4, 8, 10], [1, 3, 4, 8], [1, 3, 4, 9, 10], [1, 3, 4, 9], [1, 3, 4, 10], [1, 3, 4], [1, 3, 5, 6, 7, 8, 9, 10], [1, 3, 5, 6, 7, 8, 9], [1, 3, 5, 6, 7, 8, 10], [1, 3, 5, 6, 7, 8], [1, 3, 5, 6, 7, 9, 10], [1, 3, 5, 6, 7, 9], [1, 3, 5, 6, 7, 10], [1, 3, 5, 6, 7], [1, 3, 5, 6, 8, 9, 10], [1, 3, 5, 6, 8, 9], [1, 3, 5, 6, 8, 10], [1, 3, 5, 6, 8], [1, 3, 5, 6, 9, 10], [1, 3, 5, 6, 9], [1, 3, 5, 6, 10], [1, 3, 5, 6], [1, 3, 5, 7, 8, 9, 10], [1, 3, 5, 7, 8, 9], [1, 3, 5, 7, 8, 10], [1, 3, 5, 7, 8], [1, 3, 5, 7, 9, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 10], [1, 3, 5, 7], [1, 3, 5, 8, 9, 10], [1, 3, 5, 8, 9], [1, 3, 5, 8, 10], [1, 3, 5, 8], [1, 3, 5, 9, 10], [1, 3, 5, 9], [1, 3, 5, 10], [1, 3, 5], [1, 3, 6, 7, 8, 9, 10], [1, 3, 6, 7, 8, 9], [1, 3, 6, 7, 8, 10], [1, 3, 6, 7, 8], [1, 3, 6, 7, 9, 10], [1, 3, 6, 7, 9], [1, 3, 6, 7, 10], [1, 3, 6, 7], [1, 3, 6, 8, 9, 10], [1, 3, 6, 8, 9], [1, 3, 6, 8, 10], [1, 3, 6, 8], [1, 3, 6, 9, 10], [1, 3, 6, 9], [1, 3, 6, 10], [1, 3, 6], [1, 3, 7, 8, 9, 10], [1, 3, 7, 8, 9], [1, 3, 7, 8, 10], [1, 3, 7, 8], [1, 3, 7, 9, 10], [1, 3, 7, 9], [1, 3, 7, 10], [1, 3, 7], [1, 3, 8, 9, 10], [1, 3, 8, 9], [1, 3, 8, 10], [1, 3, 8], [1, 3, 9, 10], [1, 3, 9], [1, 3, 10], [1, 3], [1, 4, 5, 6, 7, 8, 9, 10], [1, 4, 5, 6, 7, 8, 9], [1, 4, 5, 6, 7, 8, 10], [1, 4, 5, 6, 7, 8], [1, 4, 5, 6, 7, 9, 10], [1, 4, 5, 6, 7, 9], [1, 4, 5, 6, 7, 10], [1, 4, 5, 6, 7], [1, 4, 5, 6, 8, 9, 10], [1, 4, 5, 6, 8, 9], [1, 4, 5, 6, 8, 10], [1, 4, 5, 6, 8], [1, 4, 5, 6, 9, 10], [1, 4, 5, 6, 9], [1, 4, 5, 6, 10], [1, 4, 5, 6], [1, 4, 5, 7, 8, 9, 10], [1, 4, 5, 7, 8, 9], [1, 4, 5, 7, 8, 10], [1, 4, 5, 7, 8], [1, 4, 5, 7, 9, 10], [1, 4, 5, 7, 9], [1, 4, 5, 7, 10], [1, 4, 5, 7], [1, 4, 5, 8, 9, 10], [1, 4, 5, 8, 9], [1, 4, 5, 8, 10], [1, 4, 5, 8], [1, 4, 5, 9, 10], [1, 4, 5, 9], [1, 4, 5, 10], [1, 4, 5], [1, 4, 6, 7, 8, 9, 10], [1, 4, 6, 7, 8, 9], [1, 4, 6, 7, 8, 10], [1, 4, 6, 7, 8], [1, 4, 6, 7, 9, 10], [1, 4, 6, 7, 9], [1, 4, 6, 7, 10], [1, 4, 6, 7], [1, 4, 6, 8, 9, 10], [1, 4, 6, 8, 9], [1, 4, 6, 8, 10], [1, 4, 6, 8], [1, 4, 6, 9, 10], [1, 4, 6, 9], [1, 4, 6, 10], [1, 4, 6], [1, 4, 7, 8, 9, 10], [1, 4, 7, 8, 9], [1, 4, 7, 8, 10], [1, 4, 7, 8], [1, 4, 7, 9, 10], [1, 4, 7, 9], [1, 4, 7, 10], [1, 4, 7], [1, 4, 8, 9, 10], [1, 4, 8, 9], [1, 4, 8, 10], [1, 4, 8], [1, 4, 9, 10], [1, 4, 9], [1, 4, 10], [1, 4], [1, 5, 6, 7, 8, 9, 10], [1, 5, 6, 7, 8, 9], [1, 5, 6, 7, 8, 10], [1, 5, 6, 7, 8], [1, 5, 6, 7, 9, 10], [1, 5, 6, 7, 9], [1, 5, 6, 7, 10], [1, 5, 6, 7], [1, 5, 6, 8, 9, 10], [1, 5, 6, 8, 9], [1, 5, 6, 8, 10], [1, 5, 6, 8], [1, 5, 6, 9, 10], [1, 5, 6, 9], [1, 5, 6, 10], [1, 5, 6], [1, 5, 7, 8, 9, 10], [1, 5, 7, 8, 9], [1, 5, 7, 8, 10], [1, 5, 7, 8], [1, 5, 7, 9, 10], [1, 5, 7, 9], [1, 5, 7, 10], [1, 5, 7], [1, 5, 8, 9, 10], [1, 5, 8, 9], [1, 5, 8, 10], [1, 5, 8], [1, 5, 9, 10], [1, 5, 9], [1, 5, 10], [1, 5], [1, 6, 7, 8, 9, 10], [1, 6, 7, 8, 9], [1, 6, 7, 8, 10], [1, 6, 7, 8], [1, 6, 7, 9, 10], [1, 6, 7, 9], [1, 6, 7, 10], [1, 6, 7], [1, 6, 8, 9, 10], [1, 6, 8, 9], [1, 6, 8, 10], [1, 6, 8], [1, 6, 9, 10], [1, 6, 9], [1, 6, 10], [1, 6], [1, 7, 8, 9, 10], [1, 7, 8, 9], [1, 7, 8, 10], [1, 7, 8], [1, 7, 9, 10], [1, 7, 9], [1, 7, 10], [1, 7], [1, 8, 9, 10], [1, 8, 9], [1, 8, 10], [1, 8], [1, 9, 10], [1, 9], [1, 10], [1], [2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 10], [2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 9, 10], [2, 3, 4, 5, 6, 7, 9], [2, 3, 4, 5, 6, 7, 10], [2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 8, 9, 10], [2, 3, 4, 5, 6, 8, 9], [2, 3, 4, 5, 6, 8, 10], [2, 3, 4, 5, 6, 8], [2, 3, 4, 5, 6, 9, 10], [2, 3, 4, 5, 6, 9], [2, 3, 4, 5, 6, 10], [2, 3, 4, 5, 6], [2, 3, 4, 5, 7, 8, 9, 10], [2, 3, 4, 5, 7, 8, 9], [2, 3, 4, 5, 7, 8, 10], [2, 3, 4, 5, 7, 8], [2, 3, 4, 5, 7, 9, 10], [2, 3, 4, 5, 7, 9], [2, 3, 4, 5, 7, 10], [2, 3, 4, 5, 7], [2, 3, 4, 5, 8, 9, 10], [2, 3, 4, 5, 8, 9], [2, 3, 4, 5, 8, 10], [2, 3, 4, 5, 8], [2, 3, 4, 5, 9, 10], [2, 3, 4, 5, 9], [2, 3, 4, 5, 10], [2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9, 10], [2, 3, 4, 6, 7, 8, 9], [2, 3, 4, 6, 7, 8, 10], [2, 3, 4, 6, 7, 8], [2, 3, 4, 6, 7, 9, 10], [2, 3, 4, 6, 7, 9], [2, 3, 4, 6, 7, 10], [2, 3, 4, 6, 7], [2, 3, 4, 6, 8, 9, 10], [2, 3, 4, 6, 8, 9], [2, 3, 4, 6, 8, 10], [2, 3, 4, 6, 8], [2, 3, 4, 6, 9, 10], [2, 3, 4, 6, 9], [2, 3, 4, 6, 10], [2, 3, 4, 6], [2, 3, 4, 7, 8, 9, 10], [2, 3, 4, 7, 8, 9], [2, 3, 4, 7, 8, 10], [2, 3, 4, 7, 8], [2, 3, 4, 7, 9, 10], [2, 3, 4, 7, 9], [2, 3, 4, 7, 10], [2, 3, 4, 7], [2, 3, 4, 8, 9, 10], [2, 3, 4, 8, 9], [2, 3, 4, 8, 10], [2, 3, 4, 8], [2, 3, 4, 9, 10], [2, 3, 4, 9], [2, 3, 4, 10], [2, 3, 4], [2, 3, 5, 6, 7, 8, 9, 10], [2, 3, 5, 6, 7, 8, 9], [2, 3, 5, 6, 7, 8, 10], [2, 3, 5, 6, 7, 8], [2, 3, 5, 6, 7, 9, 10], [2, 3, 5, 6, 7, 9], [2, 3, 5, 6, 7, 10], [2, 3, 5, 6, 7], [2, 3, 5, 6, 8, 9, 10], [2, 3, 5, 6, 8, 9], [2, 3, 5, 6, 8, 10], [2, 3, 5, 6, 8], [2, 3, 5, 6, 9, 10], [2, 3, 5, 6, 9], [2, 3, 5, 6, 10], [2, 3, 5, 6], [2, 3, 5, 7, 8, 9, 10], [2, 3, 5, 7, 8, 9], [2, 3, 5, 7, 8, 10], [2, 3, 5, 7, 8], [2, 3, 5, 7, 9, 10], [2, 3, 5, 7, 9], [2, 3, 5, 7, 10], [2, 3, 5, 7], [2, 3, 5, 8, 9, 10], [2, 3, 5, 8, 9], [2, 3, 5, 8, 10], [2, 3, 5, 8], [2, 3, 5, 9, 10], [2, 3, 5, 9], [2, 3, 5, 10], [2, 3, 5], [2, 3, 6, 7, 8, 9, 10], [2, 3, 6, 7, 8, 9], [2, 3, 6, 7, 8, 10], [2, 3, 6, 7, 8], [2, 3, 6, 7, 9, 10], [2, 3, 6, 7, 9], [2, 3, 6, 7, 10], [2, 3, 6, 7], [2, 3, 6, 8, 9, 10], [2, 3, 6, 8, 9], [2, 3, 6, 8, 10], [2, 3, 6, 8], [2, 3, 6, 9, 10], [2, 3, 6, 9], [2, 3, 6, 10], [2, 3, 6], [2, 3, 7, 8, 9, 10], [2, 3, 7, 8, 9], [2, 3, 7, 8, 10], [2, 3, 7, 8], [2, 3, 7, 9, 10], [2, 3, 7, 9], [2, 3, 7, 10], [2, 3, 7], [2, 3, 8, 9, 10], [2, 3, 8, 9], [2, 3, 8, 10], [2, 3, 8], [2, 3, 9, 10], [2, 3, 9], [2, 3, 10], [2, 3], [2, 4, 5, 6, 7, 8, 9, 10], [2, 4, 5, 6, 7, 8, 9], [2, 4, 5, 6, 7, 8, 10], [2, 4, 5, 6, 7, 8], [2, 4, 5, 6, 7, 9, 10], [2, 4, 5, 6, 7, 9], [2, 4, 5, 6, 7, 10], [2, 4, 5, 6, 7], [2, 4, 5, 6, 8, 9, 10], [2, 4, 5, 6, 8, 9], [2, 4, 5, 6, 8, 10], [2, 4, 5, 6, 8], [2, 4, 5, 6, 9, 10], [2, 4, 5, 6, 9], [2, 4, 5, 6, 10], [2, 4, 5, 6], [2, 4, 5, 7, 8, 9, 10], [2, 4, 5, 7, 8, 9], [2, 4, 5, 7, 8, 10], [2, 4, 5, 7, 8], [2, 4, 5, 7, 9, 10], [2, 4, 5, 7, 9], [2, 4, 5, 7, 10], [2, 4, 5, 7], [2, 4, 5, 8, 9, 10], [2, 4, 5, 8, 9], [2, 4, 5, 8, 10], [2, 4, 5, 8], [2, 4, 5, 9, 10], [2, 4, 5, 9], [2, 4, 5, 10], [2, 4, 5], [2, 4, 6, 7, 8, 9, 10], [2, 4, 6, 7, 8, 9], [2, 4, 6, 7, 8, 10], [2, 4, 6, 7, 8], [2, 4, 6, 7, 9, 10], [2, 4, 6, 7, 9], [2, 4, 6, 7, 10], [2, 4, 6, 7], [2, 4, 6, 8, 9, 10], [2, 4, 6, 8, 9], [2, 4, 6, 8, 10], [2, 4, 6, 8], [2, 4, 6, 9, 10], [2, 4, 6, 9], [2, 4, 6, 10], [2, 4, 6], [2, 4, 7, 8, 9, 10], [2, 4, 7, 8, 9], [2, 4, 7, 8, 10], [2, 4, 7, 8], [2, 4, 7, 9, 10], [2, 4, 7, 9], [2, 4, 7, 10], [2, 4, 7], [2, 4, 8, 9, 10], [2, 4, 8, 9], [2, 4, 8, 10], [2, 4, 8], [2, 4, 9, 10], [2, 4, 9], [2, 4, 10], [2, 4], [2, 5, 6, 7, 8, 9, 10], [2, 5, 6, 7, 8, 9], [2, 5, 6, 7, 8, 10], [2, 5, 6, 7, 8], [2, 5, 6, 7, 9, 10], [2, 5, 6, 7, 9], [2, 5, 6, 7, 10], [2, 5, 6, 7], [2, 5, 6, 8, 9, 10], [2, 5, 6, 8, 9], [2, 5, 6, 8, 10], [2, 5, 6, 8], [2, 5, 6, 9, 10], [2, 5, 6, 9], [2, 5, 6, 10], [2, 5, 6], [2, 5, 7, 8, 9, 10], [2, 5, 7, 8, 9], [2, 5, 7, 8, 10], [2, 5, 7, 8], [2, 5, 7, 9, 10], [2, 5, 7, 9], [2, 5, 7, 10], [2, 5, 7], [2, 5, 8, 9, 10], [2, 5, 8, 9], [2, 5, 8, 10], [2, 5, 8], [2, 5, 9, 10], [2, 5, 9], [2, 5, 10], [2, 5], [2, 6, 7, 8, 9, 10], [2, 6, 7, 8, 9], [2, 6, 7, 8, 10], [2, 6, 7, 8], [2, 6, 7, 9, 10], [2, 6, 7, 9], [2, 6, 7, 10], [2, 6, 7], [2, 6, 8, 9, 10], [2, 6, 8, 9], [2, 6, 8, 10], [2, 6, 8], [2, 6, 9, 10], [2, 6, 9], [2, 6, 10], [2, 6], [2, 7, 8, 9, 10], [2, 7, 8, 9], [2, 7, 8, 10], [2, 7, 8], [2, 7, 9, 10], [2, 7, 9], [2, 7, 10], [2, 7], [2, 8, 9, 10], [2, 8, 9], [2, 8, 10], [2, 8], [2, 9, 10], [2, 9], [2, 10], [2], [3, 4, 5, 6, 7, 8, 9, 10], [3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 10], [3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 9, 10], [3, 4, 5, 6, 7, 9], [3, 4, 5, 6, 7, 10], [3, 4, 5, 6, 7], [3, 4, 5, 6, 8, 9, 10], [3, 4, 5, 6, 8, 9], [3, 4, 5, 6, 8, 10], [3, 4, 5, 6, 8], [3, 4, 5, 6, 9, 10], [3, 4, 5, 6, 9], [3, 4, 5, 6, 10], [3, 4, 5, 6], [3, 4, 5, 7, 8, 9, 10], [3, 4, 5, 7, 8, 9], [3, 4, 5, 7, 8, 10], [3, 4, 5, 7, 8], [3, 4, 5, 7, 9, 10], [3, 4, 5, 7, 9], [3, 4, 5, 7, 10], [3, 4, 5, 7], [3, 4, 5, 8, 9, 10], [3, 4, 5, 8, 9], [3, 4, 5, 8, 10], [3, 4, 5, 8], [3, 4, 5, 9, 10], [3, 4, 5, 9], [3, 4, 5, 10], [3, 4, 5], [3, 4, 6, 7, 8, 9, 10], [3, 4, 6, 7, 8, 9], [3, 4, 6, 7, 8, 10], [3, 4, 6, 7, 8], [3, 4, 6, 7, 9, 10], [3, 4, 6, 7, 9], [3, 4, 6, 7, 10], [3, 4, 6, 7], [3, 4, 6, 8, 9, 10], [3, 4, 6, 8, 9], [3, 4, 6, 8, 10], [3, 4, 6, 8], [3, 4, 6, 9, 10], [3, 4, 6, 9], [3, 4, 6, 10], [3, 4, 6], [3, 4, 7, 8, 9, 10], [3, 4, 7, 8, 9], [3, 4, 7, 8, 10], [3, 4, 7, 8], [3, 4, 7, 9, 10], [3, 4, 7, 9], [3, 4, 7, 10], [3, 4, 7], [3, 4, 8, 9, 10], [3, 4, 8, 9], [3, 4, 8, 10], [3, 4, 8], [3, 4, 9, 10], [3, 4, 9], [3, 4, 10], [3, 4], [3, 5, 6, 7, 8, 9, 10], [3, 5, 6, 7, 8, 9], [3, 5, 6, 7, 8, 10], [3, 5, 6, 7, 8], [3, 5, 6, 7, 9, 10], [3, 5, 6, 7, 9], [3, 5, 6, 7, 10], [3, 5, 6, 7], [3, 5, 6, 8, 9, 10], [3, 5, 6, 8, 9], [3, 5, 6, 8, 10], [3, 5, 6, 8], [3, 5, 6, 9, 10], [3, 5, 6, 9], [3, 5, 6, 10], [3, 5, 6], [3, 5, 7, 8, 9, 10], [3, 5, 7, 8, 9], [3, 5, 7, 8, 10], [3, 5, 7, 8], [3, 5, 7, 9, 10], [3, 5, 7, 9], [3, 5, 7, 10], [3, 5, 7], [3, 5, 8, 9, 10], [3, 5, 8, 9], [3, 5, 8, 10], [3, 5, 8], [3, 5, 9, 10], [3, 5, 9], [3, 5, 10], [3, 5], [3, 6, 7, 8, 9, 10], [3, 6, 7, 8, 9], [3, 6, 7, 8, 10], [3, 6, 7, 8], [3, 6, 7, 9, 10], [3, 6, 7, 9], [3, 6, 7, 10], [3, 6, 7], [3, 6, 8, 9, 10], [3, 6, 8, 9], [3, 6, 8, 10], [3, 6, 8], [3, 6, 9, 10], [3, 6, 9], [3, 6, 10], [3, 6], [3, 7, 8, 9, 10], [3, 7, 8, 9], [3, 7, 8, 10], [3, 7, 8], [3, 7, 9, 10], [3, 7, 9], [3, 7, 10], [3, 7], [3, 8, 9, 10], [3, 8, 9], [3, 8, 10], [3, 8], [3, 9, 10], [3, 9], [3, 10], [3], [4, 5, 6, 7, 8, 9, 10], [4, 5, 6, 7, 8, 9], [4, 5, 6, 7, 8, 10], [4, 5, 6, 7, 8], [4, 5, 6, 7, 9, 10], [4, 5, 6, 7, 9], [4, 5, 6, 7, 10], [4, 5, 6, 7], [4, 5, 6, 8, 9, 10], [4, 5, 6, 8, 9], [4, 5, 6, 8, 10], [4, 5, 6, 8], [4, 5, 6, 9, 10], [4, 5, 6, 9], [4, 5, 6, 10], [4, 5, 6], [4, 5, 7, 8, 9, 10], [4, 5, 7, 8, 9], [4, 5, 7, 8, 10], [4, 5, 7, 8], [4, 5, 7, 9, 10], [4, 5, 7, 9], [4, 5, 7, 10], [4, 5, 7], [4, 5, 8, 9, 10], [4, 5, 8, 9], [4, 5, 8, 10], [4, 5, 8], [4, 5, 9, 10], [4, 5, 9], [4, 5, 10], [4, 5], [4, 6, 7, 8, 9, 10], [4, 6, 7, 8, 9], [4, 6, 7, 8, 10], [4, 6, 7, 8], [4, 6, 7, 9, 10], [4, 6, 7, 9], [4, 6, 7, 10], [4, 6, 7], [4, 6, 8, 9, 10], [4, 6, 8, 9], [4, 6, 8, 10], [4, 6, 8], [4, 6, 9, 10], [4, 6, 9], [4, 6, 10], [4, 6], [4, 7, 8, 9, 10], [4, 7, 8, 9], [4, 7, 8, 10], [4, 7, 8], [4, 7, 9, 10], [4, 7, 9], [4, 7, 10], [4, 7], [4, 8, 9, 10], [4, 8, 9], [4, 8, 10], [4, 8], [4, 9, 10], [4, 9], [4, 10], [4], [5, 6, 7, 8, 9, 10], [5, 6, 7, 8, 9], [5, 6, 7, 8, 10], [5, 6, 7, 8], [5, 6, 7, 9, 10], [5, 6, 7, 9], [5, 6, 7, 10], [5, 6, 7], [5, 6, 8, 9, 10], [5, 6, 8, 9], [5, 6, 8, 10], [5, 6, 8], [5, 6, 9, 10], [5, 6, 9], [5, 6, 10], [5, 6], [5, 7, 8, 9, 10], [5, 7, 8, 9], [5, 7, 8, 10], [5, 7, 8], [5, 7, 9, 10], [5, 7, 9], [5, 7, 10], [5, 7], [5, 8, 9, 10], [5, 8, 9], [5, 8, 10], [5, 8], [5, 9, 10], [5, 9], [5, 10], [5], [6, 7, 8, 9, 10], [6, 7, 8, 9], [6, 7, 8, 10], [6, 7, 8], [6, 7, 9, 10], [6, 7, 9], [6, 7, 10], [6, 7], [6, 8, 9, 10], [6, 8, 9], [6, 8, 10], [6, 8], [6, 9, 10], [6, 9], [6, 10], [6], [7, 8, 9, 10], [7, 8, 9], [7, 8, 10], [7, 8], [7, 9, 10], [7, 9], [7, 10], [7], [8, 9, 10], [8, 9], [8, 10], [8], [9, 10], [9], [10], []] . generate_subsets(1,2,3): 0.1 seconds . generate_subsets(1-10): 0.1 seconds . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 2.0048553943634033 seconds 9227465 Time taken: 3.1625442504882812 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | Why is time and space complexity important when choosing an algorithm? | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? | . Complete the Time and Space Complexity analysis questions linked below. Practice . Written Hacks . research on types of sorting algorithms and complexity . Constant: O(1). this is very good, as our time is guarunteed to stay low. . Linear time: O(n). not as good as Constant, but better than other methods, as we are only increasing in steps by a set amount. . Logarithmic time: O( log n) not very good as O(1) and O(n), but can be useful. time grows logaritmicly. . Quadratic time: O(n^2). time is now increasing exponentially, which isn&#39;t good at all, but its not as bad as O(2^n) . Exponential time: O(2^n). very bad, steps become out of control at some values . Q: Why is time and space complexity important when choosing an algorithm? . Time and space complexity are important because programs should almost always be optimized to reduce time/space complexity. We don&#39;t want programs to be unusable because they take up too much time or use up too much of a user&#39;s cpu/memory. . Q: Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? . Constant time algorithms shouldn&#39;t always be used, as sometimes we need to use an exponential time algorithm for our programs. However, you should strive to have constant time algorithms or the shortest possible time algorithm, so that a user&#39;s experience isn&#39;t bogged down by long downtime as the program runs. The biggest problem with exponential is that the programs quickly fall apart when the inputs become too big. Otherwise, if the inputs are not that large or we have limits on our inputs, an exponential time algorithm would be fine. Sometimes, it might be too hard to optimize our programs, in which case springing for an exponential time algorithm would be neccessary, but reducing time should be something to keep in mind when developing programs. . Q: What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? . NOTICE:When your calculation is not dependent on the input size, it is a constant time complexity . NOTICE:When you have a single loop within your algorithm, it is linear time complexity . NOTICE: When the input size is reduced by half, maybe when iterating, handling recursion, or whatsoever, it is a logarithmic time complexity . NOTICE: When you have nested loops within your algorithm, meaning a loop in a loop, it is quadratic time complexity . NOTICE: When the growth rate doubles with each addition to the input, it is exponential time complexity .",
            "url": "https://jyustin.github.io/test-fastpages/2023/03/22/DS-spacey_time_complexity.html",
            "relUrl": "/2023/03/22/DS-spacey_time_complexity.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post38": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . ans . A database schema is how the database is structured and defines how all of the data in the database is organized, like defining the columns in the database for ease of access. . An identity column would be used for values that can be used to identify a object in the database. . a primary key is an identifier of a unit in the database, like user id/login info . some data types include integers, strings, booleans, basically any types can be in a table. . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection def create_table(conn, create_table_sql): &quot;&quot;&quot; create a table from the create_table_sql statement :param conn: Connection object :param create_table_sql: a CREATE TABLE statement :return: &quot;&quot;&quot; c = conn.cursor() c.execute(create_table_sql) sql_create_comments_table = &quot;&quot;&quot; CREATE TABLE IF NOT EXISTS projects ( _uid integer PRIMARY KEY, _name text NOT NULL ); &quot;&quot;&quot; create_table(conn, sql_create_comments_table) conn.commit() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . ans . a connection object would a way for user or program to connect to database . the cursor object is used to making specific connections to the database to do things like delete users. . It looks like the cursor has special functions for doing specific tasks. Cursor has functions like &quot;fetch all&quot; in its function variables . the conn object looks like the object that enables program to database connection. Conn has functions like &quot;backup&quot; in its function variables. . Results is also an object it has things in it like data in this case. . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$L8LHfgUWmUdxAhHq$b67a269b0ed673b6eaf4f23b18e727b5d3c2f4dfa538b8dc3981b63a62e5869f&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$uG7nPzUXgsO7tSoZ$ad984e4433727b27c001aa2a1041d046ec0b9124dc4348301a4054d1b14a9742&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$WKZB8UzfCZL5W6J5$22ac2a35561b01eda1508ee858d15d2d1d7172ecbc24a8883a2ee95afcfd797e&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$73Nq2XnzW9cM18Fo$efc131b5fcf7d36ba6dede2872c82efce4bca52895a7da640d59829e8461db58&#39;, &#39;1920-10-21&#39;) (6, &#39;octavia&#39;, &#39;uid&#39;, &#39;d&#39;, &#39;2020-22-22&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . ans . this create uses conn as method to connect to database and cursor to interact with it. the other create uses objects to store the user while it is being made, and uses a seperate user class to create those user objects. the 2nd implementation is a lot mroe longer and looks harder to read, while this one is more compact. However, the use of oop in the 4a example could have its uses. The 2nd might be better in long term as using objects for storing users may make troubleshooting easier in the future. . SQL Insert is different in that it is used to add new things into our database, and is purely for that purpose, while user init is used to initialize the entire database and all of it&#39;s objects, and is therefore much more important. . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . A new user record has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . ans . the hacked part makes it so that the user&#39;s password becomes a different one if they set it to be too short, probably to ensure users set protective passwords. . the try and except is used so that one thing occurs, except for when another thing would happen. the except occurs when theres an error with executing sqlite commands or accessing the database. . the conn and cursor are repeated each time, probably because these are neccessary for each function to operate. . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . ans . Delete could potentially be dangerous as without a verification system for it, users could accidentally delete others accounts. . I think that the f allows us to print the {uid} in the print, and the {uid} is used to allow us to print the uid the users inputted, although im not entirely sure. . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . ans . the menu repeats because the end of the conditional statement causes the statement to run again. it does break when the program detects a certain input. . the menu could be refactored with a list maybe, if we used key-value pairs, but we would still have to use if statements. a for loop might work as well however. . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$L8LHfgUWmUdxAhHq$b67a269b0ed673b6eaf4f23b18e727b5d3c2f4dfa538b8dc3981b63a62e5869f&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$uG7nPzUXgsO7tSoZ$ad984e4433727b27c001aa2a1041d046ec0b9124dc4348301a4054d1b14a9742&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$WKZB8UzfCZL5W6J5$22ac2a35561b01eda1508ee858d15d2d1d7172ecbc24a8883a2ee95afcfd797e&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$73Nq2XnzW9cM18Fo$efc131b5fcf7d36ba6dede2872c82efce4bca52895a7da640d59829e8461db58&#39;, &#39;1920-10-21&#39;) (6, &#39;octavia&#39;, &#39;uid&#39;, &#39;d&#39;, &#39;2020-22-22&#39;) (7, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation . procedural abstraction . this is when we define code blocks or procedures with named variables for specfic usage. with this implementation, specifically in the create function, we have a create function, which we can call upon in our menu code block for whenever we need to make a new user. . DATA ABSTRACTION EXAMPLE WITH DEBUGGING IN 2.4b . . when debugging the first code block in this file, we can see an example of data abstraction in the conn variable. This conn variable does data abstraction by storing a bunch of different functions in it for the user to use. this is seen in the 2nd image, when we create a cursor object by using the cursor method of conn. this data abstraction is occuring in that conn hides a bunch of important methods and functions from the programmer/user, so that the user can use the methods in sqlite without having a bunch of different methods to sort through. . score .",
            "url": "https://jyustin.github.io/test-fastpages/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post39": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) # this code is supposed to grab your database and open it. # the flask object creates all of the classes and stores them # the SQLAlchemy db object essentially serves as a point of interaction for our project, storing all of our variables and information. . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL # class User builds the users in the database class User(db.Model): # by inheiriting db.Model, we can inheirit the variables and data associated with it, and thus the program can run __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): # this just runs the getters and setters and initializes the database classes/objects self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object # the getters are the read part of CRUD @property # this is used to give special functions like setters, getters, and CRUD functions when defining class properties def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object SETTERS are the read part of crud @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation # the setters are the create part of CRUD @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.add(self) # performs update when id exists n&quot;, db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): # this function is where you would add your users/objects in the data table, and is used to fill table with data. with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: # this creates the user objects try: # try and except used to prevent duplicates/errors from spilling into the database &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Records exist uid indi, or error. Records exist uid raven, or error. . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() # User.query.filter_by is used to find and single out a object in our database for interaction or password verification in this instance return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): # used to verify password associated with user in the database return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) # if uid exists, it prints out that user&#39;s id exists, then lets you send user to database if uid does not exist. try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, # create user from user inputs, awaits dob to be added. uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: # the try except adds actual dob to the user, otherwise date defaults to present date user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() #convert the user input to an actual date and not just a string except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: # try except creates user if try works, otherwise prints error and no user is added object = user.create() # create the user in the database with the previous function and our new inputs print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) #create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() # User.query.all() is used to query or gather all of the user objects in the database table and query them for interaction/read function json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list # list comprehension creates a list using existing lists return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;UPDATING :)&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;e&#39;, &#39;uid&#39;: &#39;o&#39;, &#39;dob&#39;: &#39;01-12-2022&#39;, &#39;age&#39;: 1}, {&#39;id&#39;: 9, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;&#39;, &#39;dob&#39;: &#39;03-19-2023&#39;, &#39;age&#39;: 0}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . def update(): uid = input(&quot;Enter your user id for update:&quot;) user = find_by_uid(uid) # if uid exists, it prints out that user&#39;s id exists. shows you which user is deleted print(&quot;Found n&quot;, user.read()) name = input(&quot;Enter your name:&quot;) with app.app_context(): user._name = name db.session.add(user) db.session.commit() print(&quot;success!&quot;) # delete functionality def userDelete(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id for deletion:&quot;) user = find_by_uid(uid) # if uid exists, it prints out that user&#39;s id exists. shows you which user is deleted print(&quot;Found n&quot;, user.read()) with app.app_context(): (&quot;deletion successful&quot;) db.session.delete(user) db.session.commit() userDelete() #update() . Found {&#39;id&#39;: 1, &#39;name&#39;: &#39;changed&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176} .",
            "url": "https://jyustin.github.io/test-fastpages/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post40": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;online&quot;, &#39;label&#39;: &quot;smile face&quot;, &#39;file&#39;: &quot;smileyforpts.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . NOTES for above code . this code works using libraries to pull images from our folder with all of our images and display them using built in procedures from the libraries we import. The path of the images is important because without the defined path, our program does not know where to pull these images from. . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Notes 2 . this code uses functions built using the libraries shown earlier to modify the images above, instad of just displaying them. For example, the scale_image function is used to scale up the images and scales it up/down depending on the value was set. If I wanted to use these libraries I would probably look at documentation, but that takes time, and I don&#39;t think that will help me on the CB test. . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . NOTES 3 . The difference between these 2 code blocks is how the are built. this code-block is built using object oriented programming, while the other does not. With this code block, the image metadata like it&#39;s filename or the basewidth are stored in objects, . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . HACKS PT 1: converting color of img using a function . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() self._html_pink = self.image_to_html_pink() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey @property def html_pink(self): return self._html_pink # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # new function to convert to pink def image_to_html_pink(self): img_pink = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array pink_data = [] # key/value for data converted to pink scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) * 0 # convert pixels to neutral color (white?) if len(pixel) &gt; 3: pink_data.append((average + 222, average + 165, average + 164, pixel[3])) # change to pink else: pink_data.append((average, average, average)) img_pink.putdata(pink_data) return self.image_to_html(img_pink) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print(&quot; pink image &quot;) display(HTML(ido.html_pink)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . pink image . .",
            "url": "https://jyustin.github.io/test-fastpages/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post41": {
            "title": "MCQ Midterm 3 score and review/reflection 3333333",
            "content": "score . . question 1 . . I got this problem wrong because I didn’t consider that although malicious links can be posted to the database, the system doesn’t really interact with these links to be harmed by them. the more realistic answer that could reasonably happen would be unauthorized access to the database, which is more realistic and makes sense. I just didn’ think this one through enough. . question 2 . . I got this problem wrong because I assumed that a database would ensure that information is more secure, but really that is up to the level of cybersecurity that is given to this database. The answer that makes more sense is the 1st one about helping the company to ensure they make the right decisions, because that one is guarunteed by the database, and is not a theoretical benefit from having databases. . question 3 . . With this problem, I simply rushed through it and didn’t think it through. removing the last 4 instead of the last 2 characters makes sense, as we want the letters between the characters between the removed first 2 and last 2 characters. I guess I didn’t think this through enough and just picked 2 because it looked like it made more sense than removing 4 characters from the end. . question 4 . . For this problem, I think that what I did was I didn’t take the time to compare option C and D and see why these were different. I think I picked C because I missed the NOT part after the motion sensor check. If I had just looked at all of the options thoroughly and thought about why C was better than the other options, I may have noticed the not part and then known that D was the answer I was really after. . question 5 . . I got this one wrong because I didn’t consider all of the possibilities for when submitting values into the algorithm. I guess sudo-code reading is still something I could work on, although I still need to mentally think about each possible input when reading these algorithms, which takes a while. I think I just need to work on mentally considering all possibilitys of an algorithm or which scenarios in which an algorithm fails. . question 6 . . I for some reason thought that the if statement would be fulfilled when running through the algorithm in my head. It should be 3 because the if statement goes into the else and then because y is greater than 3, three is displayed. I guess I need to be more careful when I’m reading sudo code and testing inputs in my head. . question 7 . . I got this one wrong because I only considered the raw number of steps being taken, when I should have also taken into consideration how the steps for each algorithm are increasing. then, I would have seen how algorithm B would dramatically increase in steps. I was just not thinking about this problem enough. . final reflection . I think that the biggest problem for me is that I either skim over questions and miss important details, or I spend too much time testing each possible value on certain problems when the answer shouldn’t be that hard to find. More experience doing practice problems and tests would probably help me get better at quickly reading sudo code, then seeing where errors lie, and then picking the right answer, because those are the most time consuming problems I have right now. .",
            "url": "https://jyustin.github.io/test-fastpages/collegeboard/week%2010/2023/03/06/MCQTEST3.html",
            "relUrl": "/collegeboard/week%2010/2023/03/06/MCQTEST3.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post42": {
            "title": "performance task example scoring",
            "content": "program 1 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 0 | the video does demonstrate program input and program output. the purpose of the program does align with what is demonstrated in the video. I can tell what the purpose of this program is from the response and the video. | . data abstraction | 1 | 1 | 2 program code segments exist. these code segments do help show how lists and data is being stored and used for this program. lastly, the list is more than 1 element and the list is needed for this program. | . Managing complexity | 0 | 0 | although code segments are available, there is no explanation for why a list is needed for this program to exist and therefore no point shall be awarded. | . procedural abstraction | 1 | 1 | the procedure is student developed and the parameters are explicitly listed, and there is an explanation for how this procedure relates to the program, all requirements are met. | . algorithm implementation | 0 | 1 | the algorithm is thoroughly explained and I could recreate it from the description, but I don&#39;t feel like how the algorithm is implemented in the whole program as a whole is not thoroughly described. | . testing | 1 | 1 | the program is testred with different parameters and the outputs are different and look correct. | . program 2 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | the program purpose is described and the video does align with the program. | . data abstraction | 1 | 1 | a list is used in the program and an explanation for said list is given. | . Managing complexity | 1 | 1 | the named list not only manages complexity but how its managment of complexity is required for the program to run is provided. | . procedural abstraction | 1 | 1 | the procedure is explained thoroughly and is student developed. additionally, the parameters for the procedure are designated and named. | . algorithm implementation | 1 | 1 | iteration, sequencing, and selection are all explained and used in this algorithm described. the description of the algorithm is thorough and I could easily recreate what has been described in my own code. | . testing | 1 | 1 | testing is done with different parameters and how the procedures from earlier relate to the testing is explained in this part. | .",
            "url": "https://jyustin.github.io/test-fastpages/performance_task/2023/02/25/performance_scoring.html",
            "relUrl": "/performance_task/2023/02/25/performance_scoring.html",
            "date": " • Feb 25, 2023"
        }
        
    
  
    
        ,"post43": {
            "title": "frontend coding hacks 1/15",
            "content": "hacks below . letter 1: . store . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; .",
            "url": "https://jyustin.github.io/test-fastpages/performancetask/2023/02/25/fronty.html",
            "relUrl": "/performancetask/2023/02/25/fronty.html",
            "date": " • Feb 25, 2023"
        }
        
    
  
    
        ,"post44": {
            "title": "CPT written portion draft 1",
            "content": "CPT update plan . https://drive.google.com/file/d/1d12qmkb7IQrarIoGJ7_nBNXBZIdNL4sF/view?usp=sharing (video) . https://docs.google.com/document/d/13aIZmeuO3wTPZ5D1m2xYUZZ7k5pqVKPilzyFYey-YF0/edit?usp=sharing (writeup) . Plan overview . look at CPT written portion and double check everything is up to snuff. Might need to make the project look a little nicer, although im sure that isn’t necessary for 6/6 for CPT grading. Biggest concern is missing something small and getting a whole point or so lost, so reviewing rubric and ensuring everything fulfills the categories is the next step I think. . My CPT project should be done when I improve upon my writeup and maybe add some more usage of sequencing, selection, or iteration. . planned new features . Improving upon the usage of sequencing is something to work towards, as right now the importance of sequencing in my CPT project is debateable. I also think I need to rewrite parts of my written portion, as some feel like they fall short or don’t explain the topic as well as it should. .",
            "url": "https://jyustin.github.io/test-fastpages/collegeboard/2023/01/25/CPTdraft1.html",
            "relUrl": "/collegeboard/2023/01/25/CPTdraft1.html",
            "date": " • Jan 25, 2023"
        }
        
    
  
    
        ,"post45": {
            "title": "some stuff from1/24/23",
            "content": "AMONG US . Use database preferablly fortables i guess . interact with database . add/delete from database . login/user create is needed but not enough . search bar a good idea . scrumboard/ organize ideas for points i thinkk . defined purpose/ function good idea. .",
            "url": "https://jyustin.github.io/test-fastpages/2023/01/24/notesforjan24.html",
            "relUrl": "/2023/01/24/notesforjan24.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post46": {
            "title": "CSP discussions",
            "content": "5.1 questions . 1: Come up with three of your own Beneficial and corresponding Harmful Effects of Computing . Computing has created many powerful advancements in technology that would have been impossible without computing. The Worldwide Web and email are just 2 different developments only possible by computing that have completely changed our lives. however, theses new developments come with positives and negatives. The worldwide web, while being able to spread information and make knowledge more accessible, also puts this same info in the hands of anyone who would use this information for immoral tasks. Drones can be used for entertainment or to take breathtaking picutres, or could be used for warfare or invasions of privacy. Videogames can create unforgettable experiences and bring people from different parts of the world together, but can also become an obsession or cause a divide between reality and virtual world. basically not all developments are completely black and white. . 2: Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? . Dopamine and getting it from phones and games can definetly spiral into a problem without any self control. People can definetly become addicted to getting dopamine from social media/games and spend way more time on these things than they really should. I know because I have sometimes found myself being too immersed in a game and forgetting that I have a life outside of it. But i haven’t let it become a huge problem. . 5.2 questions . How does someone empower themself in a digital world? . My ANS: You can empower yourself in a digital world by using knowledge found from the internet to help you make informed decisions or to inform you on current world problems so that you can discuss them. You could also empower yourself by finding other people who share your beliefs or hobbies and learning from them. . How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. . My ANS: people who are empowered can help others who are not empowered by giving them confidence in themselves and showing them that there is some truth to whatever ideas or decisions they made or want to make. I can empower people at DNHS by giving compliments or showing people that I care about their endeavors and that whatever they have accomplished is impressive or meaningful. I know I would feel more empowered in my COMP SCI class if i was reaffirmed that the work I made is high quality or is teaching me something beneficial. . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? . My ANS: I believe that paper is only a minor block to digital empowerment as there aren’t many differences between using paper or a computer for doing work. However I think that “red tape” and an excessive desire to control and regulate technology by the school is heavily interferring with empowerment at DNHS and learning via technology as a whole at this school. The schools’s firewall is incredibly opressive and could be compared to chinese censorship with the amount of banning and problems it has caused. Educational content or even stuff in comp sci like accessing AWS last tri were blocked by the firewall last year, and I feel like it heavily impacted the potental for digital empowerment at DNHS. In general, censorship by governments is the biggest roadblock to digital empowerment, as it prevents certain people from metting others and getting empowered from people online. . extra questions 1 . Q 1: Think of three beneficial effects of your projects based on 5.1 Unit: . ANS: One of the benefits of our news project is that users will be able to get reliable and unbiased news if we are able to implement a filter for biased news. This would be helpful for people who want to filter out the opinions in news and get the straight facts. . Another benefit will be that users will be able to gain some neat information they might want through the use of the sports feature or the educational feature, which differs from traditional news sites which give primarily news and not much else. . Lastly, our project will be able to provide credible news sites to users if we are able to implement the filter feature, since getting reliable news is becoming more and more difficult by the day. . Q 2: Think of a potential harmful effect of your project. . ANS: One harmful effect of our project could be that we may end up accidentally spreading harmful or biased news on our site if our algorithm for filtering news is not completely working, which would tarnish our reputation and would be misinforming users. . Q 3: Answer with an opinion and learnings so far this year: What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? . ANS: Internet blockers at school only serve to prevent students from abusing the internet and using it to look up bad content. Even this is a problem because the blockers usually are unreliable and will block sites that have no reason to be blocked. Another con of the blocker is that it installs certain addons on chrome when students log into chrome on their laptop through their school accounts. These addons, while being able to filter out more bad content, are also an intrusion of privacy and i’m sure it’s only a matter of time before they are hacked and all of our data is stolen. Lastly, im sure that they cause the wifi to be unreliable, as I am constantly disconnecting from school wifi, yet I never randomly disconnect from other wifis. I hope that you (the teachers) will hopefully find a way to convince the school to either remove the blockers or invest more money in a better I.T department. . Q 4: What concerns do you have personally about the digital divide? For yourself or for others. . ANS: I am mainly concerned about the digital divide for others, and how it makes it so that those who can’t get their hands on good tech will be disadvantaged. Without a laptop, I find it hard to believe that any student could have the potential to succeed or have nearly as much potential as those who did have access to those resources. Hopefully providing tech to those who need it will become more of a priority, as a laptop in the right hands could bring people out of poverty. . 5.3 Computing Bias questions . My thoughts: . I think that most bias generated by Computing and algorithms are made unintentionally or for profit. in the profit instance, the bias are made so that users will be swayed to purchase or give money to a company. These biases are made through the use of targeted ads and skewing results to user information. These “for profit” biases made through algorithms cause people to use their money on things that they really don’t need to spend money on, but are mostly harmless. . unintentional bias can be generated by computing/algorithms when these algorithms cause people’s feeds of information and how their getting their info to become skewed to a side. An example of this would be youtube giving users conservative-sided videos when those users become interested in that side, causing that user to be only exposed to that political side and them to not be given videos that are actually true. . I think that the best way to avoid biases in our project will be to ensure that we have filters for our news that are thoroughly tested and are well equipped to block out biased news, seeing that our project would have nothing special about it if it was a biased news site like every other news site. We could also make sure that our news site brings in news from all different viewpoints to ensure that this project isn’t unintentionally being skewed to a certain side/viewpoint. . 5.4 Computing Bias questions . 1.CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? . ANS: A crowdsource idea that I might be able to initiate for this enviorment could be a simple site that allows Comp Sci students to give their opinions on the course and basically help the teachers improve the curiccullum. This could be done using a site that allows users to submit reviews of the Comp Sci course to this site, and then the teachers can view this info later to improve the curriculum. . 2.What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? . ANS: Implementing crowdsourcing in Del Norte could be done through volunteering or with an easily accessible site. My idea is to have a club that starts projects that people can join and contribute to, perhaps for example, a project to add a chalkboard to a wall in the school could be started, and then crowdsourced to students so that they can contribute to the creation of this project. Our Project can be better with crowdsourcing if we crowdsource our news database to users and allow users to add credible news to the site, as a way to basically keep the news feed fresh. Crowdsourcing the news feed would also ensure that our news feed would have a variety of news from many different people’s perspectives. However, It would be hard to moderate this and ensure that no one desiced to add bad news to our . 3.What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. . ANS: I already stated an idea for crowdsourcing earlier but I could create another page on our project that would allow visitors of our project to log reviews of our project. That way, we can get feedback from users and see what we need to work on in our Comp Sci skillset. Capturing user feedback and their experience with our project would be interesting to see as we would be able to see the appeal of our project to regular people who have lives, and we would be able to know how much use our project would have in the real world. . 5.5 Legal and Ethical concerns questions/notes . -each different license of a program or work wil determine how others can use the work and whether or not you can use it without citing an author or paying something up. . The following are all OPEN SOURCE licenses: . Creative Commons Zero v1.0 Universal license ensures that the work is in public domain and anyone can use it . Open Source MIT License allows the code you have made to be used by others, including allowing people to distribute closed source versions. of closed source versions. you may need to cite author though. . Open Source GPL License ensures people can do almost anything they want with your project, except distributing closed source versions. . Open source licenses ensure that when users want to open up their projects to the public, their works are worked with exactly how the author intends. Although this license stuff isn’t too applicable to what we are working with now, it certainly is applicable to companies or for profit buisnesses who may be breaking open source licenses. . For my personal blog, I would use an Open Source MIT License. This is because I want people to be able to use my blogs and code to help themselves, but I also want to be credited so that I can build myself a reputation. I want the credit for my work so that people don’t steal my works and claim it as theirs. Hopefully people will use my blog as a guide or something and I can be credited for making the works. . For the entire team repository, I think that a MIT license would be good because I am ok with others taking our frontend and using how they want with credit to us. It doesn’t matter much if they are copying our project as the code we are putting on frontend isn’t really too valuable. On the other hand, the Backend code should be under the Open Source GPL License, because I think our backend code has more value and I don’t really want people to copy and redistribute our backend code. . 5.6 Safe Computing questions . Describe PII you have seen on project in CompSci Principles. | In our project, user usernames and emails used to sign up would be PII that would be known by everyone, and not to secretive. On the other hand, password would be PII that we would need to keep absolutely secret, as other people should not be able to log into another person’s account. . What are your feelings about PII and your personal exposure? | I feel like PII should be handled carefully online and that you should keep as little PII on the internet as possible. the more PII you have on the internet shared with others, the easier it is for people to use that information for malicious stuff. You could be targeted by scams or spam if you have thrown out too much PII online. . Describe good and bad passwords? What is another step that is used to assist in authentication. | A good password would be something with variety and is hard for the average person to determine. Something like I8#FoUrL0ive would be very hard for someone to just type in and hope to work. technology used to crack passwords would also struggle with this. Something like 12345 or abcde would be a stupid password as it has no variety and any AI could solve for this password in a few seconds. A step that is used to assist in authenticaton is 2-factor Authentication, which ensures that even if someone cracked the password, it will still be hard to log in. . Try to describe Symmetric and Asymmetric encryption. | Symmetric encryption is a form of encryption where only a single key would be used for encryption and decryption of data like passwords. . With Asymmetric encryption, there are 2 keys used for encryption of decryption. Theres a public key, probably for other people to use, and private key that would need to be used in combination with the public key probably for access to the account. (Not to sure about this) . Provide an example of encryption we used in AWS deployment. | If I remember, our teams had some kind of encryption key included in our AWS deployment. Our security keys and important things in our AWS deployment were kept encrpyted, and I think that we got a key that we would use to decrpyt the data. so we had a key for encryption and decryption. . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. | I have never been scammed out of money/information by Phishing scams, but I may have come close. I saw an offer on offerup that was clearly too good to be true, but I kind of fell for it and entered a chat with them in texts where I was asked for a paypal payment. I instantly knew it was a scam afterwards and blocked all contact with them. I also know that I have seen scams like “you have won a phone” or something, but I am smarter now and know that if it is too good to be true, it is. .",
            "url": "https://jyustin.github.io/test-fastpages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post47": {
            "title": "performance task 3 scoring",
            "content": "submission 1 . my score AP score my reasoning . 1 | 1 | program purpose and functionality is described. program functionality is also completely demonstrated in the video. | . 1 | 0 | a list is used for the program and it not only has multiple elements but also makes the program more compact/better. | . 1 | 0 | the list is explained as managing complexity and the use of the list does help. | . 0 | 0 | Although the user developed procedure is shown, I don’t see how this function is called throughout the entire program nor its overall functionality in the whole program. | . 0 | 1 | I don’t see how sequencing is used in the algorithm and therefore a point cannot be awarded. | . 1 | 1 | the algorithm recieves inputs and the outputs are what is expected. overall testing is correct and everything is there. | . reflection . my problems in this case were that I skimmed over some minor parts of sections of the CB rubric that caused points to be docked. It’s really important that all parts of the CB rubric are met for each case, as any one thing being skipped means that a point is instantly lost. basically, studying the CB rubric is especially important when writing the written portion out. . submission 2 . my score AP score my reasoning . 1 | 1 | program functionality is demonstrated in the video. program purpose is described in the written section and input+output is shown. | . 0 | 1 | an explanation for how the list takes in data and uses it is not present, therefore no point can be awarded. | . 0 | 1 | an explanation for how this list manages complexity and stores data is not present, no point can be awarded. | . 1 | 1 | a student developed procedure with parameters exists and it does contribute to the functionality of the program. | . 1 | 1 | iteration, selection, and sequencing are all used in the procedure and are explained. the procedure is also thoroughly explained. | . 0 | 1 | the procedure used is not identified so therefore no point can be awarded. | . reflection . It’s not just the explanation that determines if your code will meet the requirements, but the code segemnts themselves also determine how your graded. I mistakingly deducted points for the submission not having any explanations for certain things, but now I see that you could leave a few things out of written explanation if you have it in codebase (but still keep written descriptive) . submission 3 . my score AP score my reasoning . 1 | 1 | the program purpose and it’s functionality are shown in the video, and are talked about in written portion. nothing missing. | . 0 | 0 | I don’t see any defined list that stores or uses data so no point can be given. | . 0 | 0 | Since I don’t see any list they are talking about I can’t give a point. there is no truly defined solution without lists as well. | . 0 | 0 | there are no defined parameters for the function so no point can be given. | . 0 | 0 | I don’t see any use of iteration in the function so no point can be given. | . 0 | 0 | there are no specific arguments that are being passed in during testing, only certain conditions, so no point is given. | . reflection . when doing my CB Performance task, I should make sure to remember to go through the requirements for row 4 and 5 before developing the main function, in order to ensure that I don’t accidentally leave anything out that would cause me to lose points. Losing points on small things looks like a common trend, and I don’t want that to happen to me. . submission 4 . score CB score reasoning . 1 | 1 | the program purpose as well as it’s inputs and outputs are described and do exist. | . 1 | 1 | a list with the ability to store data and use it exists, and it contributes to the overall program. | . 1 | 1 | the list does manage complexity and a solution without the list is not only plausible but exists. | . 1 | 1 | a student developed procedure exists and it does take in parameters and is called in the 2nd code segment. | . 1 | 1 | sequencing, selection, and iteration are all used in the procedure. the procedure is also thoroughly explained so that I could rebuild it. | . 1 | 0 | there are different calls passed through the procedure that give different outputs. the outputs are also the expected ones. | . reflection . I think that I am doing better on knowing how College Board will grade my performance task. I was tripped up on the last section however, as I wasn’t thorough enough in my grading. When I do my CB performance task, I should refer back to the performance task I graded with full marks and compare mine to theirs, to see if my performance task will get full credit. . FINAL REFLECTION . although it looks like you could leave out some things from the written part and still get points if you have them in your code, I am going to make sure that my writen sections goes over each requirement of the CBPT rubric to ensure that I know whether or not my performance task will get full credit. additionally, I will need to be sure that I am constantly referring to the rubric when I am coding my task, so that I don’t accidentally leave anything out. I think that the hardest part of this will be making sure I am hitting all of the small requirements, not the actual project itself. .",
            "url": "https://jyustin.github.io/test-fastpages/frontend/performancetask",
            "relUrl": "/frontend/performancetask",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post48": {
            "title": "performance task 2 scoring",
            "content": "Submission 1 . my score AP score my reasoning . 0 | 0 | the program purpose described is just the functionality of the program | . 0 | 0 | the purpose of the 2 lists isn’t very in depth. there is no description of how this data in the list is used. | . 0 | 0 | the explanations are very shallow. also the use of both of the lists is never thoroughly explained. what does the 2nd list do? | . 1 | 0 | the code segment is talked about and is developed by the student. its functionality and its relation to the overall program is talked about. | . 0 | 0 | I don’t think that the algorithm completely utilizes sequencing, selection, and iteration. therefore the point can’t be awarded. | . 1 | 1 | the results from the testing and calls look accurate and nothing repeats nor are unintended results present. | . Reflection . What I learned from grading this submission is that you need to be thorough with your project to ensure that most of the requirements are met. I also realized that the performance task I make can be made in outside coding sites like code.org or even scratch I think, so if my ideas are really hard to code or I struggle with syntax, I could potentially code my project in an ide with simple code blocks. lastly, I thik its important that my performance task has a defined function and reason for existing, so I don’t miss the first 2 points. . submission 2 . my score AP score my reasoning . 1 | 1 | functionality of the program is shown and it aligns with the purpose of the program, which is good. | . 1 | 1 | 2 code segments described and the data being stored as well as it’s use is described thoroughly. | . 1 | 1 | the use of the list is described as being integral to the code segment and making it run as well as possible. solution without list is also plausible. | . 1 | 1 | a student written procedure as well as it’s relation to the entire program is described. the procedure looks well developed and looks like it has large contribution to the entire codebase. | . 1 | 1 | the description of the algorithm includes good use of CB vocabulary, and I could easily tell how the procedure works in conjunction with the entire program. | . 1 | 1 | 2 calls are described and the results of the tests are expected outcomes. the procedure before is also described. | . reflection . For my performance task, I should make sure that the algorithm I make is entirely student developed and that I completely understand how it functions, otherwise I will lose points for not completely describing the algorithm I make and how I describe it. Also, I should make sure to use College board vocabulary like iteration in my description of the algorithm so I know that my algorithm contains all of those neccessary requirements. . submission 3 . my score AP score my reasoning . 1 | 0 | the programs functionality is described and user input as well as output is shown. | . 1 | 1 | the program has a multiple element list that contributes to the functionality of the program. 2 code segments are also shown. | . 1 | 1 | functionality of the lists and how they relate to the entire program, as well as how the list not only simplifies things but also another solution if lists were not availible are described. | . 1 | 1 | parameters described are explicit. also an algorithm and its usage in the program is described. | . 0 | 1 | although the functions from earlier are described, the names of the functions and how they are called isn’t explicitly shown. how the algorithm works is described though. | . 1 | 1 | different parameters are described and the algorithm being used is also described. the results from the testing are also in line with the inputs passed in. | . reflection . What I learned is that program purpose is especially important and that getting program function and program purpose is a mistake that someone could easily make. . program functionality “is The behavior of a program during execution and is often described by how a user interacts with it” . program purpose is “The problem being solved or creative interest being pursued through the program” . college board vocab is vital to this!!!!! . submission 4 . my score AP score my reasoning . 1 | 1 | program functionality and purpose are described but are kind of hard to tell. user input and output + program functionality are described. | . 1 | 0 | the solution for not having lists feels a little cheap, but technically the list does have purpose and the list does assist with the overall program. | . 1 | 0 | the use of a list is relevant and is described. also an explanation for how the list works with the entire program is also described. | . 0 | 1 | the specific algorithm/procedure is talked about and its overall relation to the entire program is described, but I don’t think any specific parameters are mentioned. | . 1 | 1 | the way the algorithm works is described enough so I could build it myself, and the use of selection/iteration is mentioned | . 0 | 0 | the testing does not mention any algorithms that test the users input. it isn’t up to standard. needs to mention how it works. | . reflection . I think that I didn’t pay enough attention to all of the details of the submission and how they fit into the overall rubric. I should remember to specify how the inputs im putting into the program during testing work with the algorithm, to ensure that I don’t lose points on simply testing the program. . overall reflection . I think that I was a little too leniant on my grading and didn’t notice obvious point deductions. In order to avoid not being docked points for my Performance task, I will remember to double check that my work fits college board criteria, as well as review and use college board vocab to ensure that my written portion is thorough enough to get enough points. . My program will need a list with multiple elements that uses data for certain things and manages complexity a well defined function and purpose, an algorithm that plays an integral role in the program’s function and uses iteration, sequencing, and selection, and well defined user inputs and outputs. .",
            "url": "https://jyustin.github.io/test-fastpages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jan 13, 2023"
        }
        
    
  
    
        ,"post49": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . ModuleNotFoundError Traceback (most recent call last) /home/id/vscode/test-fastpages/_notebooks/2023-01-10-PBL-model.ipynb Cell 4 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; # A gateway in necessary as a web server cannot communicate directly with Python. &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; # In this case, imports are focused on generating hash code to protect passwords. -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; from werkzeug.security import generate_password_hash, check_password_hash &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; import json &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; # Define a User Class/Template &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/id/vscode/test-fastpages/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; # -- A User represents the data we want to manage ModuleNotFoundError: No module named &#39;werkzeug&#39; . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date class dateu: def __init__(self, dob, classOf, age): self._dob = dob self._classOf = classOf self._age = age @property # getter def dob(self): return self._dob @dob.setter def dob(self, dob): self._dob = dob @property # getter for classOf def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classof = classOf @property # getter for age def age(self): return self._age dobclassOf = date(2006, 11, 15) date1 = dateu(dob=date(2006, 11, 15), classOf=dobclassOf, age=dobclassOf) date2 = dateu(dob=date(2008, 7, 12), classOf=dobclassOf, age=dobclassOf) dates = [date1, date2] a = date.today() print(&quot;date of birth&quot;, date1.dob) print(&quot;year of graduation&quot;, (date1.classOf.year + 18)) print(&quot;age:&quot;, a.year - date1.age.year) def tester(date1): for i in dates: result = i.dob print(result) tester(dates) . date of birth 2006-11-15 year of graduation 2024 age: 17 2006-11-15 2008-07-12 . class data: def __init__(self, score): self._score = score @property # getter def score(self): return self._score @score.setter def score(self, score): self._score = score if __name__ == &quot;__main__&quot;: u1 = data(score=100) print(u1._score) . 100 .",
            "url": "https://jyustin.github.io/test-fastpages/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post50": {
            "title": "compsci technical buisness panel notes",
            "content": "Panel presented by: . Kathyleen Beveridge . Kris Porter . Kevin Warmerdam . helpful advice / notes . tech company mission statements: . HP INC mission statement: “create technology that makes life better for everyone, everywhere” . Qualcomm: inventing tech the world loves . Thermo fisher scientific: Enable our customers to make the world safer and cleaner . Working with others and is a important skill to have in CSP. . Kris porter did research on embedded networked sensors, which introduced him to things like linux and software development life cycle. . From a professional dev ops: dev ops are there to ensure that the release of websites or software are secure and everything works well. . success in the stem field comes with experience in the field . Continuous learning . developed twitter project like datacenter. . different companies have own definition of agile methodology. planning a large roadmap was done at qualcomm before projects. . working “agile” is important in current stem world. . start looking for other job when companies switch owners and such. . continuous learning and learning how to learn/ adapt to things is very useful in stem. . job interviews for tech companies are a massive hurdle to overcome in the stem field. . companies vary from having good workspace to being a “bad” enviorment. enviorments in companies often vary, its usually based on the user. . coding skills creates a good “problem solving” and critical thinking mindset. being a good problem solver and being able to use critical thinking is vital in the tech field. . Don’t be concerned about the news . final focus / what I learned . from this guest speaker event I learned that working with others and communicating are very important skills in the STEM field to have. . I also learned that continued learning and constantly pursuing more knowledge of programming and tech is very important to not only succeeding in the STEM workplace but also keeping motivation and drive to work in the STEM field. . knowing how to “learn” and adapt to problems is another skill that would be helpful to have in computer science. . I also learned that learning problem solving skills and critical thinking skills are a benefit of learning to code that helps out a lot both in the STEM field and in other jobs. . Lastly, I learned that agile methodology and planning are huge parts of projects in Stem and software development that should not be disregarded. . .",
            "url": "https://jyustin.github.io/test-fastpages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "3.16 hacks and notes",
            "content": "notes . Simulation: this is a way to simulate a real world enviroment. consider random, biases, and if a simulation is worth it before developing one. . HINT: Simulations are useful because they are safe, inexpensive, repeatable, and accurately model how something would be in the real world. . HINT: when making a simulation you should consider: Removing details, which could be done using pseudo-random number generators,Using other ideas from previous college board lessons; like procedure, flowcharts and conditionals . hacks . Question Answer . Name(First+Last) | Justin Nguyen | . 1 | none | . 2 | none | . 3 | A ; B and C are true | . 4 | B ; other aircraft are most important for this type of simulation. weather + aircraft imperfections are least important. | . 5 | C ; both experiments and simulations need to consider what their purpose is | . 6 | A ; simulating a car crash would cost less and you can&#39;t calculate how a car crash would work irl | . 7 | A ; an experiment on greenhouse gases would be dangerous to the enviorment. also would be hard to control. | . 8 | none | . 9 | B ; we are not simulating anything. we are just doing a simple calculation. | . extra . import random rolls = 4 # alter to determine amount of dice rolls total = 0 i = 0 while rolls != 0: # rolls dice for number of rolls diceroll = random.randint(1,6) # the dice roll. change the &quot;6&quot; to how many sides on the dice you want i = i + 1 print(&quot;roll&quot;, i, &quot;is a &quot;, diceroll, &quot;!&quot;) total = total + diceroll rolls = rolls - 1 print(&quot;total of dice rolls:&quot;, total) . roll 1 is a 1 ! roll 2 is a 5 ! roll 3 is a 4 ! roll 4 is a 1 ! total of dice rolls: 11 . This is a dice roll simulation that simulates a 6 sided dice roll. you can determine how many die you want to roll and also see the sum of all die rolled. to modify the amount of sides on the dice, you would just change the last number to whatever amount of sides you want on your dice. .",
            "url": "https://jyustin.github.io/test-fastpages/3.16/2022/12/13/16sims.html",
            "relUrl": "/3.16/2022/12/13/16sims.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "3.12 3.13 hacks and notes",
            "content": "notes . procedure: a named group of programming instructions that may have parameters and return values. . Parameters: input values of a procedure. . Modularity: the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program . HINT: procedures should be descriptive. also consider what parameters to set and what data is needed for the procedure . Note: There are two types of procedures, one that returns a value or some type of data and on that just executes a block of statements. also remember to keep procedures simple. . make sure to have multiple different functions in a procedure . Think of procedures like functions I guess? . hacks for 3.12 . Q 1: . a -- ? b -- ? c -- 9 PROCEDURE find a () { b &lt;-- 9 9 . a &lt;-- b c . Print (a) } What is a? . ANS: a would become 891 since the procedure puts b as 99 then sets a to be b*c which is 891 (i may be wrong) . Q 2: . cost ⟵ 173 tax - 10% PROCEDURE applytax (cost, cpercentDiscounted){ temp &lt;-- 100 + percentTaxed temp &lt;-- temp / 100 cost &lt;-- cost x temp Print(cost)} . What is the cost? . ANS: temp = 110/100 so cost = 173 * 1.1 = 190.3 so cost = 190.3 . 3.13 Homework/Hacks . Q 1: Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game . Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) . ANS below . toprbyardspg = 100 currentrbyards = 1260 totalGames = 12 procedure topyards(toprbyardspg, currentrbyards, totalGames) { currentrbyards = 1260 / totalGames if toprbyardspg &lt; currentrbyards: currentrbyards = toprbyardspg } . 2. Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. . Use what you learned about moving robots . PROCEDURE toEnd() { move_forward() rotate_left() move_forward() move_forward() rotate_right() move_forward() move_forward() move_forward() rotate_left() move_forward() move_forward() rotate_left() move_forward() move_forward() rotate_right() move_forward() rotate_left() move_forward() move_forward() # using loops and if statements may work but for me it would be harder and # take more time } . Q 3: . Which Is the Correct Way to define the Name of a Procedure? . A. PROCEDURE MYLIST . B. PROCEDURE MyList . C. procedure mylist . ANS: B because procedure is in caps and it&#39;s camel cased. . Q 4: . Write A Procedure That gets the BeachBall To the Green Square . PROCEDURE toEnd() { move_forward() rotate_left() move_forward() rotate_right() move_forward() move_forward() move_forward() move_forward() move_forward() rotate_left() move_forward() move_forward() } . missing hacks (oops) . Problem 1: This problem involves parameters Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } This is the correct equation, the others have the wrong equation or don&#39;t add the extra variables needed. . Problem 2: Procedures with return values . James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . True because there is nothing displaying the text . False . Problem 3: Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) this is adding the 2 flights co2 production seperately . totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) this is summing up the passengers and miles and then calculating the total flight footprint . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon .",
            "url": "https://jyustin.github.io/test-fastpages/3.12/2022/12/13/.html",
            "relUrl": "/3.12/2022/12/13/.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "3.14 3.15 hacks and notes",
            "content": "notes . libraries contain prewritten code/procedures that you can use for coding. . HINT: libraries can simplify complex problems and using them can make a problem easier to solve . APIs (application program interfaces) specify how procedures in libraries should behave and be utilized. . Documentation is an explanation of the code . HINT: look at Documentation for code if you don&#39;t understand something . The APCSP EXAM REFRENCE SHEET could come in handy later. it is essentially a library provided by College Board. . you may need expressions for generating random values. . EX: random number generator, dice roll, etc. . RANDOM(a, b) generates and returns a random integer from a to b, inclusive. Each result is equally likely to occur. . randint(start, stop) generates random integer between start and stop. . randrange(start, stop, step) generates random number where start is min value, stop is max value, and step is the multiples the rng generates. . If start = 0 and step = 5 all the values that can by outputed are 0 and multiples of 5 . HACKS . reflection . libraries and APIs are essentially prewritten code that can help you on complex problems. These libraries and APIs can also be used to not only write code easier and not develop everything on projects but also be the entire foundation of the code itself. I also learned to use documentation to understand code segments and libraries/APIS. Documentation should be looked at before using a library or tinkering with some code, as it gives you an understanding of the code you are working with and how you could work with it. lastly, understand that random expressions and the use of random algorithms will be tested on the AP EXAM. It is especially important to understand the random syntax for pseudocode on the AP Exam because there will definetly be problems on the exam with different random expressions. . multiple choice . Q 1: What does the random(a,b) function generate? . A. A random integer from a to be exclusive . B. A random integer from a to b inclusive. . C. A random word from variable a to variable b exclusive. . D. A random word from variable a to variable b inclusive. . ANS: B. this is the definition given earlier and makes most sense . Q 2: What is x, y, and z in random.randrange(x, y, z)? . A. x = start, y = stop, z = step . B. x = start, y = step, z = stop . C. x = stop, y = start, z = step . D. x = step, y = start, z = stop . ANS: A, because x and y determine min and max values, and z is supposed to determine the steps the random values take . Q 3: Which of the following is NOT part of the random library? . A. random.item . B. random.random . C. random.shuffle . D. random.randint . ANS: A because random.item sounds like it is just random.choice, which does exists. it is logical to believe that random.item can&#39;t exist because a similar existing random function already exists that could probably do what that intended to do. . Q 3: What is the advantage of using libraries? . Using libraries can make your projects and code much more simpler and take less time to write, as libraries essentially provide you with prewritten code that you can build upon for projects or use for their algorithms to avoid writing your own algorithms/code for everything. basically, libraries make writing code more efficient, as they give you prewritten algorithms that you can use for your code. Even if you want to write everything yourself, its important to know that libraries also reduce the size of your code, as it means you don&#39;t need to write a bunch of code that you could easily replicate using a library. . Q 4: Write a thorough documentation of the following code: . import random # import random library names_string = input(&quot;Give me everybody&#39;s names, seperated by a comma.&quot;) # takes user input names = names_string.split(&quot;,&quot;) # splits names_string into list. each item in list is name separated by commas num_items = len(names) # number of names random_choice = random.randint(0, num_items - 1) # picks random name, uses num_items to pick random item from the list person_who_will_pay = names[random_choice] # determine person who is paying print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;) # prints who will pay . blue is going to buy the meal today! . (4) Coding Challenges! . REQUIRED: Create programs in python to complete the two task . 1: Create a program to pick five random names from a list of at least 15 names . import random names = [&quot;red&quot;, &quot;joe&quot;, &quot;joeseph&quot;, &quot;john&quot;, &quot;jamie&quot;, &quot;jack&quot;, &quot;joselyn&quot;, &quot;justin&quot;, &quot;blue&quot;, &quot;eric&quot;, &quot;zack&quot;, &quot;harry&quot;, &quot;lamb&quot;, &quot;four&quot;, &quot;five&quot;] # above is ls of names i = 0 while i != 5: # repeat 5 times rand_names = random.choice(names) # picks random name i = i + 1 # needed for while loop print(rand_names) # prints random name . blue four five jack eric . 2: Create a program to simulate a dice game where each player rolls two fair dice (6 sides); the player with the greater sum wins . import random player1 = 0 # initial player&#39;s score player2 = 0 i = 0 while i != 2: # while loop rolls the &quot;dice&quot; x = random.randint(1, 6) y = random.randint(1, 6) # both of these are the die rolls player1 = player1 + x # adds die roll to the player score player2 = player2 + y i = i + 1 # repeat 2 times print(&quot;player 1 score: &quot;, player1) #these 2 print out scores print(&quot;player 2 score: &quot;, player2) if player1 &gt; player2: # determine who won print(&quot;player 1 wins!&quot;) else: print(&quot;player 2 wins!&quot;) . player 1 score: 4 player 2 score: 12 player 2 wins! . extra credit attempt . import random row1 = [0, 0, 0, 0, 0] row2 = [0, 0, 0, 0, 0] row3 = [0, 0, 0, 0, 0] # building the board row4 = [0, 0, 0, 0, 0] row5 = [0, 0, 0, 0, 0] element = [ &quot;x&quot;, &quot;y&quot;] # board elements. x is movable space, y is wall start = [&quot;s&quot;] # start space end = [&quot;e&quot;] # end space bot_face = [&quot;north&quot;, &quot;east&quot;, &quot;south&quot;, &quot;west&quot;] i = 0 a = 0 y = random.choice(bot_face) while i != 5: row1[a] = random.choice(element) row2[a] = random.choice(element) row3[a] = random.choice(element) # randomize board row4[a] = random.choice(element) row5[a] = random.choice(element) a = a + 1 i = i + 1 r = random.randint(0, 5) row1[r] = random.choice(start) # apply start and end row5[r] = random.choice(end) print(row1) # print out the board print(row2) print(row3) print(row4) print(row5) print(&quot;the bot faces:&quot;, y) . [&#39;x&#39;, &#39;y&#39;, &#39;x&#39;, &#39;y&#39;, &#39;s&#39;] [&#39;x&#39;, &#39;x&#39;, &#39;y&#39;, &#39;x&#39;, &#39;y&#39;] [&#39;x&#39;, &#39;x&#39;, &#39;y&#39;, &#39;y&#39;, &#39;x&#39;] [&#39;y&#39;, &#39;y&#39;, &#39;y&#39;, &#39;x&#39;, &#39;x&#39;] [&#39;y&#39;, &#39;x&#39;, &#39;y&#39;, &#39;x&#39;, &#39;e&#39;] the bot faces: south . although this isn&#39;t very functional, you could at least build a board with this. I didn&#39;t build a board because it would be very time consuming for me, but you could technically look at the graph created to determine the layout of the board to some extent. .",
            "url": "https://jyustin.github.io/test-fastpages/3.14/2022/12/12/3.14.15.html",
            "relUrl": "/3.14/2022/12/12/3.14.15.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "3.8 - 3.10 hacks and notes",
            "content": "notes . iteration is when something is repeated. usually done using loops. REPEAT N TIMES is pseudocode for this. . LISTS: collection of data in a sequence that can be iterated through. . EX: fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;, &quot;pomegranate&quot;] . LISTS ARE MUTABLE. you can add and remove items from a list. . Nested Lists: you can store lists inside lists for more complex data. can create sublists with this. . can iterate through sublists in list and then iterate through values in those sublists. . Exercise 1 . list = [1, 2, 3, 4, 5] # Print this list in reverse order #list.reverse() also works for i in range(len(list)): print(i + 1) a = list.pop() # pop element at the end of list list.insert(i, a) # add new element with index val of last popped element print(list) . 1 2 3 4 5 [5, 4, 3, 2, 1] . Exercise 2 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] # Sort this array using bubble sort for i in list: for a in range(len(list) - 1): # for loops look at the first element and the element next to it if list[a] &gt; list[a + 1]: # if the 1st element is larger than the 2nd one + 1 list[a], list[a + 1] = list[a + 1], list[a] # position of 2 elements are swapped so larger element is in front # lesser element is in back # list.sort() also works :/ print(list) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Quiz reflection . 4) How can we add something to the end of a list? . (a) Use + sign . (b) The word Add . (c) Append . (d) Extend . ANS: Append . I picked extend and got the problem wrong because I mixed up the definition of extend with append. extend is for lists and append is for individual elements. . 8) What does a WHILE loop do? . (a) Iterates over an iterable and for a set amount of time . (b) Intuitively takes an iterable and manipulates it over a set period using pointers . (c) Loop over a bound interval by comparing to a conditional . (d) Crash bitcoin . ANS: (C) I got this one wrong because I picked A initially. I forgot that the set amount of time part must be added in. C is the technical definition. A is how WHile loops work. . 9) I want to iterate over a list until the user inputs &#39;quit&#39;. What loop would I use? . (a) WHILE loops . (b) FOR loops . (c) Recursive Loops . (d) Paradoxical Loops . ANS: B, but I picked A because I was thinking of a while loop and a for loop. I understand why a for loop would be used. .",
            "url": "https://jyustin.github.io/test-fastpages/3.8/2022/12/06/.810.html",
            "relUrl": "/3.8/2022/12/06/.810.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "3.5 - 3.7 hacks and notes",
            "content": "3.5 notes . Logical operators evaluate boolean values. Pseudocode will use Not , AND, and OR to demonstrate this. . practice questions 3.5 . q 1. What boolean value would result be? . a &lt;-- 19 b &lt;-- 28 result &lt;-- a = b . True . False . ANS: False b/c a /= b . q 2. What boolean value would result be? . score &lt;-- 99 average &lt;-- 99 result &lt;-- score ≤ average . True . False . ANS: True b/c score = average . q 3. What boolean value would be displayed? . type &lt;-- &quot;dog&quot; training &lt;-- &quot;yes&quot; DISPLAY((NOT (type = &quot;dog&quot;)) AND (training = &quot;no&quot;)) . True . False . ANS: FALSE AND FALSE b/c both statements are false . 3.6 notes . conditional statements are when the code acts based on different conditions based on user input or stored data. . ex: if statements and if else statements are conditional statements . HINT: flowcharts can help visualize conditional statements . practice questions 3.5 . q 1. What value will be displayed . rank &lt;-- &quot;titan&quot; hall &lt;-- 14 IF (rank = &quot;titan&quot;) { DISPLAY(&quot;You like Clash of Clans a lot.&quot;) } . You like Clash of Clans a lot. . 14 . titan . rank . ANS: Since rank = &quot;titan&quot;, the if statement is executed, displaying the code in it. () . q 2. What portion of the code will run? . class &lt;-- 33 cookies &lt;-- 25 IF (class &lt; cookies) { DISPLAY(&quot;Give out cookies today.&quot;) } ELSE { DISPLAY(&quot;Do not give out cookies today.&quot;) } . The if portion . The else portion . ANS: else portion b/c class &lt; cookies . 3.7 notes . NESTED CONDITIONAL: conditional statement in a conditional statement . HINT: flowcharts will be helpful to visualize these . 3.7 practice questions . q 1. Is this an example of a nested conditional? . space &lt;-- 90 download &lt;-- 20 IF (space &gt; download) { DISPLAY(&quot;File can be downloaded.&quot;) } . Yes . No . ANS: no b/c theres only one conditional statement . q 2. What does this code display? . price &lt;-- 200 discount &lt;-- 65 IF (price &gt; 100) { IF (discount &gt; 50) { DISPLAY(&quot;You can buy this item.&quot;) } ELSE { DISPLAY(&quot;You cannot purchase this item.&quot;) } } . You cannot purchase this item. . 50 . You can buy this item. . 65 . ANS: You cannot purchase this item b/c discount &lt; 50 . 3.5 HACKSSSS . Binary Practice Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1 90(D) = 1000(B) . A. True . B. False . ANS: B . 2 10(D) ≠ 0110(B) . A. True . B. False . ANS: B . 3 56(D) ≥ 111000(B) . A. True . B. False . ANS: A . 4 99(D) &lt; 1110011(B) . A. True . B. False . ANS: B . binary truth tables . AND OPERATOR . Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 | 0 | 0 | . OR Operator . Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not operator . Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . Python Practice . print(20 &lt; 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x == y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true x = 20 z = 20 print(x == z) . False True True . 3.6 hacks . AP PREP . q 1. What is displayed by this code? . result &lt;-- 75 IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } ELSE { DISPLAY(&quot;Nice job!&quot;) } . Nice job! . Display . Please schedule a retake. . 75 . ANS: Please schedule a retake. . q 2. How is an if statement different from an if-else statement. . Extra words. . An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. . They are the exact same. . An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. . ANS: An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. (2) b/c if - else has to go through code because it will do something even if the condition is not what the if statement wants . q 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If statement . If-else statement . ANS: IF-else statement . q 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement . If-else statement . ANS: If statement cause we don&#39;t know what he&#39;ll do if it isn&#39;t sunny . Using Python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;shark&quot;: # What boolean value does this statement cause? # it should be true when the for loop gets to shark print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) if i == &quot;wildebeest&quot; or i == &quot;lion&quot;: print(i,&quot;,this animal lives in the desert&quot;) else: print(i) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . lion ,this animal lives in the desert tiger wildebeest ,this animal lives in the desert Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! shark jellyfish blobfish raven . 3.7 HACKS . Exercise 1 Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal . BefWil = { &quot;foody&quot;:&quot;Beef wellington&quot;, &quot;meat&quot;: &quot;beef&quot;, &quot;preptime&quot;: &quot;150 minutes&quot; } ChickenAlfredo = { &quot;foody&quot;:&quot;ChickenAlfredo&quot;, &quot;meat&quot;: &quot;Chicken&quot;, &quot;preptime&quot;: &quot;60 minutes&quot; } Ques = { &quot;foody&quot;:&quot;cheese quesadilla&quot;, &quot;meat&quot;: &quot;None&quot;, &quot;preptime&quot;: &quot;10 minutes&quot; } #function to see if meal meets requirements def dinner(food): if food[&quot;meat&quot;] == &quot;None&quot;: if food[&quot;preptime&quot;] &lt;= &quot;30&quot;: print(food[&quot;foody&quot;]) dinner(ChickenAlfredo) dinner(Ques) dinner(BefWil) . cheese quesadilla . FlowCHART .",
            "url": "https://jyustin.github.io/test-fastpages/3.5-3.7/2022/12/04/.5-3.7.html",
            "relUrl": "/3.5-3.7/2022/12/04/.5-3.7.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "week 2 status",
            "content": "this week (week 2) . since I was absent most of the time I can’t say much about this week but looking at the lessons and doing them did give me a refresher on these topics. but I still struggle with binary and going between decimal and binary. I think that a calculator would be necessary for this operation. .",
            "url": "https://jyustin.github.io/test-fastpages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "3.5 - 3.7 hacks and notes",
            "content": "",
            "url": "https://jyustin.github.io/test-fastpages/3.5-3.7/2022/12/01/.5-3.7.html",
            "relUrl": "/3.5-3.7/2022/12/01/.5-3.7.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "3.3 - 3.4 hacks and notes",
            "content": "notes . An algorithm is a finite set of instructions that accomplish a specific task, us as humans, do algorithms on a daily basis. . Sequencing is doing steps in order, for example, doing the first step then the second then the third, etc. . Selection is when the programmer decides between two different outcomes. . Iteration is when you have to repeat a step until that condition is fulfilled. . hacks . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) #comments for top code # the code itself is sequencing (doing all orders in a specific order) # the if statement is selection as it only runs if the if statement is met and sorts through numbers # the for statement is iteration because it repeats the steps in it for i in numbers i = 1 starString = &quot;*&quot; while i &lt;= 5: j = 1 while j &lt;= i: print (&quot;*&quot;, end= &quot;&quot;) j += 1 print () i += 1 #comments for bottom code #the code itself is sequencing (doing all orders in a specific order) #while j = 1 is selection because it is changing j # while i loop is iteration because it repeats for if i is less than 5 # QUESTION 5 # code segment 1 numdog = 1 numcat = 0 numfish = 2 numparrot = 1 numbird = 1 numdog = numcat numcat = numfish numfish = numdog print(numfish) #this would print 0 #code segment 2 nummap = 1 numbooks = 2 numdrinks = 1 money = 770 numpens = 4 numpens = numbooks money = money - numpens print(money) #assuming all are integers, money is 768 . questions . Practice Problems given the following code segment below: a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . find the value for a, b, c, d ANS: a = 1, b = 7, c = 3, d = 7 . consider the following code segment: hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . the value of hot is true, the value of cold is true the value of hot is false, the value of cold is true the value of hot is true, the value of cold is false the value of hot is false, the value of cold is false ANS: the value of hot is true, the value of cold is true . Sequencing (code below) num1 = 3 num2 = 1 num3 = 5 num1 = num2 + num3 num2 = num1 + num3 . What is the value of num1 and num2? ANS: num1 = 6, num2 = 11 . String Homework What does the code print? . Test 1 CODE BELOW firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) name &lt;- concat(lastName, var) email &lt;- concat(name, &quot;@gmail.com&quot;) DISPLAY(email) . What would the result be? ANS: &quot;SmithB@gmail.com&quot; . TEST 2 CODE BELOW word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, len1) second &lt;- substring(word2, len2+3, len2) newWord &lt;- concat(first, second) DISPLAY(newWord) . ANS: ompuook . after doing all of the questions, I found that the biggest area of weakness for me was vocabulary and making sure I understand exactly what each vocab term means. I just need to be more familiar with these kinds of terms. .",
            "url": "https://jyustin.github.io/test-fastpages/3.3/2022/12/01/.1.html",
            "relUrl": "/3.3/2022/12/01/.1.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "1.1 - 1.2 hacks and notes",
            "content": "Notes . variables and lists . these are an abstraction inside a program that hold a value. each variable has associated data storage that represents one value at a time, but that value can be a list or other collection that in turn contains multiple values. . use good names when naming variables to make the code easy to read . lists allow variables to be bundled together. . you can add or remove variables from one list to another with .append . assignment operator . this changes a variable to a certain value. on tests, &quot;⟵&quot; will be used for assignment. storing values is assigning them to variables . Key Vocab . list: a sequence of several variables grouped together . variable: a way of storing information in a computer program, which could later be changed, referenced, and used . data types: a set of values and operations on those values . abstract data types: a data type whose internal representation is hidden from the client . client: a program that uses a data type . objects: a structure that can take on a data-type value . Applications programming interface (API): which is a list of constructors and instance methods or operations, used to specify the behavior of an abstract data type . Hacks 1.1-1.2 . 3 practice questions . q: which variable would you use for value of a stock? . A: stock1 string . B: stock string . C: is_stock boolean . D: stock1val integer . Ans: D . q which variable would you use for a class names? . 1: John string . 2: isJohn boolean . 3: john integer . Ans: 1 . q what variable name would you use to store whether tv is on or off? . A: ison . B: on . C: off . D: yes . Ans: A, also store as boolean . example practice problems . Consider the following code segment: . num1 ⟵ 6 . num2 ⟵ 4 . num3 ⟵ 10 . IF num1 &lt; num2 . num1 ⟵ num2 . ELSE . num3 ⟵ num2 . IF num2 ≥ num3 . num1 ⟵ num2 + num3 . sum ⟵ num1 + num2 + num3 . What is the value of sum after the code segment is executed? . 18 . 14 . 16 . 12 . ANS: 16 . Consider the following code segment . num1 ⟵ 5 . num2 ⟵ 10 . num3 ⟵ 20 . num3 ⟵ num1 . num3 ⟵ num2 . num1 ⟵ num3 . sum ⟵ num1 + num2 + num3 . what is sum? . 35 . 30 . 45 . 25 . ANS: 45 . hacks . Consider the following code segment: . num1 ⟵ 4 . num2 ⟵ 6 . num1 ⟵ num 2 . DISPLAY(num1) . DISPLAY(num2) . What is displayed after running this code segment? . 4 6 . 6 4 . 4 4 . 6 6 . ANS: 6 6 . I got this one wrong because I initially thought that num1 would retain its value. I realize now that num1 was changed to num2, and that I just kind of read over that statement. . What is the difference between an integer and string of numbers? . An integer is just a set data type while a string of numbers can be changed with addition and subtraction . An integer can be letters and numbers while a string is just numbers . An integer is just numbers while a string is just words . An integer can be changed with addition and subtraction and a string is a set number or string of letters. . ANS: 4th statement I got this problem wrong because my knowledge of that vocab was weak. I initially thought it was 3rd statement, but now I know the specific definition of an integer and Strings. . INT are numbers that can undergo math statements . Strings are words that can&#39;t have their problems changed by math (addition subtraction) . Extra Binary Hacks if you changed your bits to 24 . Convert the following decimal notation to binary notation: . 57345 . ANS: 1110000000000001 . I got this one wrong because i messed up somewhere in my math . 16777215 . ANS: 111111111111111111111111 . I got this one wrong for same reason as the previous problem . Convert the binary notation to decimal notation: . 1101001000101000 . 53800 . I also got this one wrong because of math errors. I should double check my problems on the test to ensure that I get them right. . I did all of the problems on the blog. I found that converting to decimal was a lot harder than conversions from binary to decimal. . after doing the other problems I found that most topics are easy to understand but binary and assigning variables different values is kind of difficult. the binary is difficult because I sometimes just make math errors, and the other just requires some harder thinking to avoid making some simple error. .",
            "url": "https://jyustin.github.io/test-fastpages/3.1/2022/11/30/11stuff.html",
            "relUrl": "/3.1/2022/11/30/11stuff.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus decimal with base 4 all on? . +1 | 00000000 | 0 | 0 | 0 | -1 | | | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . | . | | | | | | | | add 1 to decimal | &lt;/tr&gt; | | | | | | | | . .",
            "url": "https://jyustin.github.io/test-fastpages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "final tri 1 review",
            "content": "score of final . . problem review . Problem 1 . . I got this problem wrong because I simply did not know how to work with binary numbers. . How to convert binary to numbers . binary works in that each number has a decimal value, and that number will add onto the full value. for example. to find the value of 1011, you would convert 1 to 2^3, 0 to 0, 1 to 2^1, and the last 1 to 2^0. the power the 2s goes to is determined by the place it is in the binary. . 1 0 1 1 . 1 would be 4ths place . 0 would be 3rd place if 1 was there . 1 would be 2nd place . and last 1 would be 0 place . then we add all of the values together, which would add up to 8 + 2 + 1 which is 11. . I only got this problem wrong because I had no idea how binary numbers worked, but now, I am sure that I will get problems like this right next time. . problem 2 . . My problem here was that i mistakenly gave p its original value the fifth statement, p &lt;— q makes p equal q, which is 20. . last statement setting r equal to p should have been 20 because p had been initialized to 20 earlier, but I must have glossed over the 5th statement and read through the code too quickly, because I thought that p was still it’s original value, 10. Next time, I need to make sure that I completely read through pseudo code problems like this many times over to confirm that I understand the entirety of the problem. . problem 3 . . my error here was that I was thinking about this too hard and trying to work out what happens at each runthrough of the loop. I should have looked at things from a math perspective and realized what the loop was essentially doing, not what is happening at each playthrough of the loop. . basically, this problem is adding x to itself 5 times. so the first time, x is 1, which then adds 2 to that 1, and so on until x is 5. My mistake was that I was thinking too hard about it, and stopped at the 4th runthrough of the loop. I forgot to add that last five. I think that I will need to work on understanding for loops more and math functions in general so that I don’t slip up like this again . reflection . I feel like I am doing pretty good in my knowledge of pseudo code and networking, as I did well on those problems. the hard ones that gave me a challenge were the ones that I did not understand, like the binary problems. I think that to do better on the next test, I need to think critically and slowly read through the problem to ensure I know exactly how the problem will be run through. But for now, I think i am doing pretty well. .",
            "url": "https://jyustin.github.io/test-fastpages/final%20week/2022/11/07/final.html",
            "relUrl": "/final%20week/2022/11/07/final.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Night at the Museum reflection",
            "content": "looking at other’s projects . Our team spent a lot of time at N@TM trying to scrap together an API to present, so we didn’t have much time to view other’s projects. I did get a chance to see one teams project though. They were a clock website that would give the user time from certain times zones, as well as a alarm system. I was pretty impressed by their work. They explained to me that their project was a javascript file that drew from a different file with all the information about the timezones. their frontend and backend were well defined, unlike our project, which did not really have defined frontend/backend. . I also looked at another project with information about stocks. What impressed me the most was the fact that the project was very sleek and professional. Hopefully next time the project I work on will be nice and neat. It really made me feel like the project was something well designed. I also felt like the roles of their team were very well defined. I feel like with our team, the roles of our team were very flexible, but they were not well defined. I think better structure of the team would possibly help our team in the future. I guess what I take from this is that frontend development and a clean frontend are essential to creating the image of a stable, functioning program/product. . Reflection . Overall, I would say this has been a learning experience for me and our team. Our team learned that requirements and a plan should be developed and be completely known. We would have saved ourselves a lot of trouble if we had known that an API would be required beforehand. Additionally, I learned myself that ensuring that I completely understand everything is very important. I learned from watching other people that it pays to be well prepared. Our team was very unprepared for this event, and we were practically scrambling to get everything together. I think that next time we have some sort of deadline, the last 2 days should be testing and ensuring that the product functions, not trying to fit as much into our program as possible. .",
            "url": "https://jyustin.github.io/test-fastpages/final%20week/2022/11/06/Nightmuseum.html",
            "relUrl": "/final%20week/2022/11/06/Nightmuseum.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "apis",
            "content": "import requests url = &quot;https://google-translate1.p.rapidapi.com/language/translate/v2&quot; payload = &quot;q=Hello%2C%20world!&amp;target=es&amp;source=en&quot; headers = { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;Accept-Encoding&quot;: &quot;application/gzip&quot;, &quot;X-RapidAPI-Key&quot;: &quot;6a13c0a609mshb8a55b62f42e6d0p15ec9ejsnaf557400ec31&quot;, &quot;X-RapidAPI-Host&quot;: &quot;google-translate1.p.rapidapi.com&quot; } response = requests.request(&quot;POST&quot;, url, data=payload, headers=headers) print(response.text) . {&#34;data&#34;:{&#34;translations&#34;:[{&#34;translatedText&#34;:&#34;¡Hola Mundo!&#34;}]}} . import requests URL = &quot;https://rapidapi.p.rapidapi.com/api/Search/WebSearchAPI&quot; HEADERS = { &#39;x-rapidapi-host&#39;: &quot;contextualwebsearch-websearch-v1.p.rapidapi.com&quot;, &#39;x-rapidapi-key&#39;: &quot;6a13c0a609mshb8a55b62f42e6d0p15ec9ejsnaf557400ec31&quot; } query = &quot;computer science&quot; page_number = 1 page_size = 10 auto_correct = True safe_search = False querystring = {&quot;q&quot;: query, &quot;pageNumber&quot;: page_number, &quot;pageSize&quot;: page_size, &quot;autoCorrect&quot;: auto_correct, &quot;safeSearch&quot;: safe_search} response = requests.get(URL, headers=HEADERS, params=querystring).json() total_count = response[&quot;totalCount&quot;] for web_page in response[&quot;value&quot;]: url = web_page[&quot;url&quot;] title = web_page[&quot;title&quot;] description = web_page[&quot;description&quot;] body = web_page[&quot;body&quot;] date_published = web_page[&quot;datePublished&quot;] language = web_page[&quot;language&quot;] is_safe = web_page[&quot;isSafe&quot;] provider = web_page[&quot;provider&quot;][&quot;name&quot;] print(&quot;Url: {}. Title: {}.&quot;.format(url, title)) . Url: https://en.wikipedia.org/wiki/Computer_science. Title: Computer science - Wikipedia. Url: https://elemental.medium.com/tagged/computers. Title: Computers Elemental. Url: https://stackoverflow.com/tags/computer-science/info. Title: &#39;computer-science&#39; tag wiki - Stack Overflow. Url: https://lbre.stanford.edu/event-services/equipment-services/computers. Title: Computers | Land, Buildings &amp; Real Estate. Url: http://explore.appinventor.mit.edu/news/computer-science. Title: Computer Science Education Week: Going Beyond Code | Explore MIT App Inventor. Url: https://www.birds.cornell.edu/home/information-science/. Title: Information Science | Birds, Cornell Lab of Ornithology : Birds, Cornell Lab of Ornithology. Url: https://www.cmu.edu/admission/majors-programs/school-of-computer-science/computer-science. Title: Computer Science - Undergraduate Admission - Carnegie Mellon University. Url: http://guide.berkeley.edu/undergraduate/degree-programs/computer-science/. Title: Computer Science &lt; University of California, Berkeley. Url: http://www.uniq.ox.ac.uk/computer-science. Title: Computer Science - UNIQ. Url: https://beaver.psu.edu/directory/computer-science. Title: Computer Science Directory | Penn State Beaver. . &lt;py-script&gt; import requests URL = &quot;https://rapidapi.p.rapidapi.com/api/Search/WebSearchAPI&quot; HEADERS = { &#39;x-rapidapi-host&#39;: &quot;contextualwebsearch-websearch-v1.p.rapidapi.com&quot;, &#39;x-rapidapi-key&#39;: &quot;6a13c0a609mshb8a55b62f42e6d0p15ec9ejsnaf557400ec31&quot; } query = &quot;computer science&quot; page_number = 1 page_size = 10 auto_correct = True safe_search = False querystring = {&quot;q&quot;: query, &quot;pageNumber&quot;: page_number, &quot;pageSize&quot;: page_size, &quot;autoCorrect&quot;: auto_correct, &quot;safeSearch&quot;: safe_search} response = requests.get(URL, headers=HEADERS, params=querystring).json() total_count = response[&quot;totalCount&quot;] for web_page in response[&quot;value&quot;]: url = web_page[&quot;url&quot;] title = web_page[&quot;title&quot;] description = web_page[&quot;description&quot;] body = web_page[&quot;body&quot;] date_published = web_page[&quot;datePublished&quot;] language = web_page[&quot;language&quot;] is_safe = web_page[&quot;isSafe&quot;] provider = web_page[&quot;provider&quot;][&quot;name&quot;] print(&quot;Url: {}. Title: {}.&quot;.format(url, title)) &lt;/py-script&gt; &lt;div id=&quot;request_output&quot;&gt;&lt;/div&gt; &lt;py-script&gt; from pyodide.http import pyfetch import asyncio URL = &quot;https://rapidapi.p.rapidapi.com/api/Search/WebSearchAPI&quot; HEADERS = { &#39;x-rapidapi-host&#39;: &quot;contextualwebsearch-websearch-v1.p.rapidapi.com&quot;, &#39;x-rapidapi-key&#39;: &quot;6a13c0a609mshb8a55b62f42e6d0p15ec9ejsnaf557400ec31&quot; } query = &quot;computer science&quot; page_number = 1 page_size = 10 auto_correct = True safe_search = False querystring = {&quot;q&quot;: query, &quot;pageNumber&quot;: page_number, &quot;pageSize&quot;: page_size, &quot;autoCorrect&quot;: auto_correct, &quot;safeSearch&quot;: safe_search} response = await pyfetch(url=URL, headers=HEADERS, params=querystring, method=&quot;GET&quot;) output = f&quot;GET request=&gt; status:{response.status}, json:{await response.json()}&quot; pyscript.write(&#39;request_output&#39;, output) &lt;/py-script&gt; &lt;py-script&gt; from pyodide.http import pyfetch import asyncio url = &quot;https://real-time-web-search.p.rapidapi.com/search&quot; beanbag = {&quot;q&quot;:&quot;create an online store&quot;,&quot;limit&quot;:&quot;10&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;6a13c0a609mshb8a55b62f42e6d0p15ec9ejsnaf557400ec31&quot;, &quot;X-RapidAPI-Host&quot;: &quot;real-time-web-search.p.rapidapi.com&quot; } response = await pyfetch(url=&quot;https://real-time-web-search.p.rapidapi.com/search&quot;, headers=HEADERS, params=beanbag, method=&quot;GET&quot;) output = f&quot;GET request=&gt; status:{response.status}, json:{await response.json()}&quot; pyscript.write(&#39;request_output&#39;, output) &lt;/py-script&gt; . &lt;py-script&gt; from pyodide.http import pyfetch import asyncio response = await pyfetch(url=&quot;https://www.boredapi.com/api/activity/&quot;, method=&quot;GET&quot;) output = f&quot;GET request=&gt; status:{response.status}, json:{await response.json()}&quot; pyscript.write(&#39;request_output&#39;, output) &lt;/py-script&gt; .",
            "url": "https://jyustin.github.io/test-fastpages/js%20codes/2022/11/03/api.html",
            "relUrl": "/js%20codes/2022/11/03/api.html",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "frontend api breakdown",
            "content": "&lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Time&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;td id=&quot;time&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_cases&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_deaths&quot;&gt;&lt;/td&gt; &lt;td id=&quot;active_cases&quot;&gt;&lt;/td&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Country&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- generated rows --&gt; &lt;/tbody&gt; &lt;/table&gt; . above code builds html table that will receive data. . &lt;!-- Script is layed out in a sequence (no function) and will execute when page is loaded --&gt; &lt;script&gt; // prepare HTML result container for new output const resultContainer = document.getElementById(&quot;result&quot;); // prepare fetch options const url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot;; const headers = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; . Above code is how we will get the api . // fetch the API fetch(url, headers) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // valid response will have json data response.json().then(data =&gt; { console.log(data); console.log(data.world_total) // World Data document.getElementById(&quot;time&quot;).innerHTML = data.world_total.statistic_taken_at; document.getElementById(&quot;total_cases&quot;).innerHTML = data.world_total.total_cases; document.getElementById(&quot;total_deaths&quot;).innerHTML = data.world_total.total_deaths; document.getElementById(&quot;active_cases&quot;).innerHTML = data.world_total.active_cases; // Country data for (const row of data.countries_stat) { console.log(row); // tr for each row const tr = document.createElement(&quot;tr&quot;); // td for each column const name = document.createElement(&quot;td&quot;); const cases = document.createElement(&quot;td&quot;); const deaths = document.createElement(&quot;td&quot;); const active = document.createElement(&quot;td&quot;); // data is specific to the API name.innerHTML = row.country_name; cases.innerHTML = row.cases; deaths.innerHTML = row.deaths; active.innerHTML = row.active_cases; // this builds td&#39;s into tr tr.appendChild(name); tr.appendChild(cases); tr.appendChild(deaths); tr.appendChild(active); // add HTML to container resultContainer.appendChild(tr); } }) }) . above code will first grab api and extract data from it, them append this data to cells in table. also has a catch for if there is a response error. will print &quot;database error&quot; if such occurs. . // catch fetch errors (ie ACCESS to server blocked) .catch(err =&gt; { console.error(err); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); }); &lt;/script&gt; . above code will fix errors if the api suddenly does not allow connection. .",
            "url": "https://jyustin.github.io/test-fastpages/python%20codes/week%208/2022/10/20/apifront.html",
            "relUrl": "/python%20codes/week%208/2022/10/20/apifront.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "data hacks code part",
            "content": "Binary math . binary subtraction . subtract 2 binary numbers and print the output as a decimal . Subtract numbers result will show up here . . FETCHING HACKS OVER HERE . give me the hard questions (filter) look at all the questions (unfiltered) look at the hard questions (filtered), answers are at least greater than 20 original questions . hard questions . look at developer console for more info . 1 . 2 . 1 . 2 . .",
            "url": "https://jyustin.github.io/test-fastpages/week%208/2022/10/11/network.html",
            "relUrl": "/week%208/2022/10/11/network.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;6a13c0a609mshb8a55b62f42e6d0p15ec9ejsnaf557400ec31&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.json) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . &lt;bound method Response.json of &lt;Response [200]&gt;&gt; World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://jyustin.github.io/test-fastpages/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 1 if i == letter: count += alphabetList.index(letter) print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) . The letter b is the 2 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) newNumbers.remove(0) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 i = 1 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times while i == 1: item = input(&quot;Please select an item from the menu&quot;) total = menu[item] foo = input(&quot;are you sure you want, &quot; + item + &quot; (print y or n)&quot;) if foo == &quot;y&quot;: break elif foo == &quot;n&quot;: i == 1 #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 1.99 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://jyustin.github.io/test-fastpages/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "js/html table",
            "content": "var msg = &quot;Hello, Worldo!&quot;; function logIt(output) { console.log(output); } function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role var students = [ new Person(&quot;Justin&quot;, &quot;Jyustin&quot;, 2024), new Person(&quot;111&quot;, &quot;101&quot;, 1111), new Person(&quot;2222&quot;, &quot;220&quot;, 2222), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid red;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em blue;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;u&gt;&quot; + &quot;Name&quot; + &quot;&lt;/u&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;u&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/u&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;u&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/u&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;u&gt;&quot; + &quot;Role&quot; + &quot;&lt;/u&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Justin | Jyustin | 2024 | Student | 111 | 101 | 1111 | Student | 2222 | 220 | 2222 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://jyustin.github.io/test-fastpages/js%20codes/2022/09/27/js.html",
            "relUrl": "/js%20codes/2022/09/27/js.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "agile methodology",
            "content": ". Agile Methodology hacks . Scrum Team layout: . Scrum Master: The scrum master helps to facilitate the sprint by ensuring that an agile framework is followed. He/she is committed to tracking issues and maintaining scrum boards, but should also remain flexible and open to opportunities for the team to improve their workflow. . DevOps: DevOps is the combination of cultural philosophies, practices, and tools that increases an team’s ability to deliver applications and services at high velocity: version control, integration, managing dependencies (requirements.txt), AWS deployment are some of the key functions that impact velocity. . Development Team: The development team can be comprised of all kinds of people including designers, writers, presenters, developers, etc. Two key roles in Web Development are … . Frontend Developer: A front-end developer builds the front-end portion of websites and web applications—that is, the part that users actually see and interact with. . Backend Developer: Back-end developers a build and maintain the mechanisms that process data and perform actions like data storage, security, and other server-side functions that you cannot see. . Scrum Board: . The Scrum Board contains issues that are assigned to individuals, each of these issues will have tangible deliverable links (code/video/…). Scrum Team will use Scrum Board to understand everyone’s ideas and efforts . 7 important skills . Creativity. Do you think outside our inside the box? how do you work with planned system? . | Critical thinking. Use critical thinking to step back and solve problems. deal with problems before they arise. . | Communication. EFFECTIVE COMMUNICATION IS VITAL. Communication is not just you communicating but also you interpreting what others communicate to you. . | Collaboration through Leadership. Leaders are big-picture thinkers who take various interests into account when making major decisions. . | Collaboration through teamwork. accept responsibilities, have trust in teammates, manage time wisely. work with team. . | Researching. Use research in all things. Use it before tackling problem to plan ahead. stop any problems before they arise. . | technical. Leaders are big-picture thinkers who take various interests into account when making major decisions. . |",
            "url": "https://jyustin.github.io/test-fastpages/markdown/week%202/2022/09/24/scrub.html",
            "relUrl": "/markdown/week%202/2022/09/24/scrub.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "JavaScript Tutorial",
            "content": "JavaScript and Jupyter references . JavaScript is the most important language you need to learn as a frontend developer. Jupyter Notebooks is a convenient way to learn the language without the overhead of creating a full Website. Jupyter Notebooks had ChatGPT plugins to assist with design and troubleshooting problems. This Notebook has colors on HTML pages that were designed with a dark mode background. . JavaScript / Jupyter General References . W3Schools JS Reference - ChatGPT AI assistant for Chrome/Jupyter | Theme setup for Jupyter Article. Or do these commands from shell... Install pip: pip install jupyterthemes | Revert to original theme: jt -r | List themes: jt -l | Install with Theme, Name, Logo: jt -t onedork -T -N -kl | . | Chrome Dev Tools | . | Coding with jQuery . Jupyter Notebook GitHub, wget: https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2022-09-19-PBL-javascript_tutorial.ipynb | Markdown Fetch example in GitHub project for APCSP | HTML Static example in GitHub project for flask_portfolio | . | . pip install -upgrade jupyterthemes . Usage: /home/dragoon/anaconda3/bin/python -m pip install [options] &lt;requirement specifier&gt; [package-index-options] ... /home/dragoon/anaconda3/bin/python -m pip install [options] -r &lt;requirements file&gt; [package-index-options] ... /home/dragoon/anaconda3/bin/python -m pip install [options] [-e] &lt;vcs project url&gt; ... /home/dragoon/anaconda3/bin/python -m pip install [options] [-e] &lt;local project path&gt; ... /home/dragoon/anaconda3/bin/python -m pip install [options] &lt;archive url/path&gt; ... no such option: -u Note: you may need to restart the kernel to use updated packages. . pip install jupyterthemes . Collecting jupyterthemes Downloading jupyterthemes-0.20.0-py2.py3-none-any.whl (7.0 MB) |████████████████████████████████| 7.0 MB 5.1 MB/s eta 0:00:01 Collecting lesscpy&gt;=0.11.2 Downloading lesscpy-0.15.1-py2.py3-none-any.whl (46 kB) |████████████████████████████████| 46 kB 5.0 MB/s eta 0:00:01 Requirement already satisfied: matplotlib&gt;=1.4.3 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from jupyterthemes) (3.5.1) Requirement already satisfied: ipython&gt;=5.4.1 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from jupyterthemes) (8.2.0) Requirement already satisfied: notebook&gt;=5.6.0 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from jupyterthemes) (6.4.8) Requirement already satisfied: jupyter-core in /home/dragoon/anaconda3/lib/python3.9/site-packages (from jupyterthemes) (4.9.2) Requirement already satisfied: setuptools&gt;=18.5 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from ipython&gt;=5.4.1-&gt;jupyterthemes) (61.2.0) Requirement already satisfied: backcall in /home/dragoon/anaconda3/lib/python3.9/site-packages (from ipython&gt;=5.4.1-&gt;jupyterthemes) (0.2.0) Requirement already satisfied: stack-data in /home/dragoon/anaconda3/lib/python3.9/site-packages (from ipython&gt;=5.4.1-&gt;jupyterthemes) (0.2.0) Requirement already satisfied: pexpect&gt;4.3 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from ipython&gt;=5.4.1-&gt;jupyterthemes) (4.8.0) Requirement already satisfied: jedi&gt;=0.16 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from ipython&gt;=5.4.1-&gt;jupyterthemes) (0.18.1) Requirement already satisfied: pickleshare in /home/dragoon/anaconda3/lib/python3.9/site-packages (from ipython&gt;=5.4.1-&gt;jupyterthemes) (0.7.5) Requirement already satisfied: matplotlib-inline in /home/dragoon/anaconda3/lib/python3.9/site-packages (from ipython&gt;=5.4.1-&gt;jupyterthemes) (0.1.2) Requirement already satisfied: pygments&gt;=2.4.0 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from ipython&gt;=5.4.1-&gt;jupyterthemes) (2.11.2) Requirement already satisfied: decorator in /home/dragoon/anaconda3/lib/python3.9/site-packages (from ipython&gt;=5.4.1-&gt;jupyterthemes) (5.1.1) Requirement already satisfied: traitlets&gt;=5 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from ipython&gt;=5.4.1-&gt;jupyterthemes) (5.1.1) Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,&lt;3.1.0,&gt;=2.0.0 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from ipython&gt;=5.4.1-&gt;jupyterthemes) (3.0.20) Requirement already satisfied: parso&lt;0.9.0,&gt;=0.8.0 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=5.4.1-&gt;jupyterthemes) (0.8.3) Collecting ply Downloading ply-3.11-py2.py3-none-any.whl (49 kB) |████████████████████████████████| 49 kB 5.9 MB/s eta 0:00:01 Requirement already satisfied: pyparsing&gt;=2.2.1 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from matplotlib&gt;=1.4.3-&gt;jupyterthemes) (3.0.4) Requirement already satisfied: cycler&gt;=0.10 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from matplotlib&gt;=1.4.3-&gt;jupyterthemes) (0.11.0) Requirement already satisfied: python-dateutil&gt;=2.7 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from matplotlib&gt;=1.4.3-&gt;jupyterthemes) (2.8.2) Requirement already satisfied: pillow&gt;=6.2.0 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from matplotlib&gt;=1.4.3-&gt;jupyterthemes) (9.0.1) Requirement already satisfied: kiwisolver&gt;=1.0.1 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from matplotlib&gt;=1.4.3-&gt;jupyterthemes) (1.3.2) Requirement already satisfied: fonttools&gt;=4.22.0 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from matplotlib&gt;=1.4.3-&gt;jupyterthemes) (4.25.0) Requirement already satisfied: packaging&gt;=20.0 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from matplotlib&gt;=1.4.3-&gt;jupyterthemes) (21.3) Requirement already satisfied: numpy&gt;=1.17 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from matplotlib&gt;=1.4.3-&gt;jupyterthemes) (1.21.5) Requirement already satisfied: nbconvert in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (6.4.4) Requirement already satisfied: ipython-genutils in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (0.2.0) Requirement already satisfied: nest-asyncio&gt;=1.5 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (1.5.5) Requirement already satisfied: jinja2 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (2.11.3) Requirement already satisfied: ipykernel in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (6.9.1) Requirement already satisfied: tornado&gt;=6.1 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (6.1) Requirement already satisfied: pyzmq&gt;=17 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (22.3.0) Requirement already satisfied: argon2-cffi in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (21.3.0) Requirement already satisfied: nbformat in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (5.3.0) Requirement already satisfied: terminado&gt;=0.8.3 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (0.13.1) Requirement already satisfied: Send2Trash&gt;=1.8.0 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (1.8.0) Requirement already satisfied: prometheus-client in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (0.13.1) Requirement already satisfied: jupyter-client&gt;=5.3.4 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from notebook&gt;=5.6.0-&gt;jupyterthemes) (6.1.12) Requirement already satisfied: ptyprocess&gt;=0.5 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from pexpect&gt;4.3-&gt;ipython&gt;=5.4.1-&gt;jupyterthemes) (0.7.0) Requirement already satisfied: wcwidth in /home/dragoon/anaconda3/lib/python3.9/site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,&lt;3.1.0,&gt;=2.0.0-&gt;ipython&gt;=5.4.1-&gt;jupyterthemes) (0.2.5) Requirement already satisfied: six&gt;=1.5 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib&gt;=1.4.3-&gt;jupyterthemes) (1.16.0) Requirement already satisfied: argon2-cffi-bindings in /home/dragoon/anaconda3/lib/python3.9/site-packages (from argon2-cffi-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (21.2.0) Requirement already satisfied: cffi&gt;=1.0.1 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from argon2-cffi-bindings-&gt;argon2-cffi-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (1.15.0) Requirement already satisfied: pycparser in /home/dragoon/anaconda3/lib/python3.9/site-packages (from cffi&gt;=1.0.1-&gt;argon2-cffi-bindings-&gt;argon2-cffi-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (2.21) Requirement already satisfied: debugpy&lt;2.0,&gt;=1.0.0 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from ipykernel-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (1.5.1) Requirement already satisfied: MarkupSafe&gt;=0.23 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from jinja2-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (2.0.1) Requirement already satisfied: beautifulsoup4 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from nbconvert-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (4.11.1) Requirement already satisfied: defusedxml in /home/dragoon/anaconda3/lib/python3.9/site-packages (from nbconvert-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (0.7.1) Requirement already satisfied: entrypoints&gt;=0.2.2 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from nbconvert-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (0.4) Requirement already satisfied: bleach in /home/dragoon/anaconda3/lib/python3.9/site-packages (from nbconvert-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (4.1.0) Requirement already satisfied: mistune&lt;2,&gt;=0.8.1 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from nbconvert-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (0.8.4) Requirement already satisfied: nbclient&lt;0.6.0,&gt;=0.5.0 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from nbconvert-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (0.5.13) Requirement already satisfied: testpath in /home/dragoon/anaconda3/lib/python3.9/site-packages (from nbconvert-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (0.5.0) Requirement already satisfied: jupyterlab-pygments in /home/dragoon/anaconda3/lib/python3.9/site-packages (from nbconvert-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (0.1.2) Requirement already satisfied: pandocfilters&gt;=1.4.1 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from nbconvert-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (1.5.0) Requirement already satisfied: fastjsonschema in /home/dragoon/anaconda3/lib/python3.9/site-packages (from nbformat-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (2.15.1) Requirement already satisfied: jsonschema&gt;=2.6 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from nbformat-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (4.4.0) Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,&gt;=0.14.0 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from jsonschema&gt;=2.6-&gt;nbformat-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (0.18.0) Requirement already satisfied: attrs&gt;=17.4.0 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from jsonschema&gt;=2.6-&gt;nbformat-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (21.4.0) Requirement already satisfied: soupsieve&gt;1.2 in /home/dragoon/anaconda3/lib/python3.9/site-packages (from beautifulsoup4-&gt;nbconvert-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (2.3.1) Requirement already satisfied: webencodings in /home/dragoon/anaconda3/lib/python3.9/site-packages (from bleach-&gt;nbconvert-&gt;notebook&gt;=5.6.0-&gt;jupyterthemes) (0.5.1) Requirement already satisfied: executing in /home/dragoon/anaconda3/lib/python3.9/site-packages (from stack-data-&gt;ipython&gt;=5.4.1-&gt;jupyterthemes) (0.8.3) Requirement already satisfied: pure-eval in /home/dragoon/anaconda3/lib/python3.9/site-packages (from stack-data-&gt;ipython&gt;=5.4.1-&gt;jupyterthemes) (0.2.2) Requirement already satisfied: asttokens in /home/dragoon/anaconda3/lib/python3.9/site-packages (from stack-data-&gt;ipython&gt;=5.4.1-&gt;jupyterthemes) (2.0.5) Installing collected packages: ply, lesscpy, jupyterthemes Successfully installed jupyterthemes-0.20.0 lesscpy-0.15.1 ply-3.11 Note: you may need to restart the kernel to use updated packages. . !jt -l . Available Themes: chesterish grade3 gruvboxd gruvboxl monokai oceans16 onedork solarizedd solarizedl . !jt -t onedork . output using HTML and CSS . Multiple cells are used to setup HTML in this lesson. Many of the JavaScript cells will use the output tag(s) to write into the HTML that has been setup. . %%html is used to setup HTML code block | &quot;style&quot; tag enables visuals customization | &quot;div&quot; tag is setup to receive data | . %%html &lt;html&gt; &lt;head&gt; &lt;style&gt; #output { background-color: #353b45; padding: 10px; border: 3px solid #ccc; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;output&quot;&gt; Hello! &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . . Hello! . output explored . There are several ways to ouput the classic introduction message: &quot;Hello, World!&quot; . Before you go further, open Console on your Browser. JavaScript developer leaves Console open all the time!!! | The function console.log() outputs to Console, this is often used for inspection or debugging. | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. Developer call this a hard coded string. | &quot;Hello, World&quot; literal is a parameter to console.log(), element.txt() and alert(). | The element.txt function is part of Jupyter Notebook %%js magic. This is convenient for Notebook and testing. | The alert command outputs the parameter to a dialog box, so you can see it in this Jupyter notebook. The alert commands are shown, but are commented out as the stop run all execution of the notebook. | Note, in a Web Application Debugging: An alert is often used for less savy Developers. Console is used by more savy developers; console often requires setting up a lot of outputs. Source level debugging is the most powerful solution for debugging and does not require alert or console commands. | . %%js // required to allow cell to be JavaScript enabled console.log(&quot;JavaScript/Jupyter Output Intro&quot;); // Browser Console output; debugging or tracing console.log(&quot;Hello, World!&quot;); console.log(&quot;Hello, World Again!&quot;); // Document Object Model (DOM) output; output to HTML, CSS which is standard for a Web Page // &lt;mark&gt;select element method&lt;/mark&gt;: DOM native JavaScript get, document.getElementByID document.getElementById(&quot;output&quot;).textContent = &quot;Hello, World!&quot;; // &lt;mark&gt;jQuery CSS-style method&lt;/mark&gt;: Tag for DOM selector, $(&#39;#output&#39;) $(&#39;#output&#39;).append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); // br is break or new line, b is bold // Jupyter built in magic element for testing and convenience of development element.text(&quot;Hello, World!&quot;); // element is output option as part of %%js magic element.append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); //alert(&quot;Hello, World!&quot;); . multiple outputs using one variable . This second example is a new sequence of code, two or more lines of code forms a sequence. This example defines a variable, thank goodness!!! In the previous example we were typing the string &quot;Hello, World&quot; over and over. Observe with the variable msg=&quot;Hello, World!&quot;; we type the string once and now use msg over and over. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console, be sure to Inspect it! | The element.text() is part of Jupyter Notebooks and displays as output blow the code on this page. Until we build up some more interesting data for Web Site, we will not use be using the Python HTML, CSS technique. | The alert(msg) works the same as previous, but as the other commands uses msg as parameter. | . %%js console.log(&quot;Variable Definition&quot;); var msg = &quot;Hello, World!&quot;; // Use msg to output code to Console and Jupyter Notebook console.log(msg); //right click browser select Inspect, then select Console to view element.text(msg); //alert(msg); . output showing use of a function . This example passes the defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are multiple steps in this code.. The &quot;definition of the function&quot;: &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. Passing a parameter is required when you call this function. | The &quot;call to the function:&quot;logIt(msg)&quot; is the call to the function, this actually runs the function. The variable &quot;msg&quot; is used a parameter when calling the logIt function. | . | Showing reuse of function... There are two calls to the logIt function | This is called Prodedural Abstraction, a term that means reusing the same code | . | . %%js console.log(&quot;Function Definition&quot;); /* Function: logIt * Parameter: output * Description: The parameter is &quot;output&quot; to console and jupyter page */ function logIt(output) { console.log(output); element.append(output + &quot;&lt;br&gt;&quot;); //alert(output); } // First sequence calling logIt function var msg = &quot;Hello, World!&quot;; logIt(msg); // Second sequence calling logIt function var msg = &quot;Hello, &lt;b&gt;Students&lt;/b&gt;!&quot; // replaces content of variable var classOf = &quot;Welcome CS class of 2023-2024.&quot; logIt(msg + &quot; &quot; + classOf); // concatenation of strings . output showing Loosely typed data . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. . To define a variable you prefix the name with var or const. The variable type is determined by JavaScript at runtime. | Python and many interpretive languages are loosely typed like JavaScript. This is considered programmer friendly. | Java which is a compiled language is strongly typed, thus you will see terms like String, Integer, Double, and Object in the source code. | In JavaScript, the typeof keyword returns the type of the variable. Become familiar with type as it is valuable in conversation and knowing type help you understand how to modify data. Each variable type will have built in methods to manage content within the data type. | . %%js console.log(&quot;Examine Data Types&quot;); // Function to add typeof to output function getType(output) { return typeof output + &quot;: &quot; + output; } // Function defintion function logIt(output) { console.log(getType(output)); // logs string console.info(output); // logs object element.append(getType(output) + &quot;&lt;br&gt;&quot;); // adds to Jupyter output //alert(getType(output)); } // Common Types element.append(&quot;Common Types &lt;br&gt;&quot;); logIt(&quot;Mr M&quot;); // String logIt(1997); // Number logIt(true); // Boolean element.append(&quot;&lt;br&gt;&quot;); // Object Type, this definition is often called a array or list element.append(&quot;Object Type, array &lt;br&gt;&quot;); var scores = [ 90, 80, 100 ]; logIt(scores); element.append(&quot;&lt;br&gt;&quot;); // Complex Object, this definition is often called hash, map, hashmap, or dictionary element.append(&quot;Object Type, hash or dictionary &lt;br&gt;&quot;); var person = { // key:value pairs seperated by comma &quot;name&quot;: &quot;Mr M&quot;, &quot;role&quot;: &quot;Teacher&quot; }; logIt(person); logIt(JSON.stringify(person)); //method used to convert this object into readable format . Build a Person object and JSON . JavaScript and other languages have special properties and syntax to store and represent data. In fact, a class in JavaScript is a special function. . Definition of class allows for a collection of data, the &quot;class Person&quot; allows programmer to retain name, github id, and class of a Person. | Instance of a class, the &quot;const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; makes an object &quot;teacher&quot; which is an object representation of &quot;class Person&quot;. | Setting and Getting properties After creating teacher and student objects, observe that properties can be changed/muted or extracted/accessed. | . %%html &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;html&gt; &lt;head&gt; &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/js/jquery.tablesorter.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; /* CSS-style selector maps to table id or other id&#39;s in HTML */ #jsonTable, #flaskTable { background-color: #353b45; padding: 10px; border: 3px solid #ccc; box-shadow: 0.8em 0.4em 0.4em grey; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Table for writing and extracting jsonText --&gt; &lt;table id=&quot;jsonTable&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Classroom JSON Data&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td id=&quot;jsonText&quot;&gt;{&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]}&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; . . Classroom JSON Data . {&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]} | . . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . %%js console.log(&quot;Person objects&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: role uses a default property, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person object in JSON &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } // make a new Person Object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript // update role to Teacher teacher.setRole(&quot;Teacher&quot;); // set the role teacher.logIt(); // log to console // make a new Person Object const student = new Person(&quot;Jane Doe&quot;, &quot;jane&quot;, 2007); // object type is easy to work with in JavaScript student.logIt(); // log to console . %%js console.log(&quot;Classroom object&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: this.role is a default property retained in object, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person json &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } /* class: Classroom * Description: A collection of Person objects */ class Classroom { /* method: constructor * parameters: teacher - a Person object, students - an array of Person objects * description: returns object when &quot;new Classroom()&quot; is called containing properties and methods of a Classroom * assignment: this.classroom, this.teacher, ... are properties retained in the returned object */ constructor(teacher, students) { /* spread: this.classroom contains Teacher object and all Student objects * map: this.json contains of map of all persons to JSON */ this.teacher = teacher; this.students = students; this.classroom = [teacher, ...students]; // ... spread option this.json = &#39;{&quot;classroom&quot;:[&#39; + this.classroom.map(person =&gt; person.getJSON()) + &#39;]}&#39;; } /* method: logIT * description: &quot;this&quot; Classroom object is logged to console */ logIt() { //Classroom object console.log(this); //Classroom json element.append(&quot;Classroom object in JSON&lt;br&gt;&quot;); element.append(this.json + &quot;&lt;br&gt;&quot;); //alert(this.json); } } /* function: constructCompSciClassroom * Description: Create data for Classroom and Person objects * Returns: A Classroom Object */ function constructCompSciClassroom() { // define a Teacher object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;Teacher&quot;); // optional 4th parameter // define a student Array of Person objects const students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;VidhiKulkarni&quot;, 2024) ]; // make a CompSci classroom from formerly defined teacher and student objects return new Classroom(teacher, students); // returns object } // assigns &quot;compsci&quot; to the object returned by &quot;constructCompSciClassroom()&quot; function const compsci = constructCompSciClassroom(); // output of Objects and JSON in CompSci classroom compsci.logIt(); // enable sharing of data across jupyter cells $(&#39;#jsonText&#39;).text(compsci.json); // posts/embeds/writes compsci.json to HTML DOM element called jsonText . for loop to generate Table Rows in HTML output . This code extracts JSON text from HTML, that was placed in DOM in an earlier JavaScript cell, then it parses text into a JavaScript object. In addition, there is a for loop that iterates over the extracted object generating formated rows and columns in an HTML table. . Table generation is broken into parts... table data is obtained from a classroom array inside of the extracted object. | the JavaScript for loop allows the construction of a new row of data for each Person hash object inside of the the Array. | in the loop a table row &lt;tr&gt; ... &lt;/tr&gt; is created for each Hash object in the Array. | in the loop table data, a table column, &lt;td&gt; ... &lt;/td&gt; is created for name, ghID, classOf, and role within the Hash object. | . | . %%js console.log(&quot;Classroom Web Page&quot;); // extract JSON text from HTML page const jsonText = document.getElementById(&quot;jsonText&quot;).innerHTML; console.log(jsonText); element.append(&quot;Raw jsonText element embedded in HTML&lt;br&gt;&quot;); element.append( jsonText + &quot;&lt;br&gt;&quot;); // convert JSON text to Object const classroom = JSON.parse(jsonText).classroom; console.log(classroom); // from classroom object creates rows and columns in HTML table element.append(&quot;&lt;br&gt;Formatted data sample from jsonText &lt;br&gt;&quot;); for (var row of classroom) { element.append(row.ghID + &quot; &quot; + row.name + &#39;&lt;br&gt;&#39;); // tr for each row, a new line $(&#39;#classroom&#39;).append(&#39;&lt;tr&gt;&#39;) // td for each column of data $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.ghID + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.classOf + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.role + &#39;&lt;/td&gt;&#39;) // tr to end row $(&#39;#classroom&#39;).append(&#39;&lt;/tr&gt;&#39;); } . %%html &lt;head&gt; &lt;!-- load jQuery and DataTables syle and scripts --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.datatables.net/1.10.25/css/jquery.dataTables.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;table id=&quot;flaskTable&quot; class=&quot;table&quot; style=&quot;width:100%&quot;&gt; &lt;thead id=&quot;flaskHead&quot;&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;DOB&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;flaskBody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;script&gt; $(document).ready(function() { fetch(&#39;https://flask.nighthawkcodingsociety.com/api/users/&#39;, { mode: &#39;cors&#39; }) .then(response =&gt; { if (!response.ok) { throw new Error(&#39;API response failed&#39;); } return response.json(); }) .then(data =&gt; { for (const row of data) { // BUG warning/resolution - DataTable requires row to be single append $(&#39;#flaskBody&#39;).append(&#39;&lt;tr&gt;&lt;td&gt;&#39; + row.id + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.dob + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.age + &#39;&lt;/td&gt;&lt;/tr&gt;&#39;); } // BUG warning - Jupyter does not show Datatable controls, works on deployed GitHub pages $(&quot;#flaskTable&quot;).DataTable(); }) .catch(error =&gt; { console.error(&#39;Error:&#39;, error); }); }); &lt;/script&gt; . . ID Name DOB Age . Hacks . One key to these hacks is to build confidence with me going into final grade, I would like to see each student adapt this frontend work in their final project. Second key is the finished work can serve as review for the course, notes for the future in relationship to frontend. . Adapt this tutorial to your own work | Consider what you need to work on to be stronger developer | Show something creative or unique, no cloning | Be ready to talk to Teacher for 5 to 10 minutes. Individually!!! | Show in Jupyter Notebook during discussion, show Theme and ChatGPT | Have a runtime final in GithHub Pages (or Fastpage) | . USE COMMAND &quot;jupyter notebook .&quot; while in _notebooks directory to open in jupyter. .",
            "url": "https://jyustin.github.io/test-fastpages/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "notes for focus and habits hacks",
            "content": "using positive psychology to improve life . give time for healthy habits -mindful moment -meditation . insights . 1: “this enterprise is possible” you can control your happiness. You control how happy you are. . although genes control 50% happiness other 50% s happiness you control . it is your own behaviors that make you happy . 2: you can become happy, but it takes work . if you build good, healthy habits into your routine, you will become happy. need to do it every day. . 3: recognize that your mind is not always telling you what makes you happy . ex: people think that salary makes one happy but in truth wealthy people are not all very happy. . minds lie to you about what you can do to be happier. . 4: establish social connections. being with others makes . ex: spending money on others makes you happy and the receivers happy. . 5: make time for gratitude every day. . when you talk to others, talk about gratitude . express gratitude to those who have helped you . focus on blessings, not hassle . 6: exercise is extremely good for your mental health. . 7: get enough sleep . 8: take time to be in the present moment. . 9: become wealthy in terms of time. . value your time more than becoming more rich. use your time to become healthy . gratitude list . 1: My family, who have always been there for me . 2: my country. I am grateful for the freedom I have here . 3: I am grateful to be in a nice neighborhood and have friendly neighbors to see every day . 4: My friends, who support me and help me through hard times . future goals . 1: improve at programming so that I can contribute to open source projects I like . 2: Study hard and become successful like my parents . 3: do simple exercise daily to keep my body in shape .",
            "url": "https://jyustin.github.io/test-fastpages/notes/2022/09/15/health.html",
            "relUrl": "/notes/2022/09/15/health.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post72": {
            "title": "Jupyter note books test blog",
            "content": "print(&quot;hello real world&quot;) . hello world .",
            "url": "https://jyustin.github.io/test-fastpages/python%20codes/week%200/2022/09/14/testbook.html",
            "relUrl": "/python%20codes/week%200/2022/09/14/testbook.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post73": {
            "title": "quizz project",
            "content": "week 2 this is my online quiz coded in python. Although it does not work on a jupyter notebook blog page, I can explain how it works. You simply just type in an input and the code will compare it to the preset correct value. If they match, the answer is considered correct. . UPDATE 9/1/2022: Used lists to tell user which problems they got wrong at the end of the quiz, as well as problems right. problems are also stored in a dictionary. . correct = 0 #this part used to keep track of correct answers and show how many correct and percentage at end of quiz int(correct) dict = { &quot;1&quot;: &quot;question 1: Name the Python output command mentioned in this lesson&quot;, &quot;2&quot;: &quot;question 2: If you see many lines of code in order, what would College Board call it?&quot;, &quot;3&quot;: &quot;question 3: Describe a keyword used in Python to define a function?&quot;, &quot;4&quot;: &quot;question 4: What command is used to include other functions that were previously developed?&quot;, } list = [] crlist = [] print(dict.get(&quot;1&quot;)) ans = input() if ans == &quot;print&quot;: #used to determine if answer was right or not print(ans, &quot;is correct!&quot;) correct = correct + 1 #keep track of correct answers crlist.append(&quot;1&quot;) else: print(ans, &quot;is wrong!&quot;) list.append(&quot;1&quot;) print(dict.get(&quot;2&quot;)) #basically code from top part, I don&#39;t rly know how to make it so I dont have to ans = input() if ans == &quot;sequence&quot;: print(ans,&quot;is correct!&quot;) correct = correct + 1 crlist.append(&quot;2&quot;) else: print(ans, &quot;is wrong!&quot;) list.append(&quot;2&quot;) print(dict.get(&quot;3&quot;)) ans = input() if ans == &quot;def&quot;: print(ans, &quot;is correct!&quot;) correct = correct + 1 crlist.append(&quot;3&quot;) else: print(ans, &quot;is wrong!&quot;) list.append(&quot;3&quot;) print(dict.get(&quot;4&quot;)) ans = input() if ans == &quot;import&quot;: print(ans, &quot;is correct!&quot;) correct = correct + 1 crlist.append(&quot;4&quot;) else: print(ans, &quot;is wrong!&quot;) list.append(&quot;4&quot;) (percentage) = (correct/4)*100 #use to calculate percentage of correct int(percentage) print(&quot;you got&quot;, correct, &quot;correct!&quot;) print(percentage, &quot;%&quot;) wrongs = &quot;, &quot;.join(list) rights = &quot;, &quot;.join(crlist) print(&quot;these questions are wrong:&quot;, wrongs) print(&quot;these questions are right:&quot;, rights) . question 1: Name the Python output command mentioned in this lesson print is correct! question 2: If you see many lines of code in order, what would College Board call it? def is wrong! question 3: Describe a keyword used in Python to define a function? def is correct! question 4: What command is used to include other functions that were previously developed? d is wrong! you got 2 correct! 50.0 % these questions are wrong: 2, 4 these questions are right: 1, 3 .",
            "url": "https://jyustin.github.io/test-fastpages/python%20codes/week%202/2022/09/14/quizz.html",
            "relUrl": "/python%20codes/week%202/2022/09/14/quizz.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post74": {
            "title": "Poem(post In Docx)",
            "content": "Either you will . go through this door . or you will not go through. . If you go through . there is always the risk . of remembering your name. . Things look at you doubly . and you must look back . and let them happen. . If you do not go through . it is possible . to live worthily . to maintain your attitudes . to hold your position . to die bravely . but much will blind you, . much will evade you, . at what cost who knows? . The door itself makes no promises. . It is only a door. .",
            "url": "https://jyustin.github.io/test-fastpages/2022/09/14/poem(post-in-docx).html",
            "relUrl": "/2022/09/14/poem(post-in-docx).html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post75": {
            "title": "notes for ap csp",
            "content": "week 1 note in a jupyter notebook .",
            "url": "https://jyustin.github.io/test-fastpages/jupyter/2022/09/14/notes.html",
            "relUrl": "/jupyter/2022/09/14/notes.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post76": {
            "title": "lists and dictionaries",
            "content": "InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Justin&quot;, &quot;LastName&quot;: &quot;Nguyen&quot;, &quot;DOB&quot;: &quot;July 28 2006&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;supercatsd@gmail.com&quot;, &quot;favorite_fruit&quot;: &quot;apple&quot;, &quot;Owns_Cars&quot;: [&quot;none&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;bob&quot;, &quot;LastName&quot;: &quot;the&quot;, &quot;DOB&quot;: &quot;none&quot;, &quot;Residence&quot;: &quot;homeless&quot;, &quot;Email&quot;: &quot;no computer&quot;, &quot;favorite_fruit&quot;: &quot;banana&quot;, &quot;Owns_Cars&quot;: [&quot;expensive car&quot;] }) # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Email: &quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;favorite fruit: &quot;, d_rec[&quot;favorite_fruit&quot;]) # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Justin Nguyen Residence: San Diego Birth Day: July 28 2006 Cars: none Email: supercatsd@gmail.com favorite fruit: apple bob the Residence: homeless Birth Day: none Cars: expensive car Email: no computer favorite fruit: banana . fruits = {} for i in range(5): fruit = input(&quot;Enter fruit: &quot;) color = input(&quot;Enter color: &quot;) fruits[fruit] = color print(&quot;the fruits you typed were: &quot;) for key in fruits: print(key) print(&quot;and the colors of those fruits were: &quot;) for key in fruits: print(key,&quot;:&quot;, fruits[key]) . the fruits you typed were: apple banana and the colors of those fruits were: apple : red banana : yello .",
            "url": "https://jyustin.github.io/test-fastpages/python%20codes/2022/09/14/lists-and-dictionaries.html",
            "relUrl": "/python%20codes/2022/09/14/lists-and-dictionaries.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post77": {
            "title": "bash hacks",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/thisisabashtest # change vscode to different name to test git clone export project=$project_dir/sympy # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/sympy/sympy.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/id/thisisabashtest exists. Directory /home/id/thisisabashtest/sympy does not exists... cloning https://github.com/sympy/sympy.git Cloning into &#39;sympy&#39;... remote: Enumerating objects: 363105, done. remote: Counting objects: 100% (39/39), done. remote: Compressing objects: 100% (33/33), done. remote: Total 363105 (delta 17), reused 12 (delta 6), pack-reused 363066 Receiving objects: 100% (363105/363105), 161.52 MiB | 8.65 MiB/s, done. Resolving deltas: 100% (291308/291308), done. Directory /home/id/thisisabashtest/sympy exists. . Output exceeds the size limit. Open the full output data in a text editor Navigate to project, then navigate to area wwhere files were cloned /home/id/thisisabashtest/sympy . list top level or root of files with project pulled from github AUTHORS asv.conf.travis.json github_deploy_key.enc CODEOWNERS banner.svg isympy.py CODE_OF_CONDUCT.md bin pytest.ini CONTRIBUTING.md codecov.yml release LICENSE conftest.py setup.cfg MANIFEST.in coveragerc_travis setup.py PULL_REQUEST_TEMPLATE.md data setupegg.py README.md doc sympy asv.conf.actions.json examples . list again with hidden files pulled from github . .travis.yml asv.conf.travis.json isympy.py .. AUTHORS banner.svg pytest.ini .ci CODEOWNERS bin release .circleci CODE_OF_CONDUCT.md codecov.yml setup.cfg .editorconfig CONTRIBUTING.md conftest.py setup.py .git LICENSE coveragerc_travis setupegg.py .gitattributes MANIFEST.in data sympy .github PULL_REQUEST_TEMPLATE.md doc .gitignore README.md examples .mailmap asv.conf.actions.json github_deploy_key.enc ... -rw-r--r-- 1 id id 2088 Aug 25 16:50 setup.cfg -rwxr-xr-x 1 id id 15142 Aug 25 16:50 setup.py -rw-r--r-- 1 id id 49 Aug 25 16:50 setupegg.py drwxr-xr-x 42 id id 4096 Aug 25 16:50 sympy . Output exceeds the size limit. Open the full output data in a text editor Look for posts bash: cd: /home/id/thisisabashtest/sympy/_posts: No such file or directory /home/id/thisisabashtest/sympy total 268 -rw-r--r-- 1 id id 46763 Aug 25 16:50 AUTHORS -rw-r--r-- 1 id id 590 Aug 25 16:50 CODEOWNERS -rw-r--r-- 1 id id 3267 Aug 25 16:50 CODE_OF_CONDUCT.md -rw-r--r-- 1 id id 625 Aug 25 16:50 CONTRIBUTING.md -rw-r--r-- 1 id id 7885 Aug 25 16:50 LICENSE -rw-r--r-- 1 id id 496 Aug 25 16:50 MANIFEST.in -rw-r--r-- 1 id id 1168 Aug 25 16:50 PULL_REQUEST_TEMPLATE.md -rw-r--r-- 1 id id 11587 Aug 25 16:50 README.md -rw-r--r-- 1 id id 3141 Aug 25 16:50 asv.conf.actions.json -rw-r--r-- 1 id id 2774 Aug 25 16:50 asv.conf.travis.json -rw-r--r-- 1 id id 87868 Aug 25 16:50 banner.svg drwxr-xr-x 2 id id 4096 Aug 25 16:50 bin -rw-r--r-- 1 id id 196 Aug 25 16:50 codecov.yml -rw-r--r-- 1 id id 2944 Aug 25 16:50 conftest.py -rw-r--r-- 1 id id 316 Aug 25 16:50 coveragerc_travis drwxr-xr-x 3 id id 4096 Aug 25 16:50 data drwxr-xr-x 7 id id 4096 Aug 25 16:50 doc drwxr-xr-x 6 id id 4096 Aug 25 16:50 examples -rw-r--r-- 1 id id 4408 Aug 25 16:50 github_deploy_key.enc -rw-r--r-- 1 id id 11199 Aug 25 16:50 isympy.py -rw-r--r-- 1 id id 424 Aug 25 16:50 pytest.ini ... -rw-r--r-- 1 id id 2088 Aug 25 16:50 setup.cfg -rwxr-xr-x 1 id id 15142 Aug 25 16:50 setup.py -rw-r--r-- 1 id id 49 Aug 25 16:50 setupegg.py drwxr-xr-x 42 id id 4096 Aug 25 16:50 sympy . Output exceeds the size limit. Open the full output data in a text editor Look for notebooks bash: cd: /home/id/thisisabashtest/sympy/_notebooks: No such file or directory /home/id/thisisabashtest/sympy total 268 -rw-r--r-- 1 id id 46763 Aug 25 16:50 AUTHORS -rw-r--r-- 1 id id 590 Aug 25 16:50 CODEOWNERS -rw-r--r-- 1 id id 3267 Aug 25 16:50 CODE_OF_CONDUCT.md -rw-r--r-- 1 id id 625 Aug 25 16:50 CONTRIBUTING.md -rw-r--r-- 1 id id 7885 Aug 25 16:50 LICENSE -rw-r--r-- 1 id id 496 Aug 25 16:50 MANIFEST.in -rw-r--r-- 1 id id 1168 Aug 25 16:50 PULL_REQUEST_TEMPLATE.md -rw-r--r-- 1 id id 11587 Aug 25 16:50 README.md -rw-r--r-- 1 id id 3141 Aug 25 16:50 asv.conf.actions.json -rw-r--r-- 1 id id 2774 Aug 25 16:50 asv.conf.travis.json -rw-r--r-- 1 id id 87868 Aug 25 16:50 banner.svg drwxr-xr-x 2 id id 4096 Aug 25 16:50 bin -rw-r--r-- 1 id id 196 Aug 25 16:50 codecov.yml -rw-r--r-- 1 id id 2944 Aug 25 16:50 conftest.py -rw-r--r-- 1 id id 316 Aug 25 16:50 coveragerc_travis drwxr-xr-x 3 id id 4096 Aug 25 16:50 data drwxr-xr-x 7 id id 4096 Aug 25 16:50 doc drwxr-xr-x 6 id id 4096 Aug 25 16:50 examples -rw-r--r-- 1 id id 4408 Aug 25 16:50 github_deploy_key.enc -rw-r--r-- 1 id id 11199 Aug 25 16:50 isympy.py -rw-r--r-- 1 id id 424 Aug 25 16:50 pytest.ini ... -rw-r--r-- 1 id id 2088 Aug 25 16:50 setup.cfg -rwxr-xr-x 1 id id 15142 Aug 25 16:50 setup.py -rw-r--r-- 1 id id 49 Aug 25 16:50 setupegg.py drwxr-xr-x 42 id id 4096 Aug 25 16:50 sympy . Output exceeds the size limit. Open the full output data in a text editor Look for images in notebooks, print working directory, list files bash: cd: /home/id/thisisabashtest/sympy/_notebooks/images: No such file or directory /home/id/thisisabashtest/sympy total 268 -rw-r--r-- 1 id id 46763 Aug 25 16:50 AUTHORS -rw-r--r-- 1 id id 590 Aug 25 16:50 CODEOWNERS -rw-r--r-- 1 id id 3267 Aug 25 16:50 CODE_OF_CONDUCT.md -rw-r--r-- 1 id id 625 Aug 25 16:50 CONTRIBUTING.md -rw-r--r-- 1 id id 7885 Aug 25 16:50 LICENSE -rw-r--r-- 1 id id 496 Aug 25 16:50 MANIFEST.in -rw-r--r-- 1 id id 1168 Aug 25 16:50 PULL_REQUEST_TEMPLATE.md -rw-r--r-- 1 id id 11587 Aug 25 16:50 README.md -rw-r--r-- 1 id id 3141 Aug 25 16:50 asv.conf.actions.json -rw-r--r-- 1 id id 2774 Aug 25 16:50 asv.conf.travis.json -rw-r--r-- 1 id id 87868 Aug 25 16:50 banner.svg drwxr-xr-x 2 id id 4096 Aug 25 16:50 bin -rw-r--r-- 1 id id 196 Aug 25 16:50 codecov.yml -rw-r--r-- 1 id id 2944 Aug 25 16:50 conftest.py -rw-r--r-- 1 id id 316 Aug 25 16:50 coveragerc_travis drwxr-xr-x 3 id id 4096 Aug 25 16:50 data drwxr-xr-x 7 id id 4096 Aug 25 16:50 doc drwxr-xr-x 6 id id 4096 Aug 25 16:50 examples -rw-r--r-- 1 id id 4408 Aug 25 16:50 github_deploy_key.enc -rw-r--r-- 1 id id 11199 Aug 25 16:50 isympy.py -rw-r--r-- 1 id id 424 Aug 25 16:50 pytest.ini ... -rw-r--r-- 1 id id 2088 Aug 25 16:50 setup.cfg -rwxr-xr-x 1 id id 15142 Aug 25 16:50 setup.py -rw-r--r-- 1 id id 49 Aug 25 16:50 setupegg.py drwxr-xr-x 42 id id 4096 Aug 25 16:50 sympy . Output exceeds the size limit. Open the full output data in a text editor Navigate to project, then navigate to area wwhere files were cloned show the contents of README.md . SymPy . . . See the AUTHORS file for the list of authors. . And many more people helped on the SymPy mailing list, reported bugs, helped organize SymPy&#39;s participation in the Google Summer of Code, the Google Highly Open Participation Contest, Google Code-In, wrote and blogged about SymPy... ... also consider contributing all your changes back, so that we can incorporate it and all of us will benefit in the end. . end of README.md . Output exceeds the size limit. Open the full output data in a text editor Show the shell environment variables, key on left of equal value on right . SHELL=/bin/bash PYTHONUNBUFFERED=1 project=/home/id/thisisabashtest/sympy CONDA_EXE=/home/id/anaconda3/bin/conda _CE_M= APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL=1 WSL_DISTRO_NAME=Ubuntu ELECTRON_RUN_AS_NODE=1 VSCODE_AMD_ENTRYPOINT=vs/workbench/api/node/extensionHostProcess NAME=Code PWD=/home/id/thisisabashtest/sympy LOGNAME=id CONDA_PREFIX=/home/id/anaconda3 MOTD_SHOWN=update-motd project_dir=/home/id/thisisabashtest HOME=/home/id LANG=C.UTF-8 WSL_INTEROP=/run/WSL/8_interop LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:.tar=01;31:.tgz=01;31:.arc=01;31:.arj=01;31:.taz=01;31:.lha=01;31:.lz4=01;31:.lzh=01;31:.lzma=01;31:.tlz=01;31:.txz=01;31:.tzo=01;31:.t7z=01;31:.zip=01;31:.z=01;31:.dz=01;31:.gz=01;31:.lrz=01;31:.lz=01;31:.lzo=01;31:.xz=01;31:.zst=01;31:.tzst=01;31:.bz2=01;31:.bz=01;31:.tbz=01;31:.tbz2=01;31:.tz=01;31:.deb=01;31:.rpm=01;31:.jar=01;31:.war=01;31:.ear=01;31:.sar=01;31:.rar=01;31:.alz=01;31:.ace=01;31:.zoo=01;31:.cpio=01;31:.7z=01;31:.rz=01;31:.cab=01;31:.wim=01;31:.swm=01;31:.dwm=01;31:.esd=01;31:.jpg=01;35:.jpeg=01;35:.mjpg=01;35:.mjpeg=01;35:.gif=01;35:.bmp=01;35:.pbm=01;35:.pgm=01;35:.ppm=01;35:.tga=01;35:.xbm=01;35:.xpm=01;35:.tif=01;35:.tiff=01;35:.png=01;35:.svg=01;35:.svgz=01;35:.mng=01;35:.pcx=01;35:.mov=01;35:.mpg=01;35:.mpeg=01;35:.m2v=01;35:.mkv=01;35:.webm=01;35:.ogm=01;35:.mp4=01;35:.m4v=01;35:.mp4v=01;35:.vob=01;35:.qt=01;35:.nuv=01;35:.wmv=01;35:.asf=01;35:.rm=01;35:.rmvb=01;35:.flc=01;35:.avi=01;35:.fli=01;35:.flv=01;35:.gl=01;35:.dl=01;35:.xcf=01;35:.xwd=01;35:.yuv=01;35:.cgm=01;35:.emf=01;35:.ogv=01;35:.ogx=01;35:.aac=00;36:.au=00;36:.flac=00;36:.m4a=00;36:.mid=00;36:.midi=00;36:.mka=00;36:.mp3=00;36:.mpc=00;36:.ogg=00;36:.ra=00;36:.wav=00;36:.oga=00;36:.opus=00;36:.spx=00;36:*.xspf=00;36: WAYLAND_DISPLAY=wayland-0 CONDA_PROMPT_MODIFIER=(base) PYDEVD_USE_FRAME_EVAL=NO posts=/home/id/thisisabashtest/sympy/_posts ... VSCODE_HANDLES_UNCAUGHT_ERRORS=true OLDPWD=/home/id/thisisabashtest/sympy VSCODE_IPC_HOOKCLI=/mnt/wslg/runtime-dir/vscode-ipc-0e02c704-d0af-493b-8de2-004642c092f5.sock=/usr/bin/env . show the secrets of .git total 256 -rw-r--r-- 1 id id 23 Aug 25 16:50 HEAD drwxr-xr-x 2 id id 4096 Aug 25 16:50 branches -rw-r--r-- 1 id id 259 Aug 25 16:50 config -rw-r--r-- 1 id id 73 Aug 25 16:50 description drwxr-xr-x 2 id id 4096 Aug 25 16:50 hooks -rw-r--r-- 1 id id 209328 Aug 25 16:50 index drwxr-xr-x 2 id id 4096 Aug 25 16:50 info drwxr-xr-x 3 id id 4096 Aug 25 16:50 logs drwxr-xr-x 4 id id 4096 Aug 25 16:50 objects -rw-r--r-- 1 id id 8197 Aug 25 16:50 packed-refs drwxr-xr-x 5 id id 4096 Aug 25 16:50 refs . look at config file [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true [remote &quot;origin&quot;] url = https://github.com/sympy/sympy.git fetch = +refs/heads/:refs/remotes/origin/ [branch &quot;master&quot;] remote = origin merge = refs/heads/master . BASH HACKS . we can use list function to list a certain set of files, then we can compare the version of those files to the latest release . | you can use conda list to list all of your packages, then use conda update PACKAGENAME to update any old packages . | in order to update a repository you could use some git commands like git add to add files, or git push to push any changes we make. . | there are lots of different commands that could be run from installation if we install everything in a bash script. for example, you could use ./file.sh to automatically execute the script if it is executable, so if we install something with a bash script, that same script could use this to automatically execute the script we got. . |",
            "url": "https://jyustin.github.io/test-fastpages/bash/week%201/2022/09/14/bashhacks.html",
            "relUrl": "/bash/week%201/2022/09/14/bashhacks.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post78": {
            "title": "computing purpose and collaboration notes",
            "content": ". . apcsp week 4 notes . collaboration . collaboration helps to take code further . go by yourself if you want to go fast, go with others if you want to go far . pair share code: a pair works together to code. 1 person types in code, the other person comments on it . leave helpful comments on code to make it easier for others to understand . computing purpose . Computing innovation Categories applications, physical devices, systems SOCIAL MEDIA:allows people to communicate from long distances ECOMMERICE: allows user to ignore hassle of visiting store or looking for specific items . computing innovations solve problems . Computing innovations allow us to do what we would have never thought of before, solve problems or pursue interests in creative expression. . program input usually from User . Program input usually effects output. . programs accept input in different forms: . touch . audio . visual . text . ex: smartphone accepts input from touchscreen, buttons get input from touch, text (entering password) . programs written in event oriented environment . ex: what type of events can user trigger? think of things like mouse clicks, audio input, etc. . Input usually effects output, but not always. you need to sometimes do specific thing to trigger output . action may trigger event . code segments may be called by certain actions . program function . A program is only a collection of program statements that do something when run by computer . A code segment is a collection of program statements, so a code segment is part of a program . programs need to work for variety of inputs and situations . A program is a set of statements . A statement is a single command. . A group of statements is called a code segment . Program design and development . How is program developed? . start with idea . developed with specific purpose in mind . create plan. . sometimes development is exploratory. discovering the new. . developers investigate problem and reflect. investigation is important in development. . determine constraints, user concerns, requirements. . after investigating developers design program . -brainstorm ideas . -plan user experience . How is program developed? . developers decide on program requirements, then use outline to make prototype. . make sure program is tested. . refine and revise program based on reflection . test . working with others on development . program development is usually team based. . Individuals work on different components. . MAKE SURE TO CREDIT OTHERS. NAMES MUST BE WRITTEN IN DOCUMENTATION. GIVE CREDIT WHERE CREDIT IT DUE, EVEN FOR SMALL THINGS. . you can use comments to give credit . you can also use comment to notify bugs. . using other’s code segments is useful in saving time. You can use other’s code segments but you have to give credit in documentation. . Program documentation is a description of code segments, programs,and how it was developed. . Program documentation describes program, its requirements, its functions/methods, and it’s development, as well as contributors. . documentation improves productivity. it is helpful to remember things and tell others what you were thinking. . comments are the best way to do documentation. use good comments to remind yourself of stuff or help other programmers know what you were thinking . Use comments to help others who read your code . 4.1 . how do computers connect to network? . computers used to not be able to communicate along networks. now computers can send and recieve data. this data is transfered in packets. Packets have source and destination. Packets like envelopes. . packet switching: a msg is broken into packets and sent. the packets are rebuilt on the recipients device. . Bandwidth is max amount of data sent in a fixed amount of time on computer network. . Packets help move data a little bit at a time. . how does the internet work? . Protocol is agreed-upon set of rules the specify behavior of system. . protocols dictate rules for info being transferred, data goes thru layers. . Network access Layer. data hops from our computer to internet Layer Data Transmission. . Data Transmission: data goes through routers and go through paths. no definite path. . Transport Layer: TCP looks over packets fixes errors. UCP is more lax. . Application layer: ips are changed to names. . questions wrong . I got one question on the first quiz wrong because I misread the question. . I got 2 wrong on the 2nd quiz. It was sometimes hard to understand how sudo code worked and how it would run. The descriptions for the programs were also hard to understand. . I got all 3 right on the last quiz, but the 2nd question was kind of hard to understand. . .",
            "url": "https://jyustin.github.io/test-fastpages/markdown/week%203/2022/09/13/apcspnotes.html",
            "relUrl": "/markdown/week%203/2022/09/13/apcspnotes.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post79": {
            "title": "performance task",
            "content": "ideas for performance task: 1: simple game, perhaps snake (a line moves across a screen and grows when it passes berry units, but dies when it hits the border of the screen or hits itself) meets row 1: idea will require explaining of how code works meets row 2: requires snake data to be stored meets row 3: will need lists for berries meets row 4: will need this meets row 5: will definetly need to use some sort of algorithm for generating berries meets row 6: will need functions to work I think this is a good idea, but I feel like it will 2: tic-tac-toe against a cpu (play tic-tac-toe against a cpu that randomly selects tiles, implementing cpu could be hard) 3: text based adventure game (an adventure game based entirely on text by computer, pretty easy to build) .",
            "url": "https://jyustin.github.io/test-fastpages/markdown/week%203/2022/09/08/createperformancetask.html",
            "relUrl": "/markdown/week%203/2022/09/08/createperformancetask.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post80": {
            "title": "html experiment",
            "content": "my html experiments week 2 . while the theme is cool, it isn’t very functional as it is missing the links to pages in the top page. It isn’t possible to go to about me or tags or those things on this theme. The theme is also feels unprofessional, and there is a section at the top with a link to the github of the hacker theme. .",
            "url": "https://jyustin.github.io/test-fastpages/markdown/week%202/2022/08/31/html-documentation.html",
            "relUrl": "/markdown/week%202/2022/08/31/html-documentation.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post81": {
            "title": "md",
            "content": "week 0 . THIS IS A HEADER . this is a subheader . this is my first post using md . this is a link to ebay . this is italizized text . this is bold text . this should be a picture of an orange below . ok .",
            "url": "https://jyustin.github.io/test-fastpages/markdown/week%200/2022/08/19/md.html",
            "relUrl": "/markdown/week%200/2022/08/19/md.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post82": {
            "title": "Mario in Motion",
            "content": ".",
            "url": "https://jyustin.github.io/test-fastpages/2022/07/19/PBL-mario-animation.html",
            "relUrl": "/2022/07/19/PBL-mario-animation.html",
            "date": " • Jul 19, 2022"
        }
        
    
  
    
        ,"post83": {
            "title": "Mario in Motion OOP",
            "content": ". .",
            "url": "https://jyustin.github.io/test-fastpages/2022/07/19/PBL-mario-animation-oop.html",
            "relUrl": "/2022/07/19/PBL-mario-animation-oop.html",
            "date": " • Jul 19, 2022"
        }
        
    
  
    
        ,"post84": {
            "title": "extra credit 3/28/23",
            "content": "(this little blurb of text is all unimportant stuff you can skip if you want) First of all, I managed to get to the event right as the presentation was starting, as my band mentoring session was cut short. I admit I was not there exactly at 3:50, in fact I was about 5 minutes late, but the presentators said they were starting right about that time, so I think I got there right as they started. . uncategorized notes . Computing and programming is usable in all different types of jobs . Pathways? . Computer science, computer information, cyber security, computer engineering (in terms of computing) . Lots of different STEM pathways a calstste . different professors and their emails were given at this event, I could contact them for help (idk if i will but it is there) . Cool clubs at calstate (robotics club, cybersecurity club, etc.) . Internships . An internshp is a period of work experence offered by an organizatio . Joining clubs can help you find internships . Networking is also very helpful to finding internships . check ur emails . look up internship opportunities . AVOID UNPAID INTERNSHIPS . You can apply even if you feel underqualified. worse thing is rejection . cool summer scholars program to help you be involved in research, also get paid. . Quantum bridge program: . you get to study quantum stuff if ur applied to calstate uni . cool research a Cal state as well . paying 4 college . grants are money from govt. for you to go to college . You can get loans :/ . try to avoid loans . 2 different kinds: subsidized loan and unsubsidized loan: . subsidized reduces interest . unsubsidized puts interest on you right after graduation . applying for scholarship . Apply for FAFSA, studentaid.gov . Look up “undergraduate scholarship applications” . You can get payed if you pursue masters degree . conclusion . there was a lot of helpful advice in this presentation about life in college and advice for paying for college, getting internships, etc. I do feel like there was more about Cal state than actual helpful advice, but there as definetly some key takeaways from this event. Biggest thing I can take away from this is that there are a lot of benefits from expanding your circle of connections like increased internship opportunities. Another key takeaway is that there are a lot of ways for students to reduce the cost of college, however you need to put in some work to reduce your cost of college. Lastly, Calstate, and most likely other colleges, will have different research and internship programs for people to apply for that can have great benefits for students, however you need to find these opportunities through googling, hearing it from people, or just checking email or notifications often. . extra photos and a video . . . . There was a cool lab at where we got to use a battery to cause a toothbrush to vibrate. . AND I WON A BEANIE (and some pens) .",
            "url": "https://jyustin.github.io/test-fastpages/2022/03/28/notesforxtra2.html",
            "relUrl": "/2022/03/28/notesforxtra2.html",
            "date": " • Mar 28, 2022"
        }
        
    
  
    
        ,"post85": {
            "title": "Night at the Museum reflection (the one for 2nd tri)",
            "content": "our presentation to teacher and others . I think that our presentation to the teacher was good, although there wasn’t much we could mess up. . We had: . 4 different features with incoropration with an sqlite database, . fetching from our main deployment for a couple of our features and printing it out onto the frontend (GH pages) . using post method to allow users to post to the database, . and API for the frontend to fetch from for our features. . Our presentation went smoothly and we made sure to highlight our full stack and our ability to fetch and post from the database. If we did the presentation to teacher again, there isn’t much different we could change except for maybe also showing the Sqlite database being viewable on vscode and it changing with the post methods on the website. . other projects . One project I viewed was a Flight Planner Project. This project did not have a functioning database nor did it have fetch or even API’s to fetch from. Although their project was broken and didn’t really have full stack, i felt like their frontend was well designed and they definetly put effort into designing their frontend. Maybe if they focused more on getting full stack up before design and frontend,, things would have been better for them. . . I saw another project that had a strong focus on users and storing user data. This was interesting for me because our project barely put any emphasis on users, but focused more on creative features. For their project, they stored users in a database and could store user scores from the games on their page on a leaderboard. This was interesting for me because all our team was focused on was getting this database up and fetching, but they also apparently could also use that data for a leaderboard and basically interact with the data or at least sort it. Adding a more in depth user system for us could have definently been a worthwhile endeavor for our project. . final reflection . I feel like our project met the mark, however didn’t go above and beyond and explore other extra features. Things like a user system were planned from the start, but were never developed due to difficulties and lack of time to develop. On the other hand, meeting the mark was still quite difficult, as developing the database and getting fetch and post to work took a lot of effort, and judging from other’s struggle to get their project into functionality, I think that meeting the mark for this project was difficult but more than enough for me and our team. Maybe next time we will have a more well developed project to show at N@TM. . other arts classes . . . . . these other projects were definently more eye-catching for general visitors than our project, but I still feel like a cool program that was technically impressive could be as cool as a live music performance or a nice ceramic item. If our project had a really cool technical showcase, it may have been something worth showing off. .",
            "url": "https://jyustin.github.io/test-fastpages/reflection/2022/02/17/NATM2.html",
            "relUrl": "/reflection/2022/02/17/NATM2.html",
            "date": " • Feb 17, 2022"
        }
        
    
  
    
        ,"post86": {
            "title": "Project Blog",
            "content": "College board Performance task outline . Materials . I will need to have a Performance task created that hits on all of the marks for the CB Performance task rubric. I will also need to record a video demonstrating program functionality. I also need to create a write up for my performance task that fulfills each of the points on the CB perofmrnace task. . From the project I will use my own feature for my College Board performance task. this feature I will be taking for use in the performance task will be a program that gives the user a random fact/random word from a list, and allow users be tested on a random word’s definition . code . The code will have a main function that creates a random word definition question by pulling from a question list, then it will compare a user’s answer to the right answer and either output correct or not correct. There will also be a second function that just puts a random fact/word in the markdown fact/word table. although the 2nd function for random words/facts is done, creating the 2nd function that creates and tests the random queston is unfinished. Ideally, It will pull a random word question and then compare the user’s answer to the correct answer, then output to the user whether or not they got the question right or wrong. . College Board rubric (does it fulfil requirements?) . Row 1 . the program I am writing has an input (the answer to the questions) and output, as well as functionality and purpose. The purpose of the program is to entertain and educate the user by providing them with a cool fact by using the program . Row 2 . I do have a list that does store data and it is accessed by a function, and the data in it is used for the program for the better . Row 3 . the list I am using does manage complexity by storing the fact data and a solution without the list would be unecceccarily complicated, yet plausible. I’m thinking I will make a solution for not using list but if that is too hard I will explain why program can’t be written without it. . Row 4 . I do have a function for calling random facts, but I plan on making a seperate function for questions that will include parameters and contribute to the program. EXPLICIT PARAMETERS IMPORTANT . UPDATE: have the function for generating questions now and it has an explicit parameter for the correct answer of the question. . Row 5 . My function will use sequencing by simply needing certain code parts to run before others, selection by using if else statements for right or wrong answer, and iteration to keep the question going until right answer is given. . UPDATE: I now have a function that includes sequencing, (the function), selection (if else statement for correct answer or not), and iteration (a while loop that checks if answer is right or wrong after 1st time question is wrong). . Row 6 . My testing will be passing in an incorrect answer and a correct answer and showing how the program reacts to those, may need to be change in future according to needs. . video plan . for the video I plan to showcase the page refreshing and giving new facts/words, and then showcase adding a right and wrong answer to my question and showing how it tells you if you are right or wrong. . here of the steps of the video: . 1: open up the feature and press the button that activates the 1st function to show how I can pull random facts/words from my list. . 2: interact with the random question and type in a wrong answer, then press button to check answer and show getting it wrong. . 3: finally, type in correct answer and show the program giving an output that shows I got the game right. .",
            "url": "https://jyustin.github.io/test-fastpages/collegeboard/week%2010/2022/01/27/projecto.html",
            "relUrl": "/collegeboard/week%2010/2022/01/27/projecto.html",
            "date": " • Jan 27, 2022"
        }
        
    
  
    
        ,"post87": {
            "title": "MCQ Midterm score and review/reflection",
            "content": "score . . wrong question 1 reflection . . I got this question wrong because I didn’t think hard enough for the 1st option and didn’t realize that the age 18 would not have outputted the desired output, as both the 1st and 2nd requirements would be met, since 18 is greater than 16 but also equal or less than 18. This had to have been just a minor error or just carelessness on my part, as I succeeded on questions similar to this in the same test. I also didn’t think that the 3rd algorithm would work because I thought the number 16 would have failed, but age 16 is one of the potential ages that needs to output true. looking back on this problem, I must have made this error when looking at the NOT(AGE &lt; 16)), as I may have thought that this meant that 16 wouldn’t work as there is no equal to sign under the inequality. I was just being careless this time around. . wrong question 2 reflection . . For this one, I picked the first algorithm and got the question wrong because I thought that the function would technically work as if it was repeated, it would give the right circles. my error here was that I didn’t count the first runthrough of the repeat section when looking at the code, and thus didn’t recognize that the algorithm would fail, as it would only draw 2 full circles before stopping. it uses up one of it’s repeats just to create a 0x0 circle that doesn’t show up, therefore It can’t finish the other 3 circles as it only does the circle drawing thing 2 more times. If im being honest I recognized that the 3rd function also technically worked, but since I saw the 1st function first, I just went with the 1st 2 instead of 2 and 3. I just needed to be more careful. . weird question I got right but had no idea how to do . . to solve this problem I needed to use hexadecimal system. base 16 number 56 would be 516^1 + 616^0 = 80 + 6 = 86 which is V. I guessed on this one and got it right, but I didn’t know how to do it because I forgot how to do binary/decimal stuff, so I need to review that for the AP test. . 5 goes in 1st place, 6 goes in 0th place, then multiply by base^decimal place. 5*16^1 + 5 *16^0 = 80 + 6 = 86, 86 corresponded to v. . final reflection . most of my mistakes that I made were dumb errors that could have been fixed with a more careful eye, so next time I will be sure to pay very close attention to small details in these questions on the real test. Unlike coding, where I can make small errors and then easily fix them after testing, I don’t get any second chances on the AP test, so I need to make sure that I run through each option and don’t get lazy. I think that having a piece of paper and writing through some of the more complex algorithms when working on the AP test would have some benefit, as it would eliminate some potential chances for errors. .",
            "url": "https://jyustin.github.io/test-fastpages/collegeboard/week%2010/2022/01/26/MCQ2.html",
            "relUrl": "/collegeboard/week%2010/2022/01/26/MCQ2.html",
            "date": " • Jan 26, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me (Justin)",
          "content": "Hello! my name is Justin! . I am currently taking AP CSP and this is my blog for the class. for example, I used sass to make the elements on here change color when your cursor goes over them! . . Cool Button . my github . . my favorite fruit is watermelon . . .",
          "url": "https://jyustin.github.io/test-fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "api",
          "content": "Here is my api work for this week: api .",
          "url": "https://jyustin.github.io/test-fastpages/apis/",
          "relUrl": "/apis/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "notes for ap csp",
          "content": "these are some notes . ###Lists and dictionaries . Lists and Dictionaries can collect information. You can add stuff to lists with .append(expression) . for_loop this is a loop that pulls data out of a list def for_loop(): print(“For loop output n”) for record in InfoDb: print_data(record) . while_loop iterates through stuff similarily to for_loop, but this time it only iterates through a set amount while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(“While loop output n”) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return . while_loop() . recursive loop this loops through itself by calling itself repeatedly. def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return . print(“Recursive loop output n”) recursive_loop(0) . HTML .",
          "url": "https://jyustin.github.io/test-fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "personal csp progress",
          "content": "week progress . week 0 | intro to csp, tool setup, created fastpages blog | . week 1 | learned basic python, improved fastpages blog, learned bash | . week 2 | learned how to use lists and dictionaries, learned some html/css to improve blog page | .",
          "url": "https://jyustin.github.io/test-fastpages/personal-progress/",
          "relUrl": "/personal-progress/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page10": {
          "title": "vocab for ap csp",
          "content": "basic vocab terms definition . list | data type that can have data appended to it with .append(expression). | . dictionary | data type that stores data in key:value pairs | . selection | decision or question an algorithm may reach, in which case the algorithm now has options. | . Algorithm | A process or set of rules to be followed in calculations or other problem solving operations. | . iteration | when something is repeated. usually done using loops. REPEAT N TIMES is pseudocode for this. | . conditional statements | when the code acts based on different conditions based on user input or stored data. | . NESTED CONDITIONAL | conditional statement in a conditional statement | . Sequencing | when you do certain steps in order, for example, doing the first step then the second then the third, etc. | . Selection | when the programmer decides between two different outcomes. | . variable | a way of storing information in a computer program, which could later be changed, referenced, and used | . objects | a structure that can take on a data-type value | . Concatenation | when you add strings or integers together. can’t add strings and integers | . Hexadecimal | numbering system from 1-16. 1-9 are numbers and 9-16 go from a-f | . bits | A binary digit, either 0 or 1 | . bytes | group of binary digits operating as a unit | . floating point | positive or negative numbers that can include decimals | . .upper | simply makes a string uppercase | . .lower | changes string to lowercase | . RGB | a mix of colors using binary. (x, y, z) determines color, x is red, y is green, z is blue. 0 is dark | . code vocab . if, else, and elif statements . an if statement will run a set of code if a certain requirement is met. adding else will mean another piece of code runs if the requirement is not met. . lastly, elif means that if that first condition is not met but the other is, that code in the elif will run. . code example below . if (time &lt; 10) { greeting = &quot;Good morning&quot;; } else if (time &lt; 20) { greeting = &quot;Good day&quot;; } else { greeting = &quot;Good evening&quot;; } . nested statements . a nested statement will just be that statement within the same statement. . example: . if a = 2: if b = 3: print(&quot;ok&quot;) this would be a nested if statement as it is an if statement in an if statement . for and while loops . these are loops that iterate through something or keep something running . i = 1 while i &lt; 6: print(i) i += 1 . fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;] for x in fruits: print(x) . for x in range(2, 6): print(x) this one uses range, printing all numbers from 2 to 5 . Boolean expression . statements that can be true or false . ``a = 200 b = 33 . if b &gt; a: print(“b is greater than a”) else: print(“b is not greater than a”)`` . this is boolean expression because the 2 outputs are true or false. . ### simple concatenation ex: . a = 1 b = 2 print(a + b) plus sign is concatenation . truth tables . truth tables essentially can be used to simplify code and show what the outputs for things can be . x y x &amp; y . t | t | t | . t | f | f | . f | t | f | . f | f | f | . example .",
          "url": "https://jyustin.github.io/test-fastpages/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
      ,"page11": {
          "title": "Javascript week 5 hack",
          "content": "Here are links to my JS/HTML hacks for week 5 . javascript program . javascript table . .",
          "url": "https://jyustin.github.io/test-fastpages/js/",
          "relUrl": "/js/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  

  

  

  
  

  
      ,"page21": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jyustin.github.io/test-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}